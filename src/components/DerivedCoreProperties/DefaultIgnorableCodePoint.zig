// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Default_Ignorable_Code_Point code points.

const std = @import("std");
const mem = std.mem;

const DefaultIgnorableCodePoint = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 768,
hi: u21 = 921599,

pub fn init(allocator: *mem.Allocator) !DefaultIgnorableCodePoint {
    var instance = DefaultIgnorableCodePoint{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 920832),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[2096557] = true;
    instance.array[79] = true;
    instance.array[796] = true;
    index = 3679;
    while (index <= 3680) : (index += 1) {
        instance.array[index] = true;
    }
    index = 5300;
    while (index <= 5301) : (index += 1) {
        instance.array[index] = true;
    }
    index = 5387;
    while (index <= 5389) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[5390] = true;
    index = 7435;
    while (index <= 7439) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7466;
    while (index <= 7470) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7520;
    while (index <= 7524) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[7525] = true;
    index = 7526;
    while (index <= 7535) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[11876] = true;
    index = 64256;
    while (index <= 64271) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[64511] = true;
    instance.array[64672] = true;
    index = 64752;
    while (index <= 64760) : (index += 1) {
        instance.array[index] = true;
    }
    index = 113056;
    while (index <= 113059) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118387;
    while (index <= 118394) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[916736] = true;
    instance.array[916737] = true;
    index = 916738;
    while (index <= 916767) : (index += 1) {
        instance.array[index] = true;
    }
    index = 916768;
    while (index <= 916863) : (index += 1) {
        instance.array[index] = true;
    }
    index = 916864;
    while (index <= 916991) : (index += 1) {
        instance.array[index] = true;
    }
    index = 916992;
    while (index <= 917231) : (index += 1) {
        instance.array[index] = true;
    }
    index = 917232;
    while (index <= 920831) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *DefaultIgnorableCodePoint) void {
    self.allocator.free(self.array);
}

// isDefaultIgnorableCodePoint checks if cp is of the kind Default_Ignorable_Code_Point.
pub fn isDefaultIgnorableCodePoint(self: DefaultIgnorableCodePoint, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
