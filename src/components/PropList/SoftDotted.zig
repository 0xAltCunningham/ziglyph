// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Soft_Dotted code points.

const std = @import("std");
const mem = std.mem;

const SoftDotted = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 303,
hi: u21 = 120467,

pub fn init(allocator: *mem.Allocator) !SoftDotted {
    var instance = SoftDotted{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 120165),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 2096954;
    while (index <= 2096955) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[0] = true;
    instance.array[282] = true;
    instance.array[313] = true;
    instance.array[366] = true;
    instance.array[387] = true;
    instance.array[708] = true;
    instance.array[807] = true;
    instance.array[809] = true;
    instance.array[7219] = true;
    instance.array[7271] = true;
    instance.array[7285] = true;
    instance.array[7289] = true;
    instance.array[7422] = true;
    instance.array[7580] = true;
    instance.array[8002] = true;
    index = 8217;
    while (index <= 8218) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[11085] = true;
    index = 119539;
    while (index <= 119540) : (index += 1) {
        instance.array[index] = true;
    }
    index = 119591;
    while (index <= 119592) : (index += 1) {
        instance.array[index] = true;
    }
    index = 119643;
    while (index <= 119644) : (index += 1) {
        instance.array[index] = true;
    }
    index = 119695;
    while (index <= 119696) : (index += 1) {
        instance.array[index] = true;
    }
    index = 119747;
    while (index <= 119748) : (index += 1) {
        instance.array[index] = true;
    }
    index = 119799;
    while (index <= 119800) : (index += 1) {
        instance.array[index] = true;
    }
    index = 119851;
    while (index <= 119852) : (index += 1) {
        instance.array[index] = true;
    }
    index = 119903;
    while (index <= 119904) : (index += 1) {
        instance.array[index] = true;
    }
    index = 119955;
    while (index <= 119956) : (index += 1) {
        instance.array[index] = true;
    }
    index = 120007;
    while (index <= 120008) : (index += 1) {
        instance.array[index] = true;
    }
    index = 120059;
    while (index <= 120060) : (index += 1) {
        instance.array[index] = true;
    }
    index = 120111;
    while (index <= 120112) : (index += 1) {
        instance.array[index] = true;
    }
    index = 120163;
    while (index <= 120164) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *SoftDotted) void {
    self.allocator.free(self.array);
}

// isSoftDotted checks if cp is of the kind Soft_Dotted.
pub fn isSoftDotted(self: SoftDotted, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
