// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Quotation_Mark code points.

const std = @import("std");
const mem = std.mem;

const QuotationMark = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 33,
hi: u21 = 65379,

pub fn init(allocator: *mem.Allocator) !QuotationMark {
    var instance = QuotationMark{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 65347),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[1] = true;
    instance.array[6] = true;
    instance.array[138] = true;
    instance.array[154] = true;
    instance.array[8183] = true;
    instance.array[8184] = true;
    instance.array[8185] = true;
    index = 8186;
    while (index <= 8187) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[8188] = true;
    instance.array[8189] = true;
    instance.array[8190] = true;
    instance.array[8216] = true;
    instance.array[8217] = true;
    instance.array[11809] = true;
    instance.array[12267] = true;
    instance.array[12268] = true;
    instance.array[12269] = true;
    instance.array[12270] = true;
    instance.array[12284] = true;
    index = 12285;
    while (index <= 12286) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[65056] = true;
    instance.array[65057] = true;
    instance.array[65058] = true;
    instance.array[65059] = true;
    instance.array[65249] = true;
    instance.array[65254] = true;
    instance.array[65345] = true;
    instance.array[65346] = true;

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *QuotationMark) void {
    self.allocator.free(self.array);
}

// isQuotationMark checks if cp is of the kind Quotation_Mark.
pub fn isQuotationMark(self: QuotationMark, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
