// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Digit code points.

const std = @import("std");
const mem = std.mem;

const Digit = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 48,
hi: u21 = 127242,

pub fn init(allocator: *mem.Allocator) !Digit {
    var instance = Digit{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 127195),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 130;
    while (index <= 131) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[137] = true;
    index = 4921;
    while (index <= 4929) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[6570] = true;
    instance.array[8256] = true;
    index = 8260;
    while (index <= 8265) : (index += 1) {
        instance.array[index] = true;
    }
    index = 8272;
    while (index <= 8281) : (index += 1) {
        instance.array[index] = true;
    }
    index = 9264;
    while (index <= 9272) : (index += 1) {
        instance.array[index] = true;
    }
    index = 9284;
    while (index <= 9292) : (index += 1) {
        instance.array[index] = true;
    }
    index = 9304;
    while (index <= 9312) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[9402] = true;
    index = 9413;
    while (index <= 9421) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[9423] = true;
    index = 10054;
    while (index <= 10062) : (index += 1) {
        instance.array[index] = true;
    }
    index = 10064;
    while (index <= 10072) : (index += 1) {
        instance.array[index] = true;
    }
    index = 10074;
    while (index <= 10082) : (index += 1) {
        instance.array[index] = true;
    }
    index = 68112;
    while (index <= 68115) : (index += 1) {
        instance.array[index] = true;
    }
    index = 69168;
    while (index <= 69176) : (index += 1) {
        instance.array[index] = true;
    }
    index = 69666;
    while (index <= 69674) : (index += 1) {
        instance.array[index] = true;
    }
    index = 127184;
    while (index <= 127194) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Digit) void {
    self.allocator.free(self.array);
}

// isDigit checks if cp is of the kind Digit.
pub fn isDigit(self: Digit, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
