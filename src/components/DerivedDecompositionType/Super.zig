// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Super code points.

const std = @import("std");
const mem = std.mem;

const Super = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 170,
hi: u21 = 127340,

pub fn init(allocator: *mem.Allocator) !Super {
    var instance = Super{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 127171),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[0] = true;
    index = 8;
    while (index <= 9) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[15] = true;
    instance.array[16] = true;
    index = 518;
    while (index <= 526) : (index += 1) {
        instance.array[index] = true;
    }
    index = 566;
    while (index <= 570) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[4178] = true;
    index = 7298;
    while (index <= 7300) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7302;
    while (index <= 7312) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7314;
    while (index <= 7331) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7333;
    while (index <= 7351) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[7374] = true;
    index = 7409;
    while (index <= 7445) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[8134] = true;
    instance.array[8135] = true;
    index = 8138;
    while (index <= 8143) : (index += 1) {
        instance.array[index] = true;
    }
    index = 8144;
    while (index <= 8146) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[8147] = true;
    instance.array[8148] = true;
    instance.array[8149] = true;
    instance.array[8310] = true;
    instance.array[8312] = true;
    instance.array[11219] = true;
    instance.array[11461] = true;
    index = 12520;
    while (index <= 12523) : (index += 1) {
        instance.array[index] = true;
    }
    index = 12524;
    while (index <= 12533) : (index += 1) {
        instance.array[index] = true;
    }
    index = 42482;
    while (index <= 42483) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[42694] = true;
    index = 42830;
    while (index <= 42831) : (index += 1) {
        instance.array[index] = true;
    }
    index = 43698;
    while (index <= 43701) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[43711] = true;
    index = 127168;
    while (index <= 127170) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Super) void {
    self.allocator.free(self.array);
}

// isSuper checks if cp is of the kind Super.
pub fn isSuper(self: Super, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
