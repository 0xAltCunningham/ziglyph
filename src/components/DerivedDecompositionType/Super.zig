// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Super code points.

const std = @import("std");
const mem = std.mem;

const Super = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 178,
hi: u21 = 127340,

pub fn init(allocator: *mem.Allocator) !Super {
    var instance = Super{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 127163),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[2097144] = true;
    index = 0;
    while (index <= 1) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[7] = true;
    instance.array[8] = true;
    index = 510;
    while (index <= 518) : (index += 1) {
        instance.array[index] = true;
    }
    index = 558;
    while (index <= 562) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[4170] = true;
    index = 7290;
    while (index <= 7292) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7294;
    while (index <= 7304) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7306;
    while (index <= 7323) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7325;
    while (index <= 7343) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[7366] = true;
    index = 7401;
    while (index <= 7437) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[8126] = true;
    instance.array[8127] = true;
    index = 8130;
    while (index <= 8135) : (index += 1) {
        instance.array[index] = true;
    }
    index = 8136;
    while (index <= 8138) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[8139] = true;
    instance.array[8140] = true;
    instance.array[8141] = true;
    instance.array[8302] = true;
    instance.array[8304] = true;
    instance.array[11211] = true;
    instance.array[11453] = true;
    index = 12512;
    while (index <= 12515) : (index += 1) {
        instance.array[index] = true;
    }
    index = 12516;
    while (index <= 12525) : (index += 1) {
        instance.array[index] = true;
    }
    index = 42474;
    while (index <= 42475) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[42686] = true;
    index = 42822;
    while (index <= 42823) : (index += 1) {
        instance.array[index] = true;
    }
    index = 43690;
    while (index <= 43693) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[43703] = true;
    index = 127160;
    while (index <= 127162) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Super) void {
    self.allocator.free(self.array);
}

// isSuper checks if cp is of the kind Super.
pub fn isSuper(self: Super, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
