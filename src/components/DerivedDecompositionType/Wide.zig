// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Wide code points.

const std = @import("std");
const mem = std.mem;

const Wide = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 65281,
hi: u21 = 65510,

pub fn init(allocator: *mem.Allocator) !Wide {
    var instance = Wide{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 230),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[2044159] = true;
    index = 0;
    while (index <= 2) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[3] = true;
    index = 4;
    while (index <= 6) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[7] = true;
    instance.array[8] = true;
    instance.array[9] = true;
    instance.array[10] = true;
    instance.array[11] = true;
    instance.array[12] = true;
    index = 13;
    while (index <= 14) : (index += 1) {
        instance.array[index] = true;
    }
    index = 15;
    while (index <= 24) : (index += 1) {
        instance.array[index] = true;
    }
    index = 25;
    while (index <= 26) : (index += 1) {
        instance.array[index] = true;
    }
    index = 27;
    while (index <= 29) : (index += 1) {
        instance.array[index] = true;
    }
    index = 30;
    while (index <= 31) : (index += 1) {
        instance.array[index] = true;
    }
    index = 32;
    while (index <= 57) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[58] = true;
    instance.array[59] = true;
    instance.array[60] = true;
    instance.array[61] = true;
    instance.array[62] = true;
    instance.array[63] = true;
    index = 64;
    while (index <= 89) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[90] = true;
    instance.array[91] = true;
    instance.array[92] = true;
    instance.array[93] = true;
    instance.array[94] = true;
    instance.array[95] = true;
    index = 223;
    while (index <= 224) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[225] = true;
    instance.array[226] = true;
    instance.array[227] = true;
    index = 228;
    while (index <= 229) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Wide) void {
    self.allocator.free(self.array);
}

// isWide checks if cp is of the kind Wide.
pub fn isWide(self: Wide, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
