// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Narrow code points.

const std = @import("std");
const mem = std.mem;

const Narrow = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 65104,
hi: u21 = 65518,

pub fn init(allocator: *mem.Allocator) !Narrow {
    var instance = Narrow{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 415),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[273] = true;
    instance.array[274] = true;
    instance.array[275] = true;
    index = 276;
    while (index <= 277) : (index += 1) {
        instance.array[index] = true;
    }
    index = 278;
    while (index <= 287) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[288] = true;
    index = 289;
    while (index <= 333) : (index += 1) {
        instance.array[index] = true;
    }
    index = 334;
    while (index <= 335) : (index += 1) {
        instance.array[index] = true;
    }
    index = 336;
    while (index <= 366) : (index += 1) {
        instance.array[index] = true;
    }
    index = 370;
    while (index <= 375) : (index += 1) {
        instance.array[index] = true;
    }
    index = 378;
    while (index <= 383) : (index += 1) {
        instance.array[index] = true;
    }
    index = 386;
    while (index <= 391) : (index += 1) {
        instance.array[index] = true;
    }
    index = 394;
    while (index <= 396) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[408] = true;
    index = 409;
    while (index <= 412) : (index += 1) {
        instance.array[index] = true;
    }
    index = 413;
    while (index <= 414) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Narrow) void {
    self.allocator.free(self.array);
}

// isNarrow checks if cp is of the kind Narrow.
pub fn isNarrow(self: Narrow, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
