// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Initial code points.

const std = @import("std");
const mem = std.mem;

const Initial = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 64341,
hi: u21 = 65267,

pub fn init(allocator: *mem.Allocator) !Initial {
    var instance = Initial{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 927),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[2097151] = true;
    instance.array[3] = true;
    instance.array[7] = true;
    instance.array[11] = true;
    instance.array[15] = true;
    instance.array[19] = true;
    instance.array[23] = true;
    instance.array[27] = true;
    instance.array[31] = true;
    instance.array[35] = true;
    instance.array[39] = true;
    instance.array[43] = true;
    instance.array[59] = true;
    instance.array[63] = true;
    instance.array[67] = true;
    instance.array[71] = true;
    instance.array[77] = true;
    instance.array[83] = true;
    instance.array[87] = true;
    instance.array[128] = true;
    instance.array[145] = true;
    instance.array[147] = true;
    instance.array[163] = true;
    instance.array[166] = true;
    instance.array[169] = true;
    index = 322;
    while (index <= 393) : (index += 1) {
        instance.array[index] = true;
    }
    index = 472;
    while (index <= 478) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[507] = true;
    index = 509;
    while (index <= 514) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[516] = true;
    index = 519;
    while (index <= 520) : (index += 1) {
        instance.array[index] = true;
    }
    index = 523;
    while (index <= 524) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[526] = true;
    instance.array[528] = true;
    instance.array[531] = true;
    instance.array[534] = true;
    instance.array[536] = true;
    instance.array[539] = true;
    index = 541;
    while (index <= 542) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[546] = true;
    instance.array[552] = true;
    instance.array[558] = true;
    instance.array[561] = true;
    index = 563;
    while (index <= 565) : (index += 1) {
        instance.array[index] = true;
    }
    index = 567;
    while (index <= 570) : (index += 1) {
        instance.array[index] = true;
    }
    index = 573;
    while (index <= 576) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[579] = true;
    instance.array[584] = true;
    index = 607;
    while (index <= 608) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[611] = true;
    instance.array[613] = true;
    index = 622;
    while (index <= 624) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[822] = true;
    instance.array[828] = true;
    instance.array[834] = true;
    instance.array[838] = true;
    instance.array[842] = true;
    instance.array[846] = true;
    instance.array[850] = true;
    instance.array[862] = true;
    instance.array[866] = true;
    instance.array[870] = true;
    instance.array[874] = true;
    instance.array[878] = true;
    instance.array[882] = true;
    instance.array[886] = true;
    instance.array[890] = true;
    instance.array[894] = true;
    instance.array[898] = true;
    instance.array[902] = true;
    instance.array[906] = true;
    instance.array[910] = true;
    instance.array[914] = true;
    instance.array[918] = true;
    instance.array[926] = true;

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Initial) void {
    self.allocator.free(self.array);
}

// isInitial checks if cp is of the kind Initial.
pub fn isInitial(self: Initial, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
