// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Vertical code points.

const std = @import("std");
const mem = std.mem;

const Vertical = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 12447,
hi: u21 = 65096,

pub fn init(allocator: *mem.Allocator) !Vertical {
    var instance = Vertical{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 52650),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[0] = true;
    instance.array[96] = true;
    index = 52593;
    while (index <= 52599) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[52600] = true;
    instance.array[52601] = true;
    instance.array[52602] = true;
    instance.array[52625] = true;
    index = 52626;
    while (index <= 52627) : (index += 1) {
        instance.array[index] = true;
    }
    index = 52628;
    while (index <= 52629) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[52630] = true;
    instance.array[52631] = true;
    instance.array[52632] = true;
    instance.array[52633] = true;
    instance.array[52634] = true;
    instance.array[52635] = true;
    instance.array[52636] = true;
    instance.array[52637] = true;
    instance.array[52638] = true;
    instance.array[52639] = true;
    instance.array[52640] = true;
    instance.array[52641] = true;
    instance.array[52642] = true;
    instance.array[52643] = true;
    instance.array[52644] = true;
    instance.array[52645] = true;
    instance.array[52648] = true;
    instance.array[52649] = true;

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Vertical) void {
    self.allocator.free(self.array);
}

// isVertical checks if cp is of the kind Vertical.
pub fn isVertical(self: Vertical, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
