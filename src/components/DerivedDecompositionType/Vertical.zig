// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Vertical code points.

const std = @import("std");
const mem = std.mem;

const Vertical = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 12288,
hi: u21 = 65096,

pub fn init(allocator: *mem.Allocator) !Vertical {
    var instance = Vertical{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 52809),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[159] = true;
    instance.array[255] = true;
    index = 52752;
    while (index <= 52758) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[52759] = true;
    instance.array[52760] = true;
    instance.array[52761] = true;
    instance.array[52784] = true;
    index = 52785;
    while (index <= 52786) : (index += 1) {
        instance.array[index] = true;
    }
    index = 52787;
    while (index <= 52788) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[52789] = true;
    instance.array[52790] = true;
    instance.array[52791] = true;
    instance.array[52792] = true;
    instance.array[52793] = true;
    instance.array[52794] = true;
    instance.array[52795] = true;
    instance.array[52796] = true;
    instance.array[52797] = true;
    instance.array[52798] = true;
    instance.array[52799] = true;
    instance.array[52800] = true;
    instance.array[52801] = true;
    instance.array[52802] = true;
    instance.array[52803] = true;
    instance.array[52804] = true;
    instance.array[52807] = true;
    instance.array[52808] = true;

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Vertical) void {
    self.allocator.free(self.array);
}

// isVertical checks if cp is of the kind Vertical.
pub fn isVertical(self: Vertical, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
