// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
//! Unicode decomposition map.

const std = @import("std");
const mem = std.mem;
const sort = std.sort.sort;
const unicode = std.unicode;

const CccMap = @import("../DerivedCombiningClass/CccMap.zig");
const DecompTrie = @import("../../../zigstr/DecompTrie.zig");
const HangulMap = @import("../HangulSyllableType/HangulMap.zig");
const Letter = @import("../../aggregate/Letter.zig");
const NFDCheck = @import("../DerivedNormalizationProps/NFDCheck.zig");

allocator: *mem.Allocator,
ccc_map: CccMap,
decomp_trie: DecompTrie,
hangul_map: HangulMap,
letter: Letter,
nfd_check: NFDCheck,

const Decomposed = DecompTrie.Decomposed;
const Self = @This();

const Singleton = struct {
    instance: *Self,
    ref_count: usize,
};

var singleton: ?Singleton = null;

pub fn init(allocator: *mem.Allocator) !*Self {
    if (singleton) |*s| {
        s.ref_count += 1;
        return s.instance;
    }

    var self = try allocator.create(Self);
    errdefer allocator.destroy(self);

    self.* = Self{
        .allocator = allocator,
        .ccc_map = CccMap{},
        .decomp_trie = try DecompTrie.init(allocator),
        .hangul_map = HangulMap{},
        .letter = Letter.new(),
        .nfd_check = NFDCheck{},
    };

    try self.addEntries();

    singleton = Singleton{
        .instance = self,
        .ref_count = 1,
    };

    return self;
}

pub fn deinit(self: *Self) void {
    if (singleton) |*s| {
        s.ref_count -= 1;
        if (s.ref_count == 0) {
            self.decomp_trie.deinit();
            self.allocator.destroy(s.instance);
            singleton = null;
        }
    }
}

fn addEntries(self: *Self) !void {
    try self.decomp_trie.add(&[_]u8{ 0xc2, 0xa0 }, .{ .compat = &[_]u21{ 0x0020 } });
    try self.decomp_trie.add(&[_]u8{ 0xc2, 0xa8 }, .{ .compat = &[_]u21{ 0x0020, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xc2, 0xaa }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xc2, 0xaf }, .{ .compat = &[_]u21{ 0x0020, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc2, 0xb2 }, .{ .compat = &[_]u21{ 0x0032 } });
    try self.decomp_trie.add(&[_]u8{ 0xc2, 0xb3 }, .{ .compat = &[_]u21{ 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xc2, 0xb4 }, .{ .compat = &[_]u21{ 0x0020, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc2, 0xb5 }, .{ .compat = &[_]u21{ 0x03BC } });
    try self.decomp_trie.add(&[_]u8{ 0xc2, 0xb8 }, .{ .compat = &[_]u21{ 0x0020, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc2, 0xb9 }, .{ .compat = &[_]u21{ 0x0031 } });
    try self.decomp_trie.add(&[_]u8{ 0xc2, 0xba }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xc2, 0xbc }, .{ .compat = &[_]u21{ 0x0031, 0x2044, 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xc2, 0xbd }, .{ .compat = &[_]u21{ 0x0031, 0x2044, 0x0032 } });
    try self.decomp_trie.add(&[_]u8{ 0xc2, 0xbe }, .{ .compat = &[_]u21{ 0x0033, 0x2044, 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x80 }, .{ .canon = [2]u21{ 0x0041, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x81 }, .{ .canon = [2]u21{ 0x0041, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x82 }, .{ .canon = [2]u21{ 0x0041, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x83 }, .{ .canon = [2]u21{ 0x0041, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x84 }, .{ .canon = [2]u21{ 0x0041, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x85 }, .{ .canon = [2]u21{ 0x0041, 0x030A } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x87 }, .{ .canon = [2]u21{ 0x0043, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x88 }, .{ .canon = [2]u21{ 0x0045, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x89 }, .{ .canon = [2]u21{ 0x0045, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x8a }, .{ .canon = [2]u21{ 0x0045, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x8b }, .{ .canon = [2]u21{ 0x0045, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x8c }, .{ .canon = [2]u21{ 0x0049, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x8d }, .{ .canon = [2]u21{ 0x0049, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x8e }, .{ .canon = [2]u21{ 0x0049, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x8f }, .{ .canon = [2]u21{ 0x0049, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x91 }, .{ .canon = [2]u21{ 0x004E, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x92 }, .{ .canon = [2]u21{ 0x004F, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x93 }, .{ .canon = [2]u21{ 0x004F, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x94 }, .{ .canon = [2]u21{ 0x004F, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x95 }, .{ .canon = [2]u21{ 0x004F, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x96 }, .{ .canon = [2]u21{ 0x004F, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x99 }, .{ .canon = [2]u21{ 0x0055, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x9a }, .{ .canon = [2]u21{ 0x0055, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x9b }, .{ .canon = [2]u21{ 0x0055, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x9c }, .{ .canon = [2]u21{ 0x0055, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0x9d }, .{ .canon = [2]u21{ 0x0059, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xa0 }, .{ .canon = [2]u21{ 0x0061, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xa1 }, .{ .canon = [2]u21{ 0x0061, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xa2 }, .{ .canon = [2]u21{ 0x0061, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xa3 }, .{ .canon = [2]u21{ 0x0061, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xa4 }, .{ .canon = [2]u21{ 0x0061, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xa5 }, .{ .canon = [2]u21{ 0x0061, 0x030A } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xa7 }, .{ .canon = [2]u21{ 0x0063, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xa8 }, .{ .canon = [2]u21{ 0x0065, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xa9 }, .{ .canon = [2]u21{ 0x0065, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xaa }, .{ .canon = [2]u21{ 0x0065, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xab }, .{ .canon = [2]u21{ 0x0065, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xac }, .{ .canon = [2]u21{ 0x0069, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xad }, .{ .canon = [2]u21{ 0x0069, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xae }, .{ .canon = [2]u21{ 0x0069, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xaf }, .{ .canon = [2]u21{ 0x0069, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xb1 }, .{ .canon = [2]u21{ 0x006E, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xb2 }, .{ .canon = [2]u21{ 0x006F, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xb3 }, .{ .canon = [2]u21{ 0x006F, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xb4 }, .{ .canon = [2]u21{ 0x006F, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xb5 }, .{ .canon = [2]u21{ 0x006F, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xb6 }, .{ .canon = [2]u21{ 0x006F, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xb9 }, .{ .canon = [2]u21{ 0x0075, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xba }, .{ .canon = [2]u21{ 0x0075, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xbb }, .{ .canon = [2]u21{ 0x0075, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xbc }, .{ .canon = [2]u21{ 0x0075, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xbd }, .{ .canon = [2]u21{ 0x0079, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc3, 0xbf }, .{ .canon = [2]u21{ 0x0079, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x80 }, .{ .canon = [2]u21{ 0x0041, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x81 }, .{ .canon = [2]u21{ 0x0061, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x82 }, .{ .canon = [2]u21{ 0x0041, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x83 }, .{ .canon = [2]u21{ 0x0061, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x84 }, .{ .canon = [2]u21{ 0x0041, 0x0328 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x85 }, .{ .canon = [2]u21{ 0x0061, 0x0328 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x86 }, .{ .canon = [2]u21{ 0x0043, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x87 }, .{ .canon = [2]u21{ 0x0063, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x88 }, .{ .canon = [2]u21{ 0x0043, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x89 }, .{ .canon = [2]u21{ 0x0063, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x8a }, .{ .canon = [2]u21{ 0x0043, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x8b }, .{ .canon = [2]u21{ 0x0063, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x8c }, .{ .canon = [2]u21{ 0x0043, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x8d }, .{ .canon = [2]u21{ 0x0063, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x8e }, .{ .canon = [2]u21{ 0x0044, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x8f }, .{ .canon = [2]u21{ 0x0064, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x92 }, .{ .canon = [2]u21{ 0x0045, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x93 }, .{ .canon = [2]u21{ 0x0065, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x94 }, .{ .canon = [2]u21{ 0x0045, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x95 }, .{ .canon = [2]u21{ 0x0065, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x96 }, .{ .canon = [2]u21{ 0x0045, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x97 }, .{ .canon = [2]u21{ 0x0065, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x98 }, .{ .canon = [2]u21{ 0x0045, 0x0328 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x99 }, .{ .canon = [2]u21{ 0x0065, 0x0328 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x9a }, .{ .canon = [2]u21{ 0x0045, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x9b }, .{ .canon = [2]u21{ 0x0065, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x9c }, .{ .canon = [2]u21{ 0x0047, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x9d }, .{ .canon = [2]u21{ 0x0067, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x9e }, .{ .canon = [2]u21{ 0x0047, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0x9f }, .{ .canon = [2]u21{ 0x0067, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xa0 }, .{ .canon = [2]u21{ 0x0047, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xa1 }, .{ .canon = [2]u21{ 0x0067, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xa2 }, .{ .canon = [2]u21{ 0x0047, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xa3 }, .{ .canon = [2]u21{ 0x0067, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xa4 }, .{ .canon = [2]u21{ 0x0048, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xa5 }, .{ .canon = [2]u21{ 0x0068, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xa8 }, .{ .canon = [2]u21{ 0x0049, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xa9 }, .{ .canon = [2]u21{ 0x0069, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xaa }, .{ .canon = [2]u21{ 0x0049, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xab }, .{ .canon = [2]u21{ 0x0069, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xac }, .{ .canon = [2]u21{ 0x0049, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xad }, .{ .canon = [2]u21{ 0x0069, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xae }, .{ .canon = [2]u21{ 0x0049, 0x0328 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xaf }, .{ .canon = [2]u21{ 0x0069, 0x0328 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xb0 }, .{ .canon = [2]u21{ 0x0049, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xb2 }, .{ .compat = &[_]u21{ 0x0049, 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xb3 }, .{ .compat = &[_]u21{ 0x0069, 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xb4 }, .{ .canon = [2]u21{ 0x004A, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xb5 }, .{ .canon = [2]u21{ 0x006A, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xb6 }, .{ .canon = [2]u21{ 0x004B, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xb7 }, .{ .canon = [2]u21{ 0x006B, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xb9 }, .{ .canon = [2]u21{ 0x004C, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xba }, .{ .canon = [2]u21{ 0x006C, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xbb }, .{ .canon = [2]u21{ 0x004C, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xbc }, .{ .canon = [2]u21{ 0x006C, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xbd }, .{ .canon = [2]u21{ 0x004C, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xbe }, .{ .canon = [2]u21{ 0x006C, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc4, 0xbf }, .{ .compat = &[_]u21{ 0x004C, 0x00B7 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x80 }, .{ .compat = &[_]u21{ 0x006C, 0x00B7 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x83 }, .{ .canon = [2]u21{ 0x004E, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x84 }, .{ .canon = [2]u21{ 0x006E, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x85 }, .{ .canon = [2]u21{ 0x004E, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x86 }, .{ .canon = [2]u21{ 0x006E, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x87 }, .{ .canon = [2]u21{ 0x004E, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x88 }, .{ .canon = [2]u21{ 0x006E, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x89 }, .{ .compat = &[_]u21{ 0x02BC, 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x8c }, .{ .canon = [2]u21{ 0x004F, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x8d }, .{ .canon = [2]u21{ 0x006F, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x8e }, .{ .canon = [2]u21{ 0x004F, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x8f }, .{ .canon = [2]u21{ 0x006F, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x90 }, .{ .canon = [2]u21{ 0x004F, 0x030B } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x91 }, .{ .canon = [2]u21{ 0x006F, 0x030B } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x94 }, .{ .canon = [2]u21{ 0x0052, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x95 }, .{ .canon = [2]u21{ 0x0072, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x96 }, .{ .canon = [2]u21{ 0x0052, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x97 }, .{ .canon = [2]u21{ 0x0072, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x98 }, .{ .canon = [2]u21{ 0x0052, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x99 }, .{ .canon = [2]u21{ 0x0072, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x9a }, .{ .canon = [2]u21{ 0x0053, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x9b }, .{ .canon = [2]u21{ 0x0073, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x9c }, .{ .canon = [2]u21{ 0x0053, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x9d }, .{ .canon = [2]u21{ 0x0073, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x9e }, .{ .canon = [2]u21{ 0x0053, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0x9f }, .{ .canon = [2]u21{ 0x0073, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xa0 }, .{ .canon = [2]u21{ 0x0053, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xa1 }, .{ .canon = [2]u21{ 0x0073, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xa2 }, .{ .canon = [2]u21{ 0x0054, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xa3 }, .{ .canon = [2]u21{ 0x0074, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xa4 }, .{ .canon = [2]u21{ 0x0054, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xa5 }, .{ .canon = [2]u21{ 0x0074, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xa8 }, .{ .canon = [2]u21{ 0x0055, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xa9 }, .{ .canon = [2]u21{ 0x0075, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xaa }, .{ .canon = [2]u21{ 0x0055, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xab }, .{ .canon = [2]u21{ 0x0075, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xac }, .{ .canon = [2]u21{ 0x0055, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xad }, .{ .canon = [2]u21{ 0x0075, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xae }, .{ .canon = [2]u21{ 0x0055, 0x030A } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xaf }, .{ .canon = [2]u21{ 0x0075, 0x030A } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xb0 }, .{ .canon = [2]u21{ 0x0055, 0x030B } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xb1 }, .{ .canon = [2]u21{ 0x0075, 0x030B } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xb2 }, .{ .canon = [2]u21{ 0x0055, 0x0328 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xb3 }, .{ .canon = [2]u21{ 0x0075, 0x0328 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xb4 }, .{ .canon = [2]u21{ 0x0057, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xb5 }, .{ .canon = [2]u21{ 0x0077, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xb6 }, .{ .canon = [2]u21{ 0x0059, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xb7 }, .{ .canon = [2]u21{ 0x0079, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xb8 }, .{ .canon = [2]u21{ 0x0059, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xb9 }, .{ .canon = [2]u21{ 0x005A, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xba }, .{ .canon = [2]u21{ 0x007A, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xbb }, .{ .canon = [2]u21{ 0x005A, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xbc }, .{ .canon = [2]u21{ 0x007A, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xbd }, .{ .canon = [2]u21{ 0x005A, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xbe }, .{ .canon = [2]u21{ 0x007A, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc5, 0xbf }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xc6, 0xa0 }, .{ .canon = [2]u21{ 0x004F, 0x031B } });
    try self.decomp_trie.add(&[_]u8{ 0xc6, 0xa1 }, .{ .canon = [2]u21{ 0x006F, 0x031B } });
    try self.decomp_trie.add(&[_]u8{ 0xc6, 0xaf }, .{ .canon = [2]u21{ 0x0055, 0x031B } });
    try self.decomp_trie.add(&[_]u8{ 0xc6, 0xb0 }, .{ .canon = [2]u21{ 0x0075, 0x031B } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x84 }, .{ .compat = &[_]u21{ 0x0044, 0x017D } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x85 }, .{ .compat = &[_]u21{ 0x0044, 0x017E } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x86 }, .{ .compat = &[_]u21{ 0x0064, 0x017E } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x87 }, .{ .compat = &[_]u21{ 0x004C, 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x88 }, .{ .compat = &[_]u21{ 0x004C, 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x89 }, .{ .compat = &[_]u21{ 0x006C, 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x8a }, .{ .compat = &[_]u21{ 0x004E, 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x8b }, .{ .compat = &[_]u21{ 0x004E, 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x8c }, .{ .compat = &[_]u21{ 0x006E, 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x8d }, .{ .canon = [2]u21{ 0x0041, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x8e }, .{ .canon = [2]u21{ 0x0061, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x8f }, .{ .canon = [2]u21{ 0x0049, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x90 }, .{ .canon = [2]u21{ 0x0069, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x91 }, .{ .canon = [2]u21{ 0x004F, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x92 }, .{ .canon = [2]u21{ 0x006F, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x93 }, .{ .canon = [2]u21{ 0x0055, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x94 }, .{ .canon = [2]u21{ 0x0075, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x95 }, .{ .canon = [2]u21{ 0x00DC, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x96 }, .{ .canon = [2]u21{ 0x00FC, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x97 }, .{ .canon = [2]u21{ 0x00DC, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x98 }, .{ .canon = [2]u21{ 0x00FC, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x99 }, .{ .canon = [2]u21{ 0x00DC, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x9a }, .{ .canon = [2]u21{ 0x00FC, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x9b }, .{ .canon = [2]u21{ 0x00DC, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x9c }, .{ .canon = [2]u21{ 0x00FC, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x9e }, .{ .canon = [2]u21{ 0x00C4, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0x9f }, .{ .canon = [2]u21{ 0x00E4, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xa0 }, .{ .canon = [2]u21{ 0x0226, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xa1 }, .{ .canon = [2]u21{ 0x0227, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xa2 }, .{ .canon = [2]u21{ 0x00C6, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xa3 }, .{ .canon = [2]u21{ 0x00E6, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xa6 }, .{ .canon = [2]u21{ 0x0047, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xa7 }, .{ .canon = [2]u21{ 0x0067, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xa8 }, .{ .canon = [2]u21{ 0x004B, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xa9 }, .{ .canon = [2]u21{ 0x006B, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xaa }, .{ .canon = [2]u21{ 0x004F, 0x0328 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xab }, .{ .canon = [2]u21{ 0x006F, 0x0328 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xac }, .{ .canon = [2]u21{ 0x01EA, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xad }, .{ .canon = [2]u21{ 0x01EB, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xae }, .{ .canon = [2]u21{ 0x01B7, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xaf }, .{ .canon = [2]u21{ 0x0292, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xb0 }, .{ .canon = [2]u21{ 0x006A, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xb1 }, .{ .compat = &[_]u21{ 0x0044, 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xb2 }, .{ .compat = &[_]u21{ 0x0044, 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xb3 }, .{ .compat = &[_]u21{ 0x0064, 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xb4 }, .{ .canon = [2]u21{ 0x0047, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xb5 }, .{ .canon = [2]u21{ 0x0067, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xb8 }, .{ .canon = [2]u21{ 0x004E, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xb9 }, .{ .canon = [2]u21{ 0x006E, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xba }, .{ .canon = [2]u21{ 0x00C5, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xbb }, .{ .canon = [2]u21{ 0x00E5, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xbc }, .{ .canon = [2]u21{ 0x00C6, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xbd }, .{ .canon = [2]u21{ 0x00E6, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xbe }, .{ .canon = [2]u21{ 0x00D8, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc7, 0xbf }, .{ .canon = [2]u21{ 0x00F8, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x80 }, .{ .canon = [2]u21{ 0x0041, 0x030F } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x81 }, .{ .canon = [2]u21{ 0x0061, 0x030F } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x82 }, .{ .canon = [2]u21{ 0x0041, 0x0311 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x83 }, .{ .canon = [2]u21{ 0x0061, 0x0311 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x84 }, .{ .canon = [2]u21{ 0x0045, 0x030F } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x85 }, .{ .canon = [2]u21{ 0x0065, 0x030F } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x86 }, .{ .canon = [2]u21{ 0x0045, 0x0311 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x87 }, .{ .canon = [2]u21{ 0x0065, 0x0311 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x88 }, .{ .canon = [2]u21{ 0x0049, 0x030F } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x89 }, .{ .canon = [2]u21{ 0x0069, 0x030F } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x8a }, .{ .canon = [2]u21{ 0x0049, 0x0311 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x8b }, .{ .canon = [2]u21{ 0x0069, 0x0311 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x8c }, .{ .canon = [2]u21{ 0x004F, 0x030F } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x8d }, .{ .canon = [2]u21{ 0x006F, 0x030F } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x8e }, .{ .canon = [2]u21{ 0x004F, 0x0311 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x8f }, .{ .canon = [2]u21{ 0x006F, 0x0311 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x90 }, .{ .canon = [2]u21{ 0x0052, 0x030F } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x91 }, .{ .canon = [2]u21{ 0x0072, 0x030F } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x92 }, .{ .canon = [2]u21{ 0x0052, 0x0311 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x93 }, .{ .canon = [2]u21{ 0x0072, 0x0311 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x94 }, .{ .canon = [2]u21{ 0x0055, 0x030F } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x95 }, .{ .canon = [2]u21{ 0x0075, 0x030F } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x96 }, .{ .canon = [2]u21{ 0x0055, 0x0311 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x97 }, .{ .canon = [2]u21{ 0x0075, 0x0311 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x98 }, .{ .canon = [2]u21{ 0x0053, 0x0326 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x99 }, .{ .canon = [2]u21{ 0x0073, 0x0326 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x9a }, .{ .canon = [2]u21{ 0x0054, 0x0326 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x9b }, .{ .canon = [2]u21{ 0x0074, 0x0326 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x9e }, .{ .canon = [2]u21{ 0x0048, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0x9f }, .{ .canon = [2]u21{ 0x0068, 0x030C } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0xa6 }, .{ .canon = [2]u21{ 0x0041, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0xa7 }, .{ .canon = [2]u21{ 0x0061, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0xa8 }, .{ .canon = [2]u21{ 0x0045, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0xa9 }, .{ .canon = [2]u21{ 0x0065, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0xaa }, .{ .canon = [2]u21{ 0x00D6, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0xab }, .{ .canon = [2]u21{ 0x00F6, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0xac }, .{ .canon = [2]u21{ 0x00D5, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0xad }, .{ .canon = [2]u21{ 0x00F5, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0xae }, .{ .canon = [2]u21{ 0x004F, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0xaf }, .{ .canon = [2]u21{ 0x006F, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0xb0 }, .{ .canon = [2]u21{ 0x022E, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0xb1 }, .{ .canon = [2]u21{ 0x022F, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0xb2 }, .{ .canon = [2]u21{ 0x0059, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xc8, 0xb3 }, .{ .canon = [2]u21{ 0x0079, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xca, 0xb0 }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xca, 0xb1 }, .{ .compat = &[_]u21{ 0x0266 } });
    try self.decomp_trie.add(&[_]u8{ 0xca, 0xb2 }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xca, 0xb3 }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xca, 0xb4 }, .{ .compat = &[_]u21{ 0x0279 } });
    try self.decomp_trie.add(&[_]u8{ 0xca, 0xb5 }, .{ .compat = &[_]u21{ 0x027B } });
    try self.decomp_trie.add(&[_]u8{ 0xca, 0xb6 }, .{ .compat = &[_]u21{ 0x0281 } });
    try self.decomp_trie.add(&[_]u8{ 0xca, 0xb7 }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xca, 0xb8 }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xcb, 0x98 }, .{ .compat = &[_]u21{ 0x0020, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xcb, 0x99 }, .{ .compat = &[_]u21{ 0x0020, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xcb, 0x9a }, .{ .compat = &[_]u21{ 0x0020, 0x030A } });
    try self.decomp_trie.add(&[_]u8{ 0xcb, 0x9b }, .{ .compat = &[_]u21{ 0x0020, 0x0328 } });
    try self.decomp_trie.add(&[_]u8{ 0xcb, 0x9c }, .{ .compat = &[_]u21{ 0x0020, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xcb, 0x9d }, .{ .compat = &[_]u21{ 0x0020, 0x030B } });
    try self.decomp_trie.add(&[_]u8{ 0xcb, 0xa0 }, .{ .compat = &[_]u21{ 0x0263 } });
    try self.decomp_trie.add(&[_]u8{ 0xcb, 0xa1 }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xcb, 0xa2 }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xcb, 0xa3 }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xcb, 0xa4 }, .{ .compat = &[_]u21{ 0x0295 } });
    try self.decomp_trie.add(&[_]u8{ 0xcd, 0x80 }, .{ .single = 0x0300 });
    try self.decomp_trie.add(&[_]u8{ 0xcd, 0x81 }, .{ .single = 0x0301 });
    try self.decomp_trie.add(&[_]u8{ 0xcd, 0x83 }, .{ .single = 0x0313 });
    try self.decomp_trie.add(&[_]u8{ 0xcd, 0x84 }, .{ .canon = [2]u21{ 0x0308, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xcd, 0xb4 }, .{ .single = 0x02B9 });
    try self.decomp_trie.add(&[_]u8{ 0xcd, 0xba }, .{ .compat = &[_]u21{ 0x0020, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xcd, 0xbe }, .{ .single = 0x003B });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0x84 }, .{ .compat = &[_]u21{ 0x0020, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0x85 }, .{ .canon = [2]u21{ 0x00A8, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0x86 }, .{ .canon = [2]u21{ 0x0391, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0x87 }, .{ .single = 0x00B7 });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0x88 }, .{ .canon = [2]u21{ 0x0395, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0x89 }, .{ .canon = [2]u21{ 0x0397, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0x8a }, .{ .canon = [2]u21{ 0x0399, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0x8c }, .{ .canon = [2]u21{ 0x039F, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0x8e }, .{ .canon = [2]u21{ 0x03A5, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0x8f }, .{ .canon = [2]u21{ 0x03A9, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0x90 }, .{ .canon = [2]u21{ 0x03CA, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0xaa }, .{ .canon = [2]u21{ 0x0399, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0xab }, .{ .canon = [2]u21{ 0x03A5, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0xac }, .{ .canon = [2]u21{ 0x03B1, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0xad }, .{ .canon = [2]u21{ 0x03B5, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0xae }, .{ .canon = [2]u21{ 0x03B7, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0xaf }, .{ .canon = [2]u21{ 0x03B9, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xce, 0xb0 }, .{ .canon = [2]u21{ 0x03CB, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0x8a }, .{ .canon = [2]u21{ 0x03B9, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0x8b }, .{ .canon = [2]u21{ 0x03C5, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0x8c }, .{ .canon = [2]u21{ 0x03BF, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0x8d }, .{ .canon = [2]u21{ 0x03C5, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0x8e }, .{ .canon = [2]u21{ 0x03C9, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0x90 }, .{ .compat = &[_]u21{ 0x03B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0x91 }, .{ .compat = &[_]u21{ 0x03B8 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0x92 }, .{ .compat = &[_]u21{ 0x03A5 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0x93 }, .{ .canon = [2]u21{ 0x03D2, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0x94 }, .{ .canon = [2]u21{ 0x03D2, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0x95 }, .{ .compat = &[_]u21{ 0x03C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0x96 }, .{ .compat = &[_]u21{ 0x03C0 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0xb0 }, .{ .compat = &[_]u21{ 0x03BA } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0xb1 }, .{ .compat = &[_]u21{ 0x03C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0xb2 }, .{ .compat = &[_]u21{ 0x03C2 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0xb4 }, .{ .compat = &[_]u21{ 0x0398 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0xb5 }, .{ .compat = &[_]u21{ 0x03B5 } });
    try self.decomp_trie.add(&[_]u8{ 0xcf, 0xb9 }, .{ .compat = &[_]u21{ 0x03A3 } });
    try self.decomp_trie.add(&[_]u8{ 0xd0, 0x80 }, .{ .canon = [2]u21{ 0x0415, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xd0, 0x81 }, .{ .canon = [2]u21{ 0x0415, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd0, 0x83 }, .{ .canon = [2]u21{ 0x0413, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xd0, 0x87 }, .{ .canon = [2]u21{ 0x0406, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd0, 0x8c }, .{ .canon = [2]u21{ 0x041A, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xd0, 0x8d }, .{ .canon = [2]u21{ 0x0418, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xd0, 0x8e }, .{ .canon = [2]u21{ 0x0423, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xd0, 0x99 }, .{ .canon = [2]u21{ 0x0418, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xd0, 0xb9 }, .{ .canon = [2]u21{ 0x0438, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xd1, 0x90 }, .{ .canon = [2]u21{ 0x0435, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xd1, 0x91 }, .{ .canon = [2]u21{ 0x0435, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd1, 0x93 }, .{ .canon = [2]u21{ 0x0433, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xd1, 0x97 }, .{ .canon = [2]u21{ 0x0456, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd1, 0x9c }, .{ .canon = [2]u21{ 0x043A, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xd1, 0x9d }, .{ .canon = [2]u21{ 0x0438, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xd1, 0x9e }, .{ .canon = [2]u21{ 0x0443, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xd1, 0xb6 }, .{ .canon = [2]u21{ 0x0474, 0x030F } });
    try self.decomp_trie.add(&[_]u8{ 0xd1, 0xb7 }, .{ .canon = [2]u21{ 0x0475, 0x030F } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0x81 }, .{ .canon = [2]u21{ 0x0416, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0x82 }, .{ .canon = [2]u21{ 0x0436, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0x90 }, .{ .canon = [2]u21{ 0x0410, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0x91 }, .{ .canon = [2]u21{ 0x0430, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0x92 }, .{ .canon = [2]u21{ 0x0410, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0x93 }, .{ .canon = [2]u21{ 0x0430, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0x96 }, .{ .canon = [2]u21{ 0x0415, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0x97 }, .{ .canon = [2]u21{ 0x0435, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0x9a }, .{ .canon = [2]u21{ 0x04D8, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0x9b }, .{ .canon = [2]u21{ 0x04D9, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0x9c }, .{ .canon = [2]u21{ 0x0416, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0x9d }, .{ .canon = [2]u21{ 0x0436, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0x9e }, .{ .canon = [2]u21{ 0x0417, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0x9f }, .{ .canon = [2]u21{ 0x0437, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xa2 }, .{ .canon = [2]u21{ 0x0418, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xa3 }, .{ .canon = [2]u21{ 0x0438, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xa4 }, .{ .canon = [2]u21{ 0x0418, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xa5 }, .{ .canon = [2]u21{ 0x0438, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xa6 }, .{ .canon = [2]u21{ 0x041E, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xa7 }, .{ .canon = [2]u21{ 0x043E, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xaa }, .{ .canon = [2]u21{ 0x04E8, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xab }, .{ .canon = [2]u21{ 0x04E9, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xac }, .{ .canon = [2]u21{ 0x042D, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xad }, .{ .canon = [2]u21{ 0x044D, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xae }, .{ .canon = [2]u21{ 0x0423, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xaf }, .{ .canon = [2]u21{ 0x0443, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xb0 }, .{ .canon = [2]u21{ 0x0423, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xb1 }, .{ .canon = [2]u21{ 0x0443, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xb2 }, .{ .canon = [2]u21{ 0x0423, 0x030B } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xb3 }, .{ .canon = [2]u21{ 0x0443, 0x030B } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xb4 }, .{ .canon = [2]u21{ 0x0427, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xb5 }, .{ .canon = [2]u21{ 0x0447, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xb8 }, .{ .canon = [2]u21{ 0x042B, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd3, 0xb9 }, .{ .canon = [2]u21{ 0x044B, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xd6, 0x87 }, .{ .compat = &[_]u21{ 0x0565, 0x0582 } });
    try self.decomp_trie.add(&[_]u8{ 0xd8, 0xa2 }, .{ .canon = [2]u21{ 0x0627, 0x0653 } });
    try self.decomp_trie.add(&[_]u8{ 0xd8, 0xa3 }, .{ .canon = [2]u21{ 0x0627, 0x0654 } });
    try self.decomp_trie.add(&[_]u8{ 0xd8, 0xa4 }, .{ .canon = [2]u21{ 0x0648, 0x0654 } });
    try self.decomp_trie.add(&[_]u8{ 0xd8, 0xa5 }, .{ .canon = [2]u21{ 0x0627, 0x0655 } });
    try self.decomp_trie.add(&[_]u8{ 0xd8, 0xa6 }, .{ .canon = [2]u21{ 0x064A, 0x0654 } });
    try self.decomp_trie.add(&[_]u8{ 0xd9, 0xb5 }, .{ .compat = &[_]u21{ 0x0627, 0x0674 } });
    try self.decomp_trie.add(&[_]u8{ 0xd9, 0xb6 }, .{ .compat = &[_]u21{ 0x0648, 0x0674 } });
    try self.decomp_trie.add(&[_]u8{ 0xd9, 0xb7 }, .{ .compat = &[_]u21{ 0x06C7, 0x0674 } });
    try self.decomp_trie.add(&[_]u8{ 0xd9, 0xb8 }, .{ .compat = &[_]u21{ 0x064A, 0x0674 } });
    try self.decomp_trie.add(&[_]u8{ 0xdb, 0x80 }, .{ .canon = [2]u21{ 0x06D5, 0x0654 } });
    try self.decomp_trie.add(&[_]u8{ 0xdb, 0x82 }, .{ .canon = [2]u21{ 0x06C1, 0x0654 } });
    try self.decomp_trie.add(&[_]u8{ 0xdb, 0x93 }, .{ .canon = [2]u21{ 0x06D2, 0x0654 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa4, 0xa9 }, .{ .canon = [2]u21{ 0x0928, 0x093C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa4, 0xb1 }, .{ .canon = [2]u21{ 0x0930, 0x093C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa4, 0xb4 }, .{ .canon = [2]u21{ 0x0933, 0x093C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa5, 0x98 }, .{ .canon = [2]u21{ 0x0915, 0x093C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa5, 0x99 }, .{ .canon = [2]u21{ 0x0916, 0x093C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa5, 0x9a }, .{ .canon = [2]u21{ 0x0917, 0x093C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa5, 0x9b }, .{ .canon = [2]u21{ 0x091C, 0x093C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa5, 0x9c }, .{ .canon = [2]u21{ 0x0921, 0x093C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa5, 0x9d }, .{ .canon = [2]u21{ 0x0922, 0x093C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa5, 0x9e }, .{ .canon = [2]u21{ 0x092B, 0x093C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa5, 0x9f }, .{ .canon = [2]u21{ 0x092F, 0x093C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa7, 0x8b }, .{ .canon = [2]u21{ 0x09C7, 0x09BE } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa7, 0x8c }, .{ .canon = [2]u21{ 0x09C7, 0x09D7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa7, 0x9c }, .{ .canon = [2]u21{ 0x09A1, 0x09BC } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa7, 0x9d }, .{ .canon = [2]u21{ 0x09A2, 0x09BC } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa7, 0x9f }, .{ .canon = [2]u21{ 0x09AF, 0x09BC } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa8, 0xb3 }, .{ .canon = [2]u21{ 0x0A32, 0x0A3C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa8, 0xb6 }, .{ .canon = [2]u21{ 0x0A38, 0x0A3C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa9, 0x99 }, .{ .canon = [2]u21{ 0x0A16, 0x0A3C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa9, 0x9a }, .{ .canon = [2]u21{ 0x0A17, 0x0A3C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa9, 0x9b }, .{ .canon = [2]u21{ 0x0A1C, 0x0A3C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xa9, 0x9e }, .{ .canon = [2]u21{ 0x0A2B, 0x0A3C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xad, 0x88 }, .{ .canon = [2]u21{ 0x0B47, 0x0B56 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xad, 0x8b }, .{ .canon = [2]u21{ 0x0B47, 0x0B3E } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xad, 0x8c }, .{ .canon = [2]u21{ 0x0B47, 0x0B57 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xad, 0x9c }, .{ .canon = [2]u21{ 0x0B21, 0x0B3C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xad, 0x9d }, .{ .canon = [2]u21{ 0x0B22, 0x0B3C } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xae, 0x94 }, .{ .canon = [2]u21{ 0x0B92, 0x0BD7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xaf, 0x8a }, .{ .canon = [2]u21{ 0x0BC6, 0x0BBE } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xaf, 0x8b }, .{ .canon = [2]u21{ 0x0BC7, 0x0BBE } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xaf, 0x8c }, .{ .canon = [2]u21{ 0x0BC6, 0x0BD7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xb1, 0x88 }, .{ .canon = [2]u21{ 0x0C46, 0x0C56 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xb3, 0x80 }, .{ .canon = [2]u21{ 0x0CBF, 0x0CD5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xb3, 0x87 }, .{ .canon = [2]u21{ 0x0CC6, 0x0CD5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xb3, 0x88 }, .{ .canon = [2]u21{ 0x0CC6, 0x0CD6 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xb3, 0x8a }, .{ .canon = [2]u21{ 0x0CC6, 0x0CC2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xb3, 0x8b }, .{ .canon = [2]u21{ 0x0CCA, 0x0CD5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xb5, 0x8a }, .{ .canon = [2]u21{ 0x0D46, 0x0D3E } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xb5, 0x8b }, .{ .canon = [2]u21{ 0x0D47, 0x0D3E } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xb5, 0x8c }, .{ .canon = [2]u21{ 0x0D46, 0x0D57 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xb7, 0x9a }, .{ .canon = [2]u21{ 0x0DD9, 0x0DCA } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xb7, 0x9c }, .{ .canon = [2]u21{ 0x0DD9, 0x0DCF } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xb7, 0x9d }, .{ .canon = [2]u21{ 0x0DDC, 0x0DCA } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xb7, 0x9e }, .{ .canon = [2]u21{ 0x0DD9, 0x0DDF } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xb8, 0xb3 }, .{ .compat = &[_]u21{ 0x0E4D, 0x0E32 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xba, 0xb3 }, .{ .compat = &[_]u21{ 0x0ECD, 0x0EB2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbb, 0x9c }, .{ .compat = &[_]u21{ 0x0EAB, 0x0E99 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbb, 0x9d }, .{ .compat = &[_]u21{ 0x0EAB, 0x0EA1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbc, 0x8c }, .{ .compat = &[_]u21{ 0x0F0B } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbd, 0x83 }, .{ .canon = [2]u21{ 0x0F42, 0x0FB7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbd, 0x8d }, .{ .canon = [2]u21{ 0x0F4C, 0x0FB7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbd, 0x92 }, .{ .canon = [2]u21{ 0x0F51, 0x0FB7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbd, 0x97 }, .{ .canon = [2]u21{ 0x0F56, 0x0FB7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbd, 0x9c }, .{ .canon = [2]u21{ 0x0F5B, 0x0FB7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbd, 0xa9 }, .{ .canon = [2]u21{ 0x0F40, 0x0FB5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbd, 0xb3 }, .{ .canon = [2]u21{ 0x0F71, 0x0F72 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbd, 0xb5 }, .{ .canon = [2]u21{ 0x0F71, 0x0F74 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbd, 0xb6 }, .{ .canon = [2]u21{ 0x0FB2, 0x0F80 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbd, 0xb7 }, .{ .compat = &[_]u21{ 0x0FB2, 0x0F81 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbd, 0xb8 }, .{ .canon = [2]u21{ 0x0FB3, 0x0F80 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbd, 0xb9 }, .{ .compat = &[_]u21{ 0x0FB3, 0x0F81 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbe, 0x81 }, .{ .canon = [2]u21{ 0x0F71, 0x0F80 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbe, 0x93 }, .{ .canon = [2]u21{ 0x0F92, 0x0FB7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbe, 0x9d }, .{ .canon = [2]u21{ 0x0F9C, 0x0FB7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbe, 0xa2 }, .{ .canon = [2]u21{ 0x0FA1, 0x0FB7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbe, 0xa7 }, .{ .canon = [2]u21{ 0x0FA6, 0x0FB7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbe, 0xac }, .{ .canon = [2]u21{ 0x0FAB, 0x0FB7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe0, 0xbe, 0xb9 }, .{ .canon = [2]u21{ 0x0F90, 0x0FB5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0x80, 0xa6 }, .{ .canon = [2]u21{ 0x1025, 0x102E } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0x83, 0xbc }, .{ .compat = &[_]u21{ 0x10DC } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xac, 0x86 }, .{ .canon = [2]u21{ 0x1B05, 0x1B35 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xac, 0x88 }, .{ .canon = [2]u21{ 0x1B07, 0x1B35 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xac, 0x8a }, .{ .canon = [2]u21{ 0x1B09, 0x1B35 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xac, 0x8c }, .{ .canon = [2]u21{ 0x1B0B, 0x1B35 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xac, 0x8e }, .{ .canon = [2]u21{ 0x1B0D, 0x1B35 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xac, 0x92 }, .{ .canon = [2]u21{ 0x1B11, 0x1B35 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xac, 0xbb }, .{ .canon = [2]u21{ 0x1B3A, 0x1B35 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xac, 0xbd }, .{ .canon = [2]u21{ 0x1B3C, 0x1B35 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xad, 0x80 }, .{ .canon = [2]u21{ 0x1B3E, 0x1B35 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xad, 0x81 }, .{ .canon = [2]u21{ 0x1B3F, 0x1B35 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xad, 0x83 }, .{ .canon = [2]u21{ 0x1B42, 0x1B35 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xac }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xad }, .{ .compat = &[_]u21{ 0x00C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xae }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xb0 }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xb1 }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xb2 }, .{ .compat = &[_]u21{ 0x018E } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xb3 }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xb4 }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xb5 }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xb6 }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xb7 }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xb8 }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xb9 }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xba }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xbc }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xbd }, .{ .compat = &[_]u21{ 0x0222 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xbe }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb4, 0xbf }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x80 }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x81 }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x82 }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x83 }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x84 }, .{ .compat = &[_]u21{ 0x0250 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x85 }, .{ .compat = &[_]u21{ 0x0251 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x86 }, .{ .compat = &[_]u21{ 0x1D02 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x87 }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x88 }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x89 }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x8a }, .{ .compat = &[_]u21{ 0x0259 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x8b }, .{ .compat = &[_]u21{ 0x025B } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x8c }, .{ .compat = &[_]u21{ 0x025C } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x8d }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x8f }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x90 }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x91 }, .{ .compat = &[_]u21{ 0x014B } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x92 }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x93 }, .{ .compat = &[_]u21{ 0x0254 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x94 }, .{ .compat = &[_]u21{ 0x1D16 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x95 }, .{ .compat = &[_]u21{ 0x1D17 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x96 }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x97 }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x98 }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x99 }, .{ .compat = &[_]u21{ 0x1D1D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x9a }, .{ .compat = &[_]u21{ 0x026F } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x9b }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x9c }, .{ .compat = &[_]u21{ 0x1D25 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x9d }, .{ .compat = &[_]u21{ 0x03B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x9e }, .{ .compat = &[_]u21{ 0x03B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0x9f }, .{ .compat = &[_]u21{ 0x03B4 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0xa0 }, .{ .compat = &[_]u21{ 0x03C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0xa1 }, .{ .compat = &[_]u21{ 0x03C7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0xa2 }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0xa3 }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0xa4 }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0xa5 }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0xa6 }, .{ .compat = &[_]u21{ 0x03B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0xa7 }, .{ .compat = &[_]u21{ 0x03B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0xa8 }, .{ .compat = &[_]u21{ 0x03C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0xa9 }, .{ .compat = &[_]u21{ 0x03C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0xaa }, .{ .compat = &[_]u21{ 0x03C7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb5, 0xb8 }, .{ .compat = &[_]u21{ 0x043D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0x9b }, .{ .compat = &[_]u21{ 0x0252 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0x9c }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0x9d }, .{ .compat = &[_]u21{ 0x0255 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0x9e }, .{ .compat = &[_]u21{ 0x00F0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0x9f }, .{ .compat = &[_]u21{ 0x025C } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xa0 }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xa1 }, .{ .compat = &[_]u21{ 0x025F } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xa2 }, .{ .compat = &[_]u21{ 0x0261 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xa3 }, .{ .compat = &[_]u21{ 0x0265 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xa4 }, .{ .compat = &[_]u21{ 0x0268 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xa5 }, .{ .compat = &[_]u21{ 0x0269 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xa6 }, .{ .compat = &[_]u21{ 0x026A } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xa7 }, .{ .compat = &[_]u21{ 0x1D7B } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xa8 }, .{ .compat = &[_]u21{ 0x029D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xa9 }, .{ .compat = &[_]u21{ 0x026D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xaa }, .{ .compat = &[_]u21{ 0x1D85 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xab }, .{ .compat = &[_]u21{ 0x029F } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xac }, .{ .compat = &[_]u21{ 0x0271 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xad }, .{ .compat = &[_]u21{ 0x0270 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xae }, .{ .compat = &[_]u21{ 0x0272 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xaf }, .{ .compat = &[_]u21{ 0x0273 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xb0 }, .{ .compat = &[_]u21{ 0x0274 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xb1 }, .{ .compat = &[_]u21{ 0x0275 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xb2 }, .{ .compat = &[_]u21{ 0x0278 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xb3 }, .{ .compat = &[_]u21{ 0x0282 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xb4 }, .{ .compat = &[_]u21{ 0x0283 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xb5 }, .{ .compat = &[_]u21{ 0x01AB } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xb6 }, .{ .compat = &[_]u21{ 0x0289 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xb7 }, .{ .compat = &[_]u21{ 0x028A } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xb8 }, .{ .compat = &[_]u21{ 0x1D1C } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xb9 }, .{ .compat = &[_]u21{ 0x028B } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xba }, .{ .compat = &[_]u21{ 0x028C } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xbb }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xbc }, .{ .compat = &[_]u21{ 0x0290 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xbd }, .{ .compat = &[_]u21{ 0x0291 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xbe }, .{ .compat = &[_]u21{ 0x0292 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb6, 0xbf }, .{ .compat = &[_]u21{ 0x03B8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x80 }, .{ .canon = [2]u21{ 0x0041, 0x0325 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x81 }, .{ .canon = [2]u21{ 0x0061, 0x0325 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x82 }, .{ .canon = [2]u21{ 0x0042, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x83 }, .{ .canon = [2]u21{ 0x0062, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x84 }, .{ .canon = [2]u21{ 0x0042, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x85 }, .{ .canon = [2]u21{ 0x0062, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x86 }, .{ .canon = [2]u21{ 0x0042, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x87 }, .{ .canon = [2]u21{ 0x0062, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x88 }, .{ .canon = [2]u21{ 0x00C7, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x89 }, .{ .canon = [2]u21{ 0x00E7, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x8a }, .{ .canon = [2]u21{ 0x0044, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x8b }, .{ .canon = [2]u21{ 0x0064, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x8c }, .{ .canon = [2]u21{ 0x0044, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x8d }, .{ .canon = [2]u21{ 0x0064, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x8e }, .{ .canon = [2]u21{ 0x0044, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x8f }, .{ .canon = [2]u21{ 0x0064, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x90 }, .{ .canon = [2]u21{ 0x0044, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x91 }, .{ .canon = [2]u21{ 0x0064, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x92 }, .{ .canon = [2]u21{ 0x0044, 0x032D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x93 }, .{ .canon = [2]u21{ 0x0064, 0x032D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x94 }, .{ .canon = [2]u21{ 0x0112, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x95 }, .{ .canon = [2]u21{ 0x0113, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x96 }, .{ .canon = [2]u21{ 0x0112, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x97 }, .{ .canon = [2]u21{ 0x0113, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x98 }, .{ .canon = [2]u21{ 0x0045, 0x032D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x99 }, .{ .canon = [2]u21{ 0x0065, 0x032D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x9a }, .{ .canon = [2]u21{ 0x0045, 0x0330 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x9b }, .{ .canon = [2]u21{ 0x0065, 0x0330 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x9c }, .{ .canon = [2]u21{ 0x0228, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x9d }, .{ .canon = [2]u21{ 0x0229, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x9e }, .{ .canon = [2]u21{ 0x0046, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0x9f }, .{ .canon = [2]u21{ 0x0066, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xa0 }, .{ .canon = [2]u21{ 0x0047, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xa1 }, .{ .canon = [2]u21{ 0x0067, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xa2 }, .{ .canon = [2]u21{ 0x0048, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xa3 }, .{ .canon = [2]u21{ 0x0068, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xa4 }, .{ .canon = [2]u21{ 0x0048, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xa5 }, .{ .canon = [2]u21{ 0x0068, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xa6 }, .{ .canon = [2]u21{ 0x0048, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xa7 }, .{ .canon = [2]u21{ 0x0068, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xa8 }, .{ .canon = [2]u21{ 0x0048, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xa9 }, .{ .canon = [2]u21{ 0x0068, 0x0327 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xaa }, .{ .canon = [2]u21{ 0x0048, 0x032E } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xab }, .{ .canon = [2]u21{ 0x0068, 0x032E } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xac }, .{ .canon = [2]u21{ 0x0049, 0x0330 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xad }, .{ .canon = [2]u21{ 0x0069, 0x0330 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xae }, .{ .canon = [2]u21{ 0x00CF, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xaf }, .{ .canon = [2]u21{ 0x00EF, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xb0 }, .{ .canon = [2]u21{ 0x004B, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xb1 }, .{ .canon = [2]u21{ 0x006B, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xb2 }, .{ .canon = [2]u21{ 0x004B, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xb3 }, .{ .canon = [2]u21{ 0x006B, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xb4 }, .{ .canon = [2]u21{ 0x004B, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xb5 }, .{ .canon = [2]u21{ 0x006B, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xb6 }, .{ .canon = [2]u21{ 0x004C, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xb7 }, .{ .canon = [2]u21{ 0x006C, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xb8 }, .{ .canon = [2]u21{ 0x1E36, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xb9 }, .{ .canon = [2]u21{ 0x1E37, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xba }, .{ .canon = [2]u21{ 0x004C, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xbb }, .{ .canon = [2]u21{ 0x006C, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xbc }, .{ .canon = [2]u21{ 0x004C, 0x032D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xbd }, .{ .canon = [2]u21{ 0x006C, 0x032D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xbe }, .{ .canon = [2]u21{ 0x004D, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb8, 0xbf }, .{ .canon = [2]u21{ 0x006D, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x80 }, .{ .canon = [2]u21{ 0x004D, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x81 }, .{ .canon = [2]u21{ 0x006D, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x82 }, .{ .canon = [2]u21{ 0x004D, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x83 }, .{ .canon = [2]u21{ 0x006D, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x84 }, .{ .canon = [2]u21{ 0x004E, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x85 }, .{ .canon = [2]u21{ 0x006E, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x86 }, .{ .canon = [2]u21{ 0x004E, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x87 }, .{ .canon = [2]u21{ 0x006E, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x88 }, .{ .canon = [2]u21{ 0x004E, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x89 }, .{ .canon = [2]u21{ 0x006E, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x8a }, .{ .canon = [2]u21{ 0x004E, 0x032D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x8b }, .{ .canon = [2]u21{ 0x006E, 0x032D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x8c }, .{ .canon = [2]u21{ 0x00D5, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x8d }, .{ .canon = [2]u21{ 0x00F5, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x8e }, .{ .canon = [2]u21{ 0x00D5, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x8f }, .{ .canon = [2]u21{ 0x00F5, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x90 }, .{ .canon = [2]u21{ 0x014C, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x91 }, .{ .canon = [2]u21{ 0x014D, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x92 }, .{ .canon = [2]u21{ 0x014C, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x93 }, .{ .canon = [2]u21{ 0x014D, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x94 }, .{ .canon = [2]u21{ 0x0050, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x95 }, .{ .canon = [2]u21{ 0x0070, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x96 }, .{ .canon = [2]u21{ 0x0050, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x97 }, .{ .canon = [2]u21{ 0x0070, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x98 }, .{ .canon = [2]u21{ 0x0052, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x99 }, .{ .canon = [2]u21{ 0x0072, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x9a }, .{ .canon = [2]u21{ 0x0052, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x9b }, .{ .canon = [2]u21{ 0x0072, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x9c }, .{ .canon = [2]u21{ 0x1E5A, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x9d }, .{ .canon = [2]u21{ 0x1E5B, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x9e }, .{ .canon = [2]u21{ 0x0052, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0x9f }, .{ .canon = [2]u21{ 0x0072, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xa0 }, .{ .canon = [2]u21{ 0x0053, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xa1 }, .{ .canon = [2]u21{ 0x0073, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xa2 }, .{ .canon = [2]u21{ 0x0053, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xa3 }, .{ .canon = [2]u21{ 0x0073, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xa4 }, .{ .canon = [2]u21{ 0x015A, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xa5 }, .{ .canon = [2]u21{ 0x015B, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xa6 }, .{ .canon = [2]u21{ 0x0160, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xa7 }, .{ .canon = [2]u21{ 0x0161, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xa8 }, .{ .canon = [2]u21{ 0x1E62, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xa9 }, .{ .canon = [2]u21{ 0x1E63, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xaa }, .{ .canon = [2]u21{ 0x0054, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xab }, .{ .canon = [2]u21{ 0x0074, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xac }, .{ .canon = [2]u21{ 0x0054, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xad }, .{ .canon = [2]u21{ 0x0074, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xae }, .{ .canon = [2]u21{ 0x0054, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xaf }, .{ .canon = [2]u21{ 0x0074, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xb0 }, .{ .canon = [2]u21{ 0x0054, 0x032D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xb1 }, .{ .canon = [2]u21{ 0x0074, 0x032D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xb2 }, .{ .canon = [2]u21{ 0x0055, 0x0324 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xb3 }, .{ .canon = [2]u21{ 0x0075, 0x0324 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xb4 }, .{ .canon = [2]u21{ 0x0055, 0x0330 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xb5 }, .{ .canon = [2]u21{ 0x0075, 0x0330 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xb6 }, .{ .canon = [2]u21{ 0x0055, 0x032D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xb7 }, .{ .canon = [2]u21{ 0x0075, 0x032D } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xb8 }, .{ .canon = [2]u21{ 0x0168, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xb9 }, .{ .canon = [2]u21{ 0x0169, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xba }, .{ .canon = [2]u21{ 0x016A, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xbb }, .{ .canon = [2]u21{ 0x016B, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xbc }, .{ .canon = [2]u21{ 0x0056, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xbd }, .{ .canon = [2]u21{ 0x0076, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xbe }, .{ .canon = [2]u21{ 0x0056, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xb9, 0xbf }, .{ .canon = [2]u21{ 0x0076, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x80 }, .{ .canon = [2]u21{ 0x0057, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x81 }, .{ .canon = [2]u21{ 0x0077, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x82 }, .{ .canon = [2]u21{ 0x0057, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x83 }, .{ .canon = [2]u21{ 0x0077, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x84 }, .{ .canon = [2]u21{ 0x0057, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x85 }, .{ .canon = [2]u21{ 0x0077, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x86 }, .{ .canon = [2]u21{ 0x0057, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x87 }, .{ .canon = [2]u21{ 0x0077, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x88 }, .{ .canon = [2]u21{ 0x0057, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x89 }, .{ .canon = [2]u21{ 0x0077, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x8a }, .{ .canon = [2]u21{ 0x0058, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x8b }, .{ .canon = [2]u21{ 0x0078, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x8c }, .{ .canon = [2]u21{ 0x0058, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x8d }, .{ .canon = [2]u21{ 0x0078, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x8e }, .{ .canon = [2]u21{ 0x0059, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x8f }, .{ .canon = [2]u21{ 0x0079, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x90 }, .{ .canon = [2]u21{ 0x005A, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x91 }, .{ .canon = [2]u21{ 0x007A, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x92 }, .{ .canon = [2]u21{ 0x005A, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x93 }, .{ .canon = [2]u21{ 0x007A, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x94 }, .{ .canon = [2]u21{ 0x005A, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x95 }, .{ .canon = [2]u21{ 0x007A, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x96 }, .{ .canon = [2]u21{ 0x0068, 0x0331 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x97 }, .{ .canon = [2]u21{ 0x0074, 0x0308 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x98 }, .{ .canon = [2]u21{ 0x0077, 0x030A } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x99 }, .{ .canon = [2]u21{ 0x0079, 0x030A } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x9a }, .{ .compat = &[_]u21{ 0x0061, 0x02BE } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0x9b }, .{ .canon = [2]u21{ 0x017F, 0x0307 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xa0 }, .{ .canon = [2]u21{ 0x0041, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xa1 }, .{ .canon = [2]u21{ 0x0061, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xa2 }, .{ .canon = [2]u21{ 0x0041, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xa3 }, .{ .canon = [2]u21{ 0x0061, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xa4 }, .{ .canon = [2]u21{ 0x00C2, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xa5 }, .{ .canon = [2]u21{ 0x00E2, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xa6 }, .{ .canon = [2]u21{ 0x00C2, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xa7 }, .{ .canon = [2]u21{ 0x00E2, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xa8 }, .{ .canon = [2]u21{ 0x00C2, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xa9 }, .{ .canon = [2]u21{ 0x00E2, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xaa }, .{ .canon = [2]u21{ 0x00C2, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xab }, .{ .canon = [2]u21{ 0x00E2, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xac }, .{ .canon = [2]u21{ 0x1EA0, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xad }, .{ .canon = [2]u21{ 0x1EA1, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xae }, .{ .canon = [2]u21{ 0x0102, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xaf }, .{ .canon = [2]u21{ 0x0103, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xb0 }, .{ .canon = [2]u21{ 0x0102, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xb1 }, .{ .canon = [2]u21{ 0x0103, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xb2 }, .{ .canon = [2]u21{ 0x0102, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xb3 }, .{ .canon = [2]u21{ 0x0103, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xb4 }, .{ .canon = [2]u21{ 0x0102, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xb5 }, .{ .canon = [2]u21{ 0x0103, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xb6 }, .{ .canon = [2]u21{ 0x1EA0, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xb7 }, .{ .canon = [2]u21{ 0x1EA1, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xb8 }, .{ .canon = [2]u21{ 0x0045, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xb9 }, .{ .canon = [2]u21{ 0x0065, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xba }, .{ .canon = [2]u21{ 0x0045, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xbb }, .{ .canon = [2]u21{ 0x0065, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xbc }, .{ .canon = [2]u21{ 0x0045, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xbd }, .{ .canon = [2]u21{ 0x0065, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xbe }, .{ .canon = [2]u21{ 0x00CA, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xba, 0xbf }, .{ .canon = [2]u21{ 0x00EA, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x80 }, .{ .canon = [2]u21{ 0x00CA, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x81 }, .{ .canon = [2]u21{ 0x00EA, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x82 }, .{ .canon = [2]u21{ 0x00CA, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x83 }, .{ .canon = [2]u21{ 0x00EA, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x84 }, .{ .canon = [2]u21{ 0x00CA, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x85 }, .{ .canon = [2]u21{ 0x00EA, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x86 }, .{ .canon = [2]u21{ 0x1EB8, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x87 }, .{ .canon = [2]u21{ 0x1EB9, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x88 }, .{ .canon = [2]u21{ 0x0049, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x89 }, .{ .canon = [2]u21{ 0x0069, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x8a }, .{ .canon = [2]u21{ 0x0049, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x8b }, .{ .canon = [2]u21{ 0x0069, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x8c }, .{ .canon = [2]u21{ 0x004F, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x8d }, .{ .canon = [2]u21{ 0x006F, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x8e }, .{ .canon = [2]u21{ 0x004F, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x8f }, .{ .canon = [2]u21{ 0x006F, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x90 }, .{ .canon = [2]u21{ 0x00D4, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x91 }, .{ .canon = [2]u21{ 0x00F4, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x92 }, .{ .canon = [2]u21{ 0x00D4, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x93 }, .{ .canon = [2]u21{ 0x00F4, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x94 }, .{ .canon = [2]u21{ 0x00D4, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x95 }, .{ .canon = [2]u21{ 0x00F4, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x96 }, .{ .canon = [2]u21{ 0x00D4, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x97 }, .{ .canon = [2]u21{ 0x00F4, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x98 }, .{ .canon = [2]u21{ 0x1ECC, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x99 }, .{ .canon = [2]u21{ 0x1ECD, 0x0302 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x9a }, .{ .canon = [2]u21{ 0x01A0, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x9b }, .{ .canon = [2]u21{ 0x01A1, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x9c }, .{ .canon = [2]u21{ 0x01A0, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x9d }, .{ .canon = [2]u21{ 0x01A1, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x9e }, .{ .canon = [2]u21{ 0x01A0, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0x9f }, .{ .canon = [2]u21{ 0x01A1, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xa0 }, .{ .canon = [2]u21{ 0x01A0, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xa1 }, .{ .canon = [2]u21{ 0x01A1, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xa2 }, .{ .canon = [2]u21{ 0x01A0, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xa3 }, .{ .canon = [2]u21{ 0x01A1, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xa4 }, .{ .canon = [2]u21{ 0x0055, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xa5 }, .{ .canon = [2]u21{ 0x0075, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xa6 }, .{ .canon = [2]u21{ 0x0055, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xa7 }, .{ .canon = [2]u21{ 0x0075, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xa8 }, .{ .canon = [2]u21{ 0x01AF, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xa9 }, .{ .canon = [2]u21{ 0x01B0, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xaa }, .{ .canon = [2]u21{ 0x01AF, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xab }, .{ .canon = [2]u21{ 0x01B0, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xac }, .{ .canon = [2]u21{ 0x01AF, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xad }, .{ .canon = [2]u21{ 0x01B0, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xae }, .{ .canon = [2]u21{ 0x01AF, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xaf }, .{ .canon = [2]u21{ 0x01B0, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xb0 }, .{ .canon = [2]u21{ 0x01AF, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xb1 }, .{ .canon = [2]u21{ 0x01B0, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xb2 }, .{ .canon = [2]u21{ 0x0059, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xb3 }, .{ .canon = [2]u21{ 0x0079, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xb4 }, .{ .canon = [2]u21{ 0x0059, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xb5 }, .{ .canon = [2]u21{ 0x0079, 0x0323 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xb6 }, .{ .canon = [2]u21{ 0x0059, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xb7 }, .{ .canon = [2]u21{ 0x0079, 0x0309 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xb8 }, .{ .canon = [2]u21{ 0x0059, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbb, 0xb9 }, .{ .canon = [2]u21{ 0x0079, 0x0303 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x80 }, .{ .canon = [2]u21{ 0x03B1, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x81 }, .{ .canon = [2]u21{ 0x03B1, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x82 }, .{ .canon = [2]u21{ 0x1F00, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x83 }, .{ .canon = [2]u21{ 0x1F01, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x84 }, .{ .canon = [2]u21{ 0x1F00, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x85 }, .{ .canon = [2]u21{ 0x1F01, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x86 }, .{ .canon = [2]u21{ 0x1F00, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x87 }, .{ .canon = [2]u21{ 0x1F01, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x88 }, .{ .canon = [2]u21{ 0x0391, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x89 }, .{ .canon = [2]u21{ 0x0391, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x8a }, .{ .canon = [2]u21{ 0x1F08, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x8b }, .{ .canon = [2]u21{ 0x1F09, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x8c }, .{ .canon = [2]u21{ 0x1F08, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x8d }, .{ .canon = [2]u21{ 0x1F09, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x8e }, .{ .canon = [2]u21{ 0x1F08, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x8f }, .{ .canon = [2]u21{ 0x1F09, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x90 }, .{ .canon = [2]u21{ 0x03B5, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x91 }, .{ .canon = [2]u21{ 0x03B5, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x92 }, .{ .canon = [2]u21{ 0x1F10, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x93 }, .{ .canon = [2]u21{ 0x1F11, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x94 }, .{ .canon = [2]u21{ 0x1F10, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x95 }, .{ .canon = [2]u21{ 0x1F11, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x98 }, .{ .canon = [2]u21{ 0x0395, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x99 }, .{ .canon = [2]u21{ 0x0395, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x9a }, .{ .canon = [2]u21{ 0x1F18, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x9b }, .{ .canon = [2]u21{ 0x1F19, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x9c }, .{ .canon = [2]u21{ 0x1F18, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0x9d }, .{ .canon = [2]u21{ 0x1F19, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xa0 }, .{ .canon = [2]u21{ 0x03B7, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xa1 }, .{ .canon = [2]u21{ 0x03B7, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xa2 }, .{ .canon = [2]u21{ 0x1F20, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xa3 }, .{ .canon = [2]u21{ 0x1F21, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xa4 }, .{ .canon = [2]u21{ 0x1F20, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xa5 }, .{ .canon = [2]u21{ 0x1F21, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xa6 }, .{ .canon = [2]u21{ 0x1F20, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xa7 }, .{ .canon = [2]u21{ 0x1F21, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xa8 }, .{ .canon = [2]u21{ 0x0397, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xa9 }, .{ .canon = [2]u21{ 0x0397, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xaa }, .{ .canon = [2]u21{ 0x1F28, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xab }, .{ .canon = [2]u21{ 0x1F29, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xac }, .{ .canon = [2]u21{ 0x1F28, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xad }, .{ .canon = [2]u21{ 0x1F29, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xae }, .{ .canon = [2]u21{ 0x1F28, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xaf }, .{ .canon = [2]u21{ 0x1F29, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xb0 }, .{ .canon = [2]u21{ 0x03B9, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xb1 }, .{ .canon = [2]u21{ 0x03B9, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xb2 }, .{ .canon = [2]u21{ 0x1F30, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xb3 }, .{ .canon = [2]u21{ 0x1F31, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xb4 }, .{ .canon = [2]u21{ 0x1F30, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xb5 }, .{ .canon = [2]u21{ 0x1F31, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xb6 }, .{ .canon = [2]u21{ 0x1F30, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xb7 }, .{ .canon = [2]u21{ 0x1F31, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xb8 }, .{ .canon = [2]u21{ 0x0399, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xb9 }, .{ .canon = [2]u21{ 0x0399, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xba }, .{ .canon = [2]u21{ 0x1F38, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xbb }, .{ .canon = [2]u21{ 0x1F39, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xbc }, .{ .canon = [2]u21{ 0x1F38, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xbd }, .{ .canon = [2]u21{ 0x1F39, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xbe }, .{ .canon = [2]u21{ 0x1F38, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbc, 0xbf }, .{ .canon = [2]u21{ 0x1F39, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x80 }, .{ .canon = [2]u21{ 0x03BF, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x81 }, .{ .canon = [2]u21{ 0x03BF, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x82 }, .{ .canon = [2]u21{ 0x1F40, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x83 }, .{ .canon = [2]u21{ 0x1F41, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x84 }, .{ .canon = [2]u21{ 0x1F40, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x85 }, .{ .canon = [2]u21{ 0x1F41, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x88 }, .{ .canon = [2]u21{ 0x039F, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x89 }, .{ .canon = [2]u21{ 0x039F, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x8a }, .{ .canon = [2]u21{ 0x1F48, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x8b }, .{ .canon = [2]u21{ 0x1F49, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x8c }, .{ .canon = [2]u21{ 0x1F48, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x8d }, .{ .canon = [2]u21{ 0x1F49, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x90 }, .{ .canon = [2]u21{ 0x03C5, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x91 }, .{ .canon = [2]u21{ 0x03C5, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x92 }, .{ .canon = [2]u21{ 0x1F50, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x93 }, .{ .canon = [2]u21{ 0x1F51, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x94 }, .{ .canon = [2]u21{ 0x1F50, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x95 }, .{ .canon = [2]u21{ 0x1F51, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x96 }, .{ .canon = [2]u21{ 0x1F50, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x97 }, .{ .canon = [2]u21{ 0x1F51, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x99 }, .{ .canon = [2]u21{ 0x03A5, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x9b }, .{ .canon = [2]u21{ 0x1F59, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x9d }, .{ .canon = [2]u21{ 0x1F59, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0x9f }, .{ .canon = [2]u21{ 0x1F59, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xa0 }, .{ .canon = [2]u21{ 0x03C9, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xa1 }, .{ .canon = [2]u21{ 0x03C9, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xa2 }, .{ .canon = [2]u21{ 0x1F60, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xa3 }, .{ .canon = [2]u21{ 0x1F61, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xa4 }, .{ .canon = [2]u21{ 0x1F60, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xa5 }, .{ .canon = [2]u21{ 0x1F61, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xa6 }, .{ .canon = [2]u21{ 0x1F60, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xa7 }, .{ .canon = [2]u21{ 0x1F61, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xa8 }, .{ .canon = [2]u21{ 0x03A9, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xa9 }, .{ .canon = [2]u21{ 0x03A9, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xaa }, .{ .canon = [2]u21{ 0x1F68, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xab }, .{ .canon = [2]u21{ 0x1F69, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xac }, .{ .canon = [2]u21{ 0x1F68, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xad }, .{ .canon = [2]u21{ 0x1F69, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xae }, .{ .canon = [2]u21{ 0x1F68, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xaf }, .{ .canon = [2]u21{ 0x1F69, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xb0 }, .{ .canon = [2]u21{ 0x03B1, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xb1 }, .{ .single = 0x03AC });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xb2 }, .{ .canon = [2]u21{ 0x03B5, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xb3 }, .{ .single = 0x03AD });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xb4 }, .{ .canon = [2]u21{ 0x03B7, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xb5 }, .{ .single = 0x03AE });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xb6 }, .{ .canon = [2]u21{ 0x03B9, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xb7 }, .{ .single = 0x03AF });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xb8 }, .{ .canon = [2]u21{ 0x03BF, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xb9 }, .{ .single = 0x03CC });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xba }, .{ .canon = [2]u21{ 0x03C5, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xbb }, .{ .single = 0x03CD });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xbc }, .{ .canon = [2]u21{ 0x03C9, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbd, 0xbd }, .{ .single = 0x03CE });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x80 }, .{ .canon = [2]u21{ 0x1F00, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x81 }, .{ .canon = [2]u21{ 0x1F01, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x82 }, .{ .canon = [2]u21{ 0x1F02, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x83 }, .{ .canon = [2]u21{ 0x1F03, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x84 }, .{ .canon = [2]u21{ 0x1F04, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x85 }, .{ .canon = [2]u21{ 0x1F05, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x86 }, .{ .canon = [2]u21{ 0x1F06, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x87 }, .{ .canon = [2]u21{ 0x1F07, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x88 }, .{ .canon = [2]u21{ 0x1F08, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x89 }, .{ .canon = [2]u21{ 0x1F09, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x8a }, .{ .canon = [2]u21{ 0x1F0A, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x8b }, .{ .canon = [2]u21{ 0x1F0B, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x8c }, .{ .canon = [2]u21{ 0x1F0C, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x8d }, .{ .canon = [2]u21{ 0x1F0D, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x8e }, .{ .canon = [2]u21{ 0x1F0E, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x8f }, .{ .canon = [2]u21{ 0x1F0F, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x90 }, .{ .canon = [2]u21{ 0x1F20, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x91 }, .{ .canon = [2]u21{ 0x1F21, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x92 }, .{ .canon = [2]u21{ 0x1F22, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x93 }, .{ .canon = [2]u21{ 0x1F23, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x94 }, .{ .canon = [2]u21{ 0x1F24, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x95 }, .{ .canon = [2]u21{ 0x1F25, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x96 }, .{ .canon = [2]u21{ 0x1F26, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x97 }, .{ .canon = [2]u21{ 0x1F27, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x98 }, .{ .canon = [2]u21{ 0x1F28, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x99 }, .{ .canon = [2]u21{ 0x1F29, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x9a }, .{ .canon = [2]u21{ 0x1F2A, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x9b }, .{ .canon = [2]u21{ 0x1F2B, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x9c }, .{ .canon = [2]u21{ 0x1F2C, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x9d }, .{ .canon = [2]u21{ 0x1F2D, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x9e }, .{ .canon = [2]u21{ 0x1F2E, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0x9f }, .{ .canon = [2]u21{ 0x1F2F, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xa0 }, .{ .canon = [2]u21{ 0x1F60, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xa1 }, .{ .canon = [2]u21{ 0x1F61, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xa2 }, .{ .canon = [2]u21{ 0x1F62, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xa3 }, .{ .canon = [2]u21{ 0x1F63, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xa4 }, .{ .canon = [2]u21{ 0x1F64, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xa5 }, .{ .canon = [2]u21{ 0x1F65, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xa6 }, .{ .canon = [2]u21{ 0x1F66, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xa7 }, .{ .canon = [2]u21{ 0x1F67, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xa8 }, .{ .canon = [2]u21{ 0x1F68, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xa9 }, .{ .canon = [2]u21{ 0x1F69, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xaa }, .{ .canon = [2]u21{ 0x1F6A, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xab }, .{ .canon = [2]u21{ 0x1F6B, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xac }, .{ .canon = [2]u21{ 0x1F6C, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xad }, .{ .canon = [2]u21{ 0x1F6D, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xae }, .{ .canon = [2]u21{ 0x1F6E, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xaf }, .{ .canon = [2]u21{ 0x1F6F, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xb0 }, .{ .canon = [2]u21{ 0x03B1, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xb1 }, .{ .canon = [2]u21{ 0x03B1, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xb2 }, .{ .canon = [2]u21{ 0x1F70, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xb3 }, .{ .canon = [2]u21{ 0x03B1, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xb4 }, .{ .canon = [2]u21{ 0x03AC, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xb6 }, .{ .canon = [2]u21{ 0x03B1, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xb7 }, .{ .canon = [2]u21{ 0x1FB6, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xb8 }, .{ .canon = [2]u21{ 0x0391, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xb9 }, .{ .canon = [2]u21{ 0x0391, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xba }, .{ .canon = [2]u21{ 0x0391, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xbb }, .{ .single = 0x0386 });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xbc }, .{ .canon = [2]u21{ 0x0391, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xbd }, .{ .compat = &[_]u21{ 0x0020, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xbe }, .{ .single = 0x03B9 });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbe, 0xbf }, .{ .compat = &[_]u21{ 0x0020, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x80 }, .{ .compat = &[_]u21{ 0x0020, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x81 }, .{ .canon = [2]u21{ 0x00A8, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x82 }, .{ .canon = [2]u21{ 0x1F74, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x83 }, .{ .canon = [2]u21{ 0x03B7, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x84 }, .{ .canon = [2]u21{ 0x03AE, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x86 }, .{ .canon = [2]u21{ 0x03B7, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x87 }, .{ .canon = [2]u21{ 0x1FC6, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x88 }, .{ .canon = [2]u21{ 0x0395, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x89 }, .{ .single = 0x0388 });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x8a }, .{ .canon = [2]u21{ 0x0397, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x8b }, .{ .single = 0x0389 });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x8c }, .{ .canon = [2]u21{ 0x0397, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x8d }, .{ .canon = [2]u21{ 0x1FBF, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x8e }, .{ .canon = [2]u21{ 0x1FBF, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x8f }, .{ .canon = [2]u21{ 0x1FBF, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x90 }, .{ .canon = [2]u21{ 0x03B9, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x91 }, .{ .canon = [2]u21{ 0x03B9, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x92 }, .{ .canon = [2]u21{ 0x03CA, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x93 }, .{ .single = 0x0390 });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x96 }, .{ .canon = [2]u21{ 0x03B9, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x97 }, .{ .canon = [2]u21{ 0x03CA, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x98 }, .{ .canon = [2]u21{ 0x0399, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x99 }, .{ .canon = [2]u21{ 0x0399, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x9a }, .{ .canon = [2]u21{ 0x0399, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x9b }, .{ .single = 0x038A });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x9d }, .{ .canon = [2]u21{ 0x1FFE, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x9e }, .{ .canon = [2]u21{ 0x1FFE, 0x0301 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0x9f }, .{ .canon = [2]u21{ 0x1FFE, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xa0 }, .{ .canon = [2]u21{ 0x03C5, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xa1 }, .{ .canon = [2]u21{ 0x03C5, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xa2 }, .{ .canon = [2]u21{ 0x03CB, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xa3 }, .{ .single = 0x03B0 });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xa4 }, .{ .canon = [2]u21{ 0x03C1, 0x0313 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xa5 }, .{ .canon = [2]u21{ 0x03C1, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xa6 }, .{ .canon = [2]u21{ 0x03C5, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xa7 }, .{ .canon = [2]u21{ 0x03CB, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xa8 }, .{ .canon = [2]u21{ 0x03A5, 0x0306 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xa9 }, .{ .canon = [2]u21{ 0x03A5, 0x0304 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xaa }, .{ .canon = [2]u21{ 0x03A5, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xab }, .{ .single = 0x038E });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xac }, .{ .canon = [2]u21{ 0x03A1, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xad }, .{ .canon = [2]u21{ 0x00A8, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xae }, .{ .single = 0x0385 });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xaf }, .{ .single = 0x0060 });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xb2 }, .{ .canon = [2]u21{ 0x1F7C, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xb3 }, .{ .canon = [2]u21{ 0x03C9, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xb4 }, .{ .canon = [2]u21{ 0x03CE, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xb6 }, .{ .canon = [2]u21{ 0x03C9, 0x0342 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xb7 }, .{ .canon = [2]u21{ 0x1FF6, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xb8 }, .{ .canon = [2]u21{ 0x039F, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xb9 }, .{ .single = 0x038C });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xba }, .{ .canon = [2]u21{ 0x03A9, 0x0300 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xbb }, .{ .single = 0x038F });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xbc }, .{ .canon = [2]u21{ 0x03A9, 0x0345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xbd }, .{ .single = 0x00B4 });
    try self.decomp_trie.add(&[_]u8{ 0xe1, 0xbf, 0xbe }, .{ .compat = &[_]u21{ 0x0020, 0x0314 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0x80 }, .{ .single = 0x2002 });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0x81 }, .{ .single = 0x2003 });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0x82 }, .{ .compat = &[_]u21{ 0x0020 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0x83 }, .{ .compat = &[_]u21{ 0x0020 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0x84 }, .{ .compat = &[_]u21{ 0x0020 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0x85 }, .{ .compat = &[_]u21{ 0x0020 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0x86 }, .{ .compat = &[_]u21{ 0x0020 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0x87 }, .{ .compat = &[_]u21{ 0x0020 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0x88 }, .{ .compat = &[_]u21{ 0x0020 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0x89 }, .{ .compat = &[_]u21{ 0x0020 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0x8a }, .{ .compat = &[_]u21{ 0x0020 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0x91 }, .{ .compat = &[_]u21{ 0x2010 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0x97 }, .{ .compat = &[_]u21{ 0x0020, 0x0333 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0xa4 }, .{ .compat = &[_]u21{ 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0xa5 }, .{ .compat = &[_]u21{ 0x002E, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0xa6 }, .{ .compat = &[_]u21{ 0x002E, 0x002E, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0xaf }, .{ .compat = &[_]u21{ 0x0020 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0xb3 }, .{ .compat = &[_]u21{ 0x2032, 0x2032 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0xb4 }, .{ .compat = &[_]u21{ 0x2032, 0x2032, 0x2032 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0xb6 }, .{ .compat = &[_]u21{ 0x2035, 0x2035 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0xb7 }, .{ .compat = &[_]u21{ 0x2035, 0x2035, 0x2035 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0xbc }, .{ .compat = &[_]u21{ 0x0021, 0x0021 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x80, 0xbe }, .{ .compat = &[_]u21{ 0x0020, 0x0305 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0x87 }, .{ .compat = &[_]u21{ 0x003F, 0x003F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0x88 }, .{ .compat = &[_]u21{ 0x003F, 0x0021 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0x89 }, .{ .compat = &[_]u21{ 0x0021, 0x003F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0x97 }, .{ .compat = &[_]u21{ 0x2032, 0x2032, 0x2032, 0x2032 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0x9f }, .{ .compat = &[_]u21{ 0x0020 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0xb0 }, .{ .compat = &[_]u21{ 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0xb1 }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0xb4 }, .{ .compat = &[_]u21{ 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0xb5 }, .{ .compat = &[_]u21{ 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0xb6 }, .{ .compat = &[_]u21{ 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0xb7 }, .{ .compat = &[_]u21{ 0x0037 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0xb8 }, .{ .compat = &[_]u21{ 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0xb9 }, .{ .compat = &[_]u21{ 0x0039 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0xba }, .{ .compat = &[_]u21{ 0x002B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0xbb }, .{ .compat = &[_]u21{ 0x2212 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0xbc }, .{ .compat = &[_]u21{ 0x003D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0xbd }, .{ .compat = &[_]u21{ 0x0028 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0xbe }, .{ .compat = &[_]u21{ 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x81, 0xbf }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x80 }, .{ .compat = &[_]u21{ 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x81 }, .{ .compat = &[_]u21{ 0x0031 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x82 }, .{ .compat = &[_]u21{ 0x0032 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x83 }, .{ .compat = &[_]u21{ 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x84 }, .{ .compat = &[_]u21{ 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x85 }, .{ .compat = &[_]u21{ 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x86 }, .{ .compat = &[_]u21{ 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x87 }, .{ .compat = &[_]u21{ 0x0037 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x88 }, .{ .compat = &[_]u21{ 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x89 }, .{ .compat = &[_]u21{ 0x0039 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x8a }, .{ .compat = &[_]u21{ 0x002B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x8b }, .{ .compat = &[_]u21{ 0x2212 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x8c }, .{ .compat = &[_]u21{ 0x003D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x8d }, .{ .compat = &[_]u21{ 0x0028 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x8e }, .{ .compat = &[_]u21{ 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x90 }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x91 }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x92 }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x93 }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x94 }, .{ .compat = &[_]u21{ 0x0259 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x95 }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x96 }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x97 }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x98 }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x99 }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x9a }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x9b }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0x9c }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x82, 0xa8 }, .{ .compat = &[_]u21{ 0x0052, 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x80 }, .{ .compat = &[_]u21{ 0x0061, 0x002F, 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x81 }, .{ .compat = &[_]u21{ 0x0061, 0x002F, 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x82 }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x83 }, .{ .compat = &[_]u21{ 0x00B0, 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x85 }, .{ .compat = &[_]u21{ 0x0063, 0x002F, 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x86 }, .{ .compat = &[_]u21{ 0x0063, 0x002F, 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x87 }, .{ .compat = &[_]u21{ 0x0190 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x89 }, .{ .compat = &[_]u21{ 0x00B0, 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x8a }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x8b }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x8c }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x8d }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x8e }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x8f }, .{ .compat = &[_]u21{ 0x0127 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x90 }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x91 }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x92 }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x93 }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x95 }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x96 }, .{ .compat = &[_]u21{ 0x004E, 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x99 }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x9a }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x9b }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x9c }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0x9d }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xa0 }, .{ .compat = &[_]u21{ 0x0053, 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xa1 }, .{ .compat = &[_]u21{ 0x0054, 0x0045, 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xa2 }, .{ .compat = &[_]u21{ 0x0054, 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xa4 }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xa6 }, .{ .single = 0x03A9 });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xa8 }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xaa }, .{ .single = 0x004B });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xab }, .{ .single = 0x00C5 });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xac }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xad }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xaf }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xb0 }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xb1 }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xb3 }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xb4 }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xb5 }, .{ .compat = &[_]u21{ 0x05D0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xb6 }, .{ .compat = &[_]u21{ 0x05D1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xb7 }, .{ .compat = &[_]u21{ 0x05D2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xb8 }, .{ .compat = &[_]u21{ 0x05D3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xb9 }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xbb }, .{ .compat = &[_]u21{ 0x0046, 0x0041, 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xbc }, .{ .compat = &[_]u21{ 0x03C0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xbd }, .{ .compat = &[_]u21{ 0x03B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xbe }, .{ .compat = &[_]u21{ 0x0393 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x84, 0xbf }, .{ .compat = &[_]u21{ 0x03A0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x80 }, .{ .compat = &[_]u21{ 0x2211 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x85 }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x86 }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x87 }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x88 }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x89 }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x90 }, .{ .compat = &[_]u21{ 0x0031, 0x2044, 0x0037 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x91 }, .{ .compat = &[_]u21{ 0x0031, 0x2044, 0x0039 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x92 }, .{ .compat = &[_]u21{ 0x0031, 0x2044, 0x0031, 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x93 }, .{ .compat = &[_]u21{ 0x0031, 0x2044, 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x94 }, .{ .compat = &[_]u21{ 0x0032, 0x2044, 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x95 }, .{ .compat = &[_]u21{ 0x0031, 0x2044, 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x96 }, .{ .compat = &[_]u21{ 0x0032, 0x2044, 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x97 }, .{ .compat = &[_]u21{ 0x0033, 0x2044, 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x98 }, .{ .compat = &[_]u21{ 0x0034, 0x2044, 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x99 }, .{ .compat = &[_]u21{ 0x0031, 0x2044, 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x9a }, .{ .compat = &[_]u21{ 0x0035, 0x2044, 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x9b }, .{ .compat = &[_]u21{ 0x0031, 0x2044, 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x9c }, .{ .compat = &[_]u21{ 0x0033, 0x2044, 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x9d }, .{ .compat = &[_]u21{ 0x0035, 0x2044, 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x9e }, .{ .compat = &[_]u21{ 0x0037, 0x2044, 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0x9f }, .{ .compat = &[_]u21{ 0x0031, 0x2044 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xa0 }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xa1 }, .{ .compat = &[_]u21{ 0x0049, 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xa2 }, .{ .compat = &[_]u21{ 0x0049, 0x0049, 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xa3 }, .{ .compat = &[_]u21{ 0x0049, 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xa4 }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xa5 }, .{ .compat = &[_]u21{ 0x0056, 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xa6 }, .{ .compat = &[_]u21{ 0x0056, 0x0049, 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xa7 }, .{ .compat = &[_]u21{ 0x0056, 0x0049, 0x0049, 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xa8 }, .{ .compat = &[_]u21{ 0x0049, 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xa9 }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xaa }, .{ .compat = &[_]u21{ 0x0058, 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xab }, .{ .compat = &[_]u21{ 0x0058, 0x0049, 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xac }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xad }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xae }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xaf }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xb0 }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xb1 }, .{ .compat = &[_]u21{ 0x0069, 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xb2 }, .{ .compat = &[_]u21{ 0x0069, 0x0069, 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xb3 }, .{ .compat = &[_]u21{ 0x0069, 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xb4 }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xb5 }, .{ .compat = &[_]u21{ 0x0076, 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xb6 }, .{ .compat = &[_]u21{ 0x0076, 0x0069, 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xb7 }, .{ .compat = &[_]u21{ 0x0076, 0x0069, 0x0069, 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xb8 }, .{ .compat = &[_]u21{ 0x0069, 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xb9 }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xba }, .{ .compat = &[_]u21{ 0x0078, 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xbb }, .{ .compat = &[_]u21{ 0x0078, 0x0069, 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xbc }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xbd }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xbe }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x85, 0xbf }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x86, 0x89 }, .{ .compat = &[_]u21{ 0x0030, 0x2044, 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x86, 0x9a }, .{ .canon = [2]u21{ 0x2190, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x86, 0x9b }, .{ .canon = [2]u21{ 0x2192, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x86, 0xae }, .{ .canon = [2]u21{ 0x2194, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x87, 0x8d }, .{ .canon = [2]u21{ 0x21D0, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x87, 0x8e }, .{ .canon = [2]u21{ 0x21D4, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x87, 0x8f }, .{ .canon = [2]u21{ 0x21D2, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x88, 0x84 }, .{ .canon = [2]u21{ 0x2203, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x88, 0x89 }, .{ .canon = [2]u21{ 0x2208, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x88, 0x8c }, .{ .canon = [2]u21{ 0x220B, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x88, 0xa4 }, .{ .canon = [2]u21{ 0x2223, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x88, 0xa6 }, .{ .canon = [2]u21{ 0x2225, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x88, 0xac }, .{ .compat = &[_]u21{ 0x222B, 0x222B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x88, 0xad }, .{ .compat = &[_]u21{ 0x222B, 0x222B, 0x222B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x88, 0xaf }, .{ .compat = &[_]u21{ 0x222E, 0x222E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x88, 0xb0 }, .{ .compat = &[_]u21{ 0x222E, 0x222E, 0x222E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x89, 0x81 }, .{ .canon = [2]u21{ 0x223C, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x89, 0x84 }, .{ .canon = [2]u21{ 0x2243, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x89, 0x87 }, .{ .canon = [2]u21{ 0x2245, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x89, 0x89 }, .{ .canon = [2]u21{ 0x2248, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x89, 0xa0 }, .{ .canon = [2]u21{ 0x003D, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x89, 0xa2 }, .{ .canon = [2]u21{ 0x2261, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x89, 0xad }, .{ .canon = [2]u21{ 0x224D, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x89, 0xae }, .{ .canon = [2]u21{ 0x003C, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x89, 0xaf }, .{ .canon = [2]u21{ 0x003E, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x89, 0xb0 }, .{ .canon = [2]u21{ 0x2264, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x89, 0xb1 }, .{ .canon = [2]u21{ 0x2265, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x89, 0xb4 }, .{ .canon = [2]u21{ 0x2272, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x89, 0xb5 }, .{ .canon = [2]u21{ 0x2273, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x89, 0xb8 }, .{ .canon = [2]u21{ 0x2276, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x89, 0xb9 }, .{ .canon = [2]u21{ 0x2277, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8a, 0x80 }, .{ .canon = [2]u21{ 0x227A, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8a, 0x81 }, .{ .canon = [2]u21{ 0x227B, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8a, 0x84 }, .{ .canon = [2]u21{ 0x2282, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8a, 0x85 }, .{ .canon = [2]u21{ 0x2283, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8a, 0x88 }, .{ .canon = [2]u21{ 0x2286, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8a, 0x89 }, .{ .canon = [2]u21{ 0x2287, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8a, 0xac }, .{ .canon = [2]u21{ 0x22A2, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8a, 0xad }, .{ .canon = [2]u21{ 0x22A8, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8a, 0xae }, .{ .canon = [2]u21{ 0x22A9, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8a, 0xaf }, .{ .canon = [2]u21{ 0x22AB, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8b, 0xa0 }, .{ .canon = [2]u21{ 0x227C, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8b, 0xa1 }, .{ .canon = [2]u21{ 0x227D, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8b, 0xa2 }, .{ .canon = [2]u21{ 0x2291, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8b, 0xa3 }, .{ .canon = [2]u21{ 0x2292, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8b, 0xaa }, .{ .canon = [2]u21{ 0x22B2, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8b, 0xab }, .{ .canon = [2]u21{ 0x22B3, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8b, 0xac }, .{ .canon = [2]u21{ 0x22B4, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8b, 0xad }, .{ .canon = [2]u21{ 0x22B5, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8c, 0xa9 }, .{ .single = 0x3008 });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x8c, 0xaa }, .{ .single = 0x3009 });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xa0 }, .{ .compat = &[_]u21{ 0x0031 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xa1 }, .{ .compat = &[_]u21{ 0x0032 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xa2 }, .{ .compat = &[_]u21{ 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xa3 }, .{ .compat = &[_]u21{ 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xa4 }, .{ .compat = &[_]u21{ 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xa5 }, .{ .compat = &[_]u21{ 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xa6 }, .{ .compat = &[_]u21{ 0x0037 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xa7 }, .{ .compat = &[_]u21{ 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xa8 }, .{ .compat = &[_]u21{ 0x0039 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xa9 }, .{ .compat = &[_]u21{ 0x0031, 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xaa }, .{ .compat = &[_]u21{ 0x0031, 0x0031 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xab }, .{ .compat = &[_]u21{ 0x0031, 0x0032 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xac }, .{ .compat = &[_]u21{ 0x0031, 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xad }, .{ .compat = &[_]u21{ 0x0031, 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xae }, .{ .compat = &[_]u21{ 0x0031, 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xaf }, .{ .compat = &[_]u21{ 0x0031, 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xb0 }, .{ .compat = &[_]u21{ 0x0031, 0x0037 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xb1 }, .{ .compat = &[_]u21{ 0x0031, 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xb2 }, .{ .compat = &[_]u21{ 0x0031, 0x0039 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xb3 }, .{ .compat = &[_]u21{ 0x0032, 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xb4 }, .{ .compat = &[_]u21{ 0x0028, 0x0031, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xb5 }, .{ .compat = &[_]u21{ 0x0028, 0x0032, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xb6 }, .{ .compat = &[_]u21{ 0x0028, 0x0033, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xb7 }, .{ .compat = &[_]u21{ 0x0028, 0x0034, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xb8 }, .{ .compat = &[_]u21{ 0x0028, 0x0035, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xb9 }, .{ .compat = &[_]u21{ 0x0028, 0x0036, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xba }, .{ .compat = &[_]u21{ 0x0028, 0x0037, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xbb }, .{ .compat = &[_]u21{ 0x0028, 0x0038, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xbc }, .{ .compat = &[_]u21{ 0x0028, 0x0039, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xbd }, .{ .compat = &[_]u21{ 0x0028, 0x0031, 0x0030, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xbe }, .{ .compat = &[_]u21{ 0x0028, 0x0031, 0x0031, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x91, 0xbf }, .{ .compat = &[_]u21{ 0x0028, 0x0031, 0x0032, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x80 }, .{ .compat = &[_]u21{ 0x0028, 0x0031, 0x0033, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x81 }, .{ .compat = &[_]u21{ 0x0028, 0x0031, 0x0034, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x82 }, .{ .compat = &[_]u21{ 0x0028, 0x0031, 0x0035, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x83 }, .{ .compat = &[_]u21{ 0x0028, 0x0031, 0x0036, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x84 }, .{ .compat = &[_]u21{ 0x0028, 0x0031, 0x0037, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x85 }, .{ .compat = &[_]u21{ 0x0028, 0x0031, 0x0038, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x86 }, .{ .compat = &[_]u21{ 0x0028, 0x0031, 0x0039, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x87 }, .{ .compat = &[_]u21{ 0x0028, 0x0032, 0x0030, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x88 }, .{ .compat = &[_]u21{ 0x0031, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x89 }, .{ .compat = &[_]u21{ 0x0032, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x8a }, .{ .compat = &[_]u21{ 0x0033, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x8b }, .{ .compat = &[_]u21{ 0x0034, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x8c }, .{ .compat = &[_]u21{ 0x0035, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x8d }, .{ .compat = &[_]u21{ 0x0036, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x8e }, .{ .compat = &[_]u21{ 0x0037, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x8f }, .{ .compat = &[_]u21{ 0x0038, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x90 }, .{ .compat = &[_]u21{ 0x0039, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x91 }, .{ .compat = &[_]u21{ 0x0031, 0x0030, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x92 }, .{ .compat = &[_]u21{ 0x0031, 0x0031, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x93 }, .{ .compat = &[_]u21{ 0x0031, 0x0032, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x94 }, .{ .compat = &[_]u21{ 0x0031, 0x0033, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x95 }, .{ .compat = &[_]u21{ 0x0031, 0x0034, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x96 }, .{ .compat = &[_]u21{ 0x0031, 0x0035, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x97 }, .{ .compat = &[_]u21{ 0x0031, 0x0036, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x98 }, .{ .compat = &[_]u21{ 0x0031, 0x0037, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x99 }, .{ .compat = &[_]u21{ 0x0031, 0x0038, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x9a }, .{ .compat = &[_]u21{ 0x0031, 0x0039, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x9b }, .{ .compat = &[_]u21{ 0x0032, 0x0030, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x9c }, .{ .compat = &[_]u21{ 0x0028, 0x0061, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x9d }, .{ .compat = &[_]u21{ 0x0028, 0x0062, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x9e }, .{ .compat = &[_]u21{ 0x0028, 0x0063, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0x9f }, .{ .compat = &[_]u21{ 0x0028, 0x0064, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xa0 }, .{ .compat = &[_]u21{ 0x0028, 0x0065, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xa1 }, .{ .compat = &[_]u21{ 0x0028, 0x0066, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xa2 }, .{ .compat = &[_]u21{ 0x0028, 0x0067, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xa3 }, .{ .compat = &[_]u21{ 0x0028, 0x0068, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xa4 }, .{ .compat = &[_]u21{ 0x0028, 0x0069, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xa5 }, .{ .compat = &[_]u21{ 0x0028, 0x006A, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xa6 }, .{ .compat = &[_]u21{ 0x0028, 0x006B, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xa7 }, .{ .compat = &[_]u21{ 0x0028, 0x006C, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xa8 }, .{ .compat = &[_]u21{ 0x0028, 0x006D, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xa9 }, .{ .compat = &[_]u21{ 0x0028, 0x006E, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xaa }, .{ .compat = &[_]u21{ 0x0028, 0x006F, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xab }, .{ .compat = &[_]u21{ 0x0028, 0x0070, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xac }, .{ .compat = &[_]u21{ 0x0028, 0x0071, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xad }, .{ .compat = &[_]u21{ 0x0028, 0x0072, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xae }, .{ .compat = &[_]u21{ 0x0028, 0x0073, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xaf }, .{ .compat = &[_]u21{ 0x0028, 0x0074, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xb0 }, .{ .compat = &[_]u21{ 0x0028, 0x0075, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xb1 }, .{ .compat = &[_]u21{ 0x0028, 0x0076, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xb2 }, .{ .compat = &[_]u21{ 0x0028, 0x0077, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xb3 }, .{ .compat = &[_]u21{ 0x0028, 0x0078, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xb4 }, .{ .compat = &[_]u21{ 0x0028, 0x0079, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xb5 }, .{ .compat = &[_]u21{ 0x0028, 0x007A, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xb6 }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xb7 }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xb8 }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xb9 }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xba }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xbb }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xbc }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xbd }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xbe }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x92, 0xbf }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x80 }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x81 }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x82 }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x83 }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x84 }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x85 }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x86 }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x87 }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x88 }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x89 }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x8a }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x8b }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x8c }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x8d }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x8e }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x8f }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x90 }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x91 }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x92 }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x93 }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x94 }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x95 }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x96 }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x97 }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x98 }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x99 }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x9a }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x9b }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x9c }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x9d }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x9e }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0x9f }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0xa0 }, .{ .compat = &[_]u21{ 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0xa1 }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0xa2 }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0xa3 }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0xa4 }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0xa5 }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0xa6 }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0xa7 }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0xa8 }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0xa9 }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0x93, 0xaa }, .{ .compat = &[_]u21{ 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xa8, 0x8c }, .{ .compat = &[_]u21{ 0x222B, 0x222B, 0x222B, 0x222B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xa9, 0xb4 }, .{ .compat = &[_]u21{ 0x003A, 0x003A, 0x003D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xa9, 0xb5 }, .{ .compat = &[_]u21{ 0x003D, 0x003D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xa9, 0xb6 }, .{ .compat = &[_]u21{ 0x003D, 0x003D, 0x003D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xab, 0x9c }, .{ .canon = [2]u21{ 0x2ADD, 0x0338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xb1, 0xbc }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xb1, 0xbd }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xb5, 0xaf }, .{ .compat = &[_]u21{ 0x2D61 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xba, 0x9f }, .{ .compat = &[_]u21{ 0x6BCD } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbb, 0xb3 }, .{ .compat = &[_]u21{ 0x9F9F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x80 }, .{ .compat = &[_]u21{ 0x4E00 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x81 }, .{ .compat = &[_]u21{ 0x4E28 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x82 }, .{ .compat = &[_]u21{ 0x4E36 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x83 }, .{ .compat = &[_]u21{ 0x4E3F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x84 }, .{ .compat = &[_]u21{ 0x4E59 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x85 }, .{ .compat = &[_]u21{ 0x4E85 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x86 }, .{ .compat = &[_]u21{ 0x4E8C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x87 }, .{ .compat = &[_]u21{ 0x4EA0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x88 }, .{ .compat = &[_]u21{ 0x4EBA } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x89 }, .{ .compat = &[_]u21{ 0x513F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x8a }, .{ .compat = &[_]u21{ 0x5165 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x8b }, .{ .compat = &[_]u21{ 0x516B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x8c }, .{ .compat = &[_]u21{ 0x5182 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x8d }, .{ .compat = &[_]u21{ 0x5196 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x8e }, .{ .compat = &[_]u21{ 0x51AB } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x8f }, .{ .compat = &[_]u21{ 0x51E0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x90 }, .{ .compat = &[_]u21{ 0x51F5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x91 }, .{ .compat = &[_]u21{ 0x5200 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x92 }, .{ .compat = &[_]u21{ 0x529B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x93 }, .{ .compat = &[_]u21{ 0x52F9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x94 }, .{ .compat = &[_]u21{ 0x5315 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x95 }, .{ .compat = &[_]u21{ 0x531A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x96 }, .{ .compat = &[_]u21{ 0x5338 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x97 }, .{ .compat = &[_]u21{ 0x5341 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x98 }, .{ .compat = &[_]u21{ 0x535C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x99 }, .{ .compat = &[_]u21{ 0x5369 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x9a }, .{ .compat = &[_]u21{ 0x5382 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x9b }, .{ .compat = &[_]u21{ 0x53B6 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x9c }, .{ .compat = &[_]u21{ 0x53C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x9d }, .{ .compat = &[_]u21{ 0x53E3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x9e }, .{ .compat = &[_]u21{ 0x56D7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0x9f }, .{ .compat = &[_]u21{ 0x571F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xa0 }, .{ .compat = &[_]u21{ 0x58EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xa1 }, .{ .compat = &[_]u21{ 0x5902 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xa2 }, .{ .compat = &[_]u21{ 0x590A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xa3 }, .{ .compat = &[_]u21{ 0x5915 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xa4 }, .{ .compat = &[_]u21{ 0x5927 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xa5 }, .{ .compat = &[_]u21{ 0x5973 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xa6 }, .{ .compat = &[_]u21{ 0x5B50 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xa7 }, .{ .compat = &[_]u21{ 0x5B80 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xa8 }, .{ .compat = &[_]u21{ 0x5BF8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xa9 }, .{ .compat = &[_]u21{ 0x5C0F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xaa }, .{ .compat = &[_]u21{ 0x5C22 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xab }, .{ .compat = &[_]u21{ 0x5C38 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xac }, .{ .compat = &[_]u21{ 0x5C6E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xad }, .{ .compat = &[_]u21{ 0x5C71 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xae }, .{ .compat = &[_]u21{ 0x5DDB } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xaf }, .{ .compat = &[_]u21{ 0x5DE5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xb0 }, .{ .compat = &[_]u21{ 0x5DF1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xb1 }, .{ .compat = &[_]u21{ 0x5DFE } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xb2 }, .{ .compat = &[_]u21{ 0x5E72 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xb3 }, .{ .compat = &[_]u21{ 0x5E7A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xb4 }, .{ .compat = &[_]u21{ 0x5E7F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xb5 }, .{ .compat = &[_]u21{ 0x5EF4 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xb6 }, .{ .compat = &[_]u21{ 0x5EFE } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xb7 }, .{ .compat = &[_]u21{ 0x5F0B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xb8 }, .{ .compat = &[_]u21{ 0x5F13 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xb9 }, .{ .compat = &[_]u21{ 0x5F50 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xba }, .{ .compat = &[_]u21{ 0x5F61 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xbb }, .{ .compat = &[_]u21{ 0x5F73 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xbc }, .{ .compat = &[_]u21{ 0x5FC3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xbd }, .{ .compat = &[_]u21{ 0x6208 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xbe }, .{ .compat = &[_]u21{ 0x6236 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbc, 0xbf }, .{ .compat = &[_]u21{ 0x624B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x80 }, .{ .compat = &[_]u21{ 0x652F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x81 }, .{ .compat = &[_]u21{ 0x6534 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x82 }, .{ .compat = &[_]u21{ 0x6587 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x83 }, .{ .compat = &[_]u21{ 0x6597 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x84 }, .{ .compat = &[_]u21{ 0x65A4 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x85 }, .{ .compat = &[_]u21{ 0x65B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x86 }, .{ .compat = &[_]u21{ 0x65E0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x87 }, .{ .compat = &[_]u21{ 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x88 }, .{ .compat = &[_]u21{ 0x66F0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x89 }, .{ .compat = &[_]u21{ 0x6708 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x8a }, .{ .compat = &[_]u21{ 0x6728 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x8b }, .{ .compat = &[_]u21{ 0x6B20 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x8c }, .{ .compat = &[_]u21{ 0x6B62 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x8d }, .{ .compat = &[_]u21{ 0x6B79 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x8e }, .{ .compat = &[_]u21{ 0x6BB3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x8f }, .{ .compat = &[_]u21{ 0x6BCB } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x90 }, .{ .compat = &[_]u21{ 0x6BD4 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x91 }, .{ .compat = &[_]u21{ 0x6BDB } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x92 }, .{ .compat = &[_]u21{ 0x6C0F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x93 }, .{ .compat = &[_]u21{ 0x6C14 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x94 }, .{ .compat = &[_]u21{ 0x6C34 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x95 }, .{ .compat = &[_]u21{ 0x706B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x96 }, .{ .compat = &[_]u21{ 0x722A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x97 }, .{ .compat = &[_]u21{ 0x7236 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x98 }, .{ .compat = &[_]u21{ 0x723B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x99 }, .{ .compat = &[_]u21{ 0x723F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x9a }, .{ .compat = &[_]u21{ 0x7247 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x9b }, .{ .compat = &[_]u21{ 0x7259 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x9c }, .{ .compat = &[_]u21{ 0x725B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x9d }, .{ .compat = &[_]u21{ 0x72AC } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x9e }, .{ .compat = &[_]u21{ 0x7384 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0x9f }, .{ .compat = &[_]u21{ 0x7389 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xa0 }, .{ .compat = &[_]u21{ 0x74DC } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xa1 }, .{ .compat = &[_]u21{ 0x74E6 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xa2 }, .{ .compat = &[_]u21{ 0x7518 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xa3 }, .{ .compat = &[_]u21{ 0x751F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xa4 }, .{ .compat = &[_]u21{ 0x7528 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xa5 }, .{ .compat = &[_]u21{ 0x7530 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xa6 }, .{ .compat = &[_]u21{ 0x758B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xa7 }, .{ .compat = &[_]u21{ 0x7592 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xa8 }, .{ .compat = &[_]u21{ 0x7676 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xa9 }, .{ .compat = &[_]u21{ 0x767D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xaa }, .{ .compat = &[_]u21{ 0x76AE } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xab }, .{ .compat = &[_]u21{ 0x76BF } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xac }, .{ .compat = &[_]u21{ 0x76EE } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xad }, .{ .compat = &[_]u21{ 0x77DB } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xae }, .{ .compat = &[_]u21{ 0x77E2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xaf }, .{ .compat = &[_]u21{ 0x77F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xb0 }, .{ .compat = &[_]u21{ 0x793A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xb1 }, .{ .compat = &[_]u21{ 0x79B8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xb2 }, .{ .compat = &[_]u21{ 0x79BE } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xb3 }, .{ .compat = &[_]u21{ 0x7A74 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xb4 }, .{ .compat = &[_]u21{ 0x7ACB } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xb5 }, .{ .compat = &[_]u21{ 0x7AF9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xb6 }, .{ .compat = &[_]u21{ 0x7C73 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xb7 }, .{ .compat = &[_]u21{ 0x7CF8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xb8 }, .{ .compat = &[_]u21{ 0x7F36 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xb9 }, .{ .compat = &[_]u21{ 0x7F51 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xba }, .{ .compat = &[_]u21{ 0x7F8A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xbb }, .{ .compat = &[_]u21{ 0x7FBD } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xbc }, .{ .compat = &[_]u21{ 0x8001 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xbd }, .{ .compat = &[_]u21{ 0x800C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xbe }, .{ .compat = &[_]u21{ 0x8012 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbd, 0xbf }, .{ .compat = &[_]u21{ 0x8033 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x80 }, .{ .compat = &[_]u21{ 0x807F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x81 }, .{ .compat = &[_]u21{ 0x8089 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x82 }, .{ .compat = &[_]u21{ 0x81E3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x83 }, .{ .compat = &[_]u21{ 0x81EA } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x84 }, .{ .compat = &[_]u21{ 0x81F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x85 }, .{ .compat = &[_]u21{ 0x81FC } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x86 }, .{ .compat = &[_]u21{ 0x820C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x87 }, .{ .compat = &[_]u21{ 0x821B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x88 }, .{ .compat = &[_]u21{ 0x821F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x89 }, .{ .compat = &[_]u21{ 0x826E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x8a }, .{ .compat = &[_]u21{ 0x8272 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x8b }, .{ .compat = &[_]u21{ 0x8278 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x8c }, .{ .compat = &[_]u21{ 0x864D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x8d }, .{ .compat = &[_]u21{ 0x866B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x8e }, .{ .compat = &[_]u21{ 0x8840 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x8f }, .{ .compat = &[_]u21{ 0x884C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x90 }, .{ .compat = &[_]u21{ 0x8863 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x91 }, .{ .compat = &[_]u21{ 0x897E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x92 }, .{ .compat = &[_]u21{ 0x898B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x93 }, .{ .compat = &[_]u21{ 0x89D2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x94 }, .{ .compat = &[_]u21{ 0x8A00 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x95 }, .{ .compat = &[_]u21{ 0x8C37 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x96 }, .{ .compat = &[_]u21{ 0x8C46 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x97 }, .{ .compat = &[_]u21{ 0x8C55 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x98 }, .{ .compat = &[_]u21{ 0x8C78 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x99 }, .{ .compat = &[_]u21{ 0x8C9D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x9a }, .{ .compat = &[_]u21{ 0x8D64 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x9b }, .{ .compat = &[_]u21{ 0x8D70 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x9c }, .{ .compat = &[_]u21{ 0x8DB3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x9d }, .{ .compat = &[_]u21{ 0x8EAB } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x9e }, .{ .compat = &[_]u21{ 0x8ECA } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0x9f }, .{ .compat = &[_]u21{ 0x8F9B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xa0 }, .{ .compat = &[_]u21{ 0x8FB0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xa1 }, .{ .compat = &[_]u21{ 0x8FB5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xa2 }, .{ .compat = &[_]u21{ 0x9091 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xa3 }, .{ .compat = &[_]u21{ 0x9149 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xa4 }, .{ .compat = &[_]u21{ 0x91C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xa5 }, .{ .compat = &[_]u21{ 0x91CC } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xa6 }, .{ .compat = &[_]u21{ 0x91D1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xa7 }, .{ .compat = &[_]u21{ 0x9577 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xa8 }, .{ .compat = &[_]u21{ 0x9580 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xa9 }, .{ .compat = &[_]u21{ 0x961C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xaa }, .{ .compat = &[_]u21{ 0x96B6 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xab }, .{ .compat = &[_]u21{ 0x96B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xac }, .{ .compat = &[_]u21{ 0x96E8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xad }, .{ .compat = &[_]u21{ 0x9751 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xae }, .{ .compat = &[_]u21{ 0x975E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xaf }, .{ .compat = &[_]u21{ 0x9762 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xb0 }, .{ .compat = &[_]u21{ 0x9769 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xb1 }, .{ .compat = &[_]u21{ 0x97CB } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xb2 }, .{ .compat = &[_]u21{ 0x97ED } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xb3 }, .{ .compat = &[_]u21{ 0x97F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xb4 }, .{ .compat = &[_]u21{ 0x9801 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xb5 }, .{ .compat = &[_]u21{ 0x98A8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xb6 }, .{ .compat = &[_]u21{ 0x98DB } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xb7 }, .{ .compat = &[_]u21{ 0x98DF } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xb8 }, .{ .compat = &[_]u21{ 0x9996 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xb9 }, .{ .compat = &[_]u21{ 0x9999 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xba }, .{ .compat = &[_]u21{ 0x99AC } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xbb }, .{ .compat = &[_]u21{ 0x9AA8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xbc }, .{ .compat = &[_]u21{ 0x9AD8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xbd }, .{ .compat = &[_]u21{ 0x9ADF } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xbe }, .{ .compat = &[_]u21{ 0x9B25 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbe, 0xbf }, .{ .compat = &[_]u21{ 0x9B2F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x80 }, .{ .compat = &[_]u21{ 0x9B32 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x81 }, .{ .compat = &[_]u21{ 0x9B3C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x82 }, .{ .compat = &[_]u21{ 0x9B5A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x83 }, .{ .compat = &[_]u21{ 0x9CE5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x84 }, .{ .compat = &[_]u21{ 0x9E75 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x85 }, .{ .compat = &[_]u21{ 0x9E7F } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x86 }, .{ .compat = &[_]u21{ 0x9EA5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x87 }, .{ .compat = &[_]u21{ 0x9EBB } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x88 }, .{ .compat = &[_]u21{ 0x9EC3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x89 }, .{ .compat = &[_]u21{ 0x9ECD } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x8a }, .{ .compat = &[_]u21{ 0x9ED1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x8b }, .{ .compat = &[_]u21{ 0x9EF9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x8c }, .{ .compat = &[_]u21{ 0x9EFD } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x8d }, .{ .compat = &[_]u21{ 0x9F0E } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x8e }, .{ .compat = &[_]u21{ 0x9F13 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x8f }, .{ .compat = &[_]u21{ 0x9F20 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x90 }, .{ .compat = &[_]u21{ 0x9F3B } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x91 }, .{ .compat = &[_]u21{ 0x9F4A } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x92 }, .{ .compat = &[_]u21{ 0x9F52 } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x93 }, .{ .compat = &[_]u21{ 0x9F8D } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x94 }, .{ .compat = &[_]u21{ 0x9F9C } });
    try self.decomp_trie.add(&[_]u8{ 0xe2, 0xbf, 0x95 }, .{ .compat = &[_]u21{ 0x9FA0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x80, 0x80 }, .{ .compat = &[_]u21{ 0x0020 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x80, 0xb6 }, .{ .compat = &[_]u21{ 0x3012 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x80, 0xb8 }, .{ .compat = &[_]u21{ 0x5341 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x80, 0xb9 }, .{ .compat = &[_]u21{ 0x5344 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x80, 0xba }, .{ .compat = &[_]u21{ 0x5345 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0x8c }, .{ .canon = [2]u21{ 0x304B, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0x8e }, .{ .canon = [2]u21{ 0x304D, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0x90 }, .{ .canon = [2]u21{ 0x304F, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0x92 }, .{ .canon = [2]u21{ 0x3051, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0x94 }, .{ .canon = [2]u21{ 0x3053, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0x96 }, .{ .canon = [2]u21{ 0x3055, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0x98 }, .{ .canon = [2]u21{ 0x3057, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0x9a }, .{ .canon = [2]u21{ 0x3059, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0x9c }, .{ .canon = [2]u21{ 0x305B, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0x9e }, .{ .canon = [2]u21{ 0x305D, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0xa0 }, .{ .canon = [2]u21{ 0x305F, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0xa2 }, .{ .canon = [2]u21{ 0x3061, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0xa5 }, .{ .canon = [2]u21{ 0x3064, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0xa7 }, .{ .canon = [2]u21{ 0x3066, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0xa9 }, .{ .canon = [2]u21{ 0x3068, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0xb0 }, .{ .canon = [2]u21{ 0x306F, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0xb1 }, .{ .canon = [2]u21{ 0x306F, 0x309A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0xb3 }, .{ .canon = [2]u21{ 0x3072, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0xb4 }, .{ .canon = [2]u21{ 0x3072, 0x309A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0xb6 }, .{ .canon = [2]u21{ 0x3075, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0xb7 }, .{ .canon = [2]u21{ 0x3075, 0x309A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0xb9 }, .{ .canon = [2]u21{ 0x3078, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0xba }, .{ .canon = [2]u21{ 0x3078, 0x309A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0xbc }, .{ .canon = [2]u21{ 0x307B, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x81, 0xbd }, .{ .canon = [2]u21{ 0x307B, 0x309A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x82, 0x94 }, .{ .canon = [2]u21{ 0x3046, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x82, 0x9b }, .{ .compat = &[_]u21{ 0x0020, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x82, 0x9c }, .{ .compat = &[_]u21{ 0x0020, 0x309A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x82, 0x9e }, .{ .canon = [2]u21{ 0x309D, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x82, 0x9f }, .{ .compat = &[_]u21{ 0x3088, 0x308A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x82, 0xac }, .{ .canon = [2]u21{ 0x30AB, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x82, 0xae }, .{ .canon = [2]u21{ 0x30AD, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x82, 0xb0 }, .{ .canon = [2]u21{ 0x30AF, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x82, 0xb2 }, .{ .canon = [2]u21{ 0x30B1, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x82, 0xb4 }, .{ .canon = [2]u21{ 0x30B3, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x82, 0xb6 }, .{ .canon = [2]u21{ 0x30B5, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x82, 0xb8 }, .{ .canon = [2]u21{ 0x30B7, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x82, 0xba }, .{ .canon = [2]u21{ 0x30B9, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x82, 0xbc }, .{ .canon = [2]u21{ 0x30BB, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x82, 0xbe }, .{ .canon = [2]u21{ 0x30BD, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0x80 }, .{ .canon = [2]u21{ 0x30BF, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0x82 }, .{ .canon = [2]u21{ 0x30C1, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0x85 }, .{ .canon = [2]u21{ 0x30C4, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0x87 }, .{ .canon = [2]u21{ 0x30C6, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0x89 }, .{ .canon = [2]u21{ 0x30C8, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0x90 }, .{ .canon = [2]u21{ 0x30CF, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0x91 }, .{ .canon = [2]u21{ 0x30CF, 0x309A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0x93 }, .{ .canon = [2]u21{ 0x30D2, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0x94 }, .{ .canon = [2]u21{ 0x30D2, 0x309A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0x96 }, .{ .canon = [2]u21{ 0x30D5, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0x97 }, .{ .canon = [2]u21{ 0x30D5, 0x309A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0x99 }, .{ .canon = [2]u21{ 0x30D8, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0x9a }, .{ .canon = [2]u21{ 0x30D8, 0x309A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0x9c }, .{ .canon = [2]u21{ 0x30DB, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0x9d }, .{ .canon = [2]u21{ 0x30DB, 0x309A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0xb4 }, .{ .canon = [2]u21{ 0x30A6, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0xb7 }, .{ .canon = [2]u21{ 0x30EF, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0xb8 }, .{ .canon = [2]u21{ 0x30F0, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0xb9 }, .{ .canon = [2]u21{ 0x30F1, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0xba }, .{ .canon = [2]u21{ 0x30F2, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0xbe }, .{ .canon = [2]u21{ 0x30FD, 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x83, 0xbf }, .{ .compat = &[_]u21{ 0x30B3, 0x30C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x84, 0xb1 }, .{ .compat = &[_]u21{ 0x1100 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x84, 0xb2 }, .{ .compat = &[_]u21{ 0x1101 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x84, 0xb3 }, .{ .compat = &[_]u21{ 0x11AA } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x84, 0xb4 }, .{ .compat = &[_]u21{ 0x1102 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x84, 0xb5 }, .{ .compat = &[_]u21{ 0x11AC } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x84, 0xb6 }, .{ .compat = &[_]u21{ 0x11AD } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x84, 0xb7 }, .{ .compat = &[_]u21{ 0x1103 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x84, 0xb8 }, .{ .compat = &[_]u21{ 0x1104 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x84, 0xb9 }, .{ .compat = &[_]u21{ 0x1105 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x84, 0xba }, .{ .compat = &[_]u21{ 0x11B0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x84, 0xbb }, .{ .compat = &[_]u21{ 0x11B1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x84, 0xbc }, .{ .compat = &[_]u21{ 0x11B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x84, 0xbd }, .{ .compat = &[_]u21{ 0x11B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x84, 0xbe }, .{ .compat = &[_]u21{ 0x11B4 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x84, 0xbf }, .{ .compat = &[_]u21{ 0x11B5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x80 }, .{ .compat = &[_]u21{ 0x111A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x81 }, .{ .compat = &[_]u21{ 0x1106 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x82 }, .{ .compat = &[_]u21{ 0x1107 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x83 }, .{ .compat = &[_]u21{ 0x1108 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x84 }, .{ .compat = &[_]u21{ 0x1121 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x85 }, .{ .compat = &[_]u21{ 0x1109 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x86 }, .{ .compat = &[_]u21{ 0x110A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x87 }, .{ .compat = &[_]u21{ 0x110B } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x88 }, .{ .compat = &[_]u21{ 0x110C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x89 }, .{ .compat = &[_]u21{ 0x110D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x8a }, .{ .compat = &[_]u21{ 0x110E } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x8b }, .{ .compat = &[_]u21{ 0x110F } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x8c }, .{ .compat = &[_]u21{ 0x1110 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x8d }, .{ .compat = &[_]u21{ 0x1111 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x8e }, .{ .compat = &[_]u21{ 0x1112 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x8f }, .{ .compat = &[_]u21{ 0x1161 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x90 }, .{ .compat = &[_]u21{ 0x1162 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x91 }, .{ .compat = &[_]u21{ 0x1163 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x92 }, .{ .compat = &[_]u21{ 0x1164 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x93 }, .{ .compat = &[_]u21{ 0x1165 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x94 }, .{ .compat = &[_]u21{ 0x1166 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x95 }, .{ .compat = &[_]u21{ 0x1167 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x96 }, .{ .compat = &[_]u21{ 0x1168 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x97 }, .{ .compat = &[_]u21{ 0x1169 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x98 }, .{ .compat = &[_]u21{ 0x116A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x99 }, .{ .compat = &[_]u21{ 0x116B } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x9a }, .{ .compat = &[_]u21{ 0x116C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x9b }, .{ .compat = &[_]u21{ 0x116D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x9c }, .{ .compat = &[_]u21{ 0x116E } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x9d }, .{ .compat = &[_]u21{ 0x116F } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x9e }, .{ .compat = &[_]u21{ 0x1170 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0x9f }, .{ .compat = &[_]u21{ 0x1171 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xa0 }, .{ .compat = &[_]u21{ 0x1172 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xa1 }, .{ .compat = &[_]u21{ 0x1173 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xa2 }, .{ .compat = &[_]u21{ 0x1174 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xa3 }, .{ .compat = &[_]u21{ 0x1175 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xa4 }, .{ .compat = &[_]u21{ 0x1160 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xa5 }, .{ .compat = &[_]u21{ 0x1114 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xa6 }, .{ .compat = &[_]u21{ 0x1115 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xa7 }, .{ .compat = &[_]u21{ 0x11C7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xa8 }, .{ .compat = &[_]u21{ 0x11C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xa9 }, .{ .compat = &[_]u21{ 0x11CC } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xaa }, .{ .compat = &[_]u21{ 0x11CE } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xab }, .{ .compat = &[_]u21{ 0x11D3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xac }, .{ .compat = &[_]u21{ 0x11D7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xad }, .{ .compat = &[_]u21{ 0x11D9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xae }, .{ .compat = &[_]u21{ 0x111C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xaf }, .{ .compat = &[_]u21{ 0x11DD } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xb0 }, .{ .compat = &[_]u21{ 0x11DF } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xb1 }, .{ .compat = &[_]u21{ 0x111D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xb2 }, .{ .compat = &[_]u21{ 0x111E } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xb3 }, .{ .compat = &[_]u21{ 0x1120 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xb4 }, .{ .compat = &[_]u21{ 0x1122 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xb5 }, .{ .compat = &[_]u21{ 0x1123 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xb6 }, .{ .compat = &[_]u21{ 0x1127 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xb7 }, .{ .compat = &[_]u21{ 0x1129 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xb8 }, .{ .compat = &[_]u21{ 0x112B } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xb9 }, .{ .compat = &[_]u21{ 0x112C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xba }, .{ .compat = &[_]u21{ 0x112D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xbb }, .{ .compat = &[_]u21{ 0x112E } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xbc }, .{ .compat = &[_]u21{ 0x112F } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xbd }, .{ .compat = &[_]u21{ 0x1132 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xbe }, .{ .compat = &[_]u21{ 0x1136 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x85, 0xbf }, .{ .compat = &[_]u21{ 0x1140 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x80 }, .{ .compat = &[_]u21{ 0x1147 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x81 }, .{ .compat = &[_]u21{ 0x114C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x82 }, .{ .compat = &[_]u21{ 0x11F1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x83 }, .{ .compat = &[_]u21{ 0x11F2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x84 }, .{ .compat = &[_]u21{ 0x1157 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x85 }, .{ .compat = &[_]u21{ 0x1158 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x86 }, .{ .compat = &[_]u21{ 0x1159 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x87 }, .{ .compat = &[_]u21{ 0x1184 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x88 }, .{ .compat = &[_]u21{ 0x1185 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x89 }, .{ .compat = &[_]u21{ 0x1188 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x8a }, .{ .compat = &[_]u21{ 0x1191 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x8b }, .{ .compat = &[_]u21{ 0x1192 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x8c }, .{ .compat = &[_]u21{ 0x1194 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x8d }, .{ .compat = &[_]u21{ 0x119E } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x8e }, .{ .compat = &[_]u21{ 0x11A1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x92 }, .{ .compat = &[_]u21{ 0x4E00 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x93 }, .{ .compat = &[_]u21{ 0x4E8C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x94 }, .{ .compat = &[_]u21{ 0x4E09 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x95 }, .{ .compat = &[_]u21{ 0x56DB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x96 }, .{ .compat = &[_]u21{ 0x4E0A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x97 }, .{ .compat = &[_]u21{ 0x4E2D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x98 }, .{ .compat = &[_]u21{ 0x4E0B } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x99 }, .{ .compat = &[_]u21{ 0x7532 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x9a }, .{ .compat = &[_]u21{ 0x4E59 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x9b }, .{ .compat = &[_]u21{ 0x4E19 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x9c }, .{ .compat = &[_]u21{ 0x4E01 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x9d }, .{ .compat = &[_]u21{ 0x5929 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x9e }, .{ .compat = &[_]u21{ 0x5730 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x86, 0x9f }, .{ .compat = &[_]u21{ 0x4EBA } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x80 }, .{ .compat = &[_]u21{ 0x0028, 0x1100, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x81 }, .{ .compat = &[_]u21{ 0x0028, 0x1102, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x82 }, .{ .compat = &[_]u21{ 0x0028, 0x1103, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x83 }, .{ .compat = &[_]u21{ 0x0028, 0x1105, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x84 }, .{ .compat = &[_]u21{ 0x0028, 0x1106, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x85 }, .{ .compat = &[_]u21{ 0x0028, 0x1107, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x86 }, .{ .compat = &[_]u21{ 0x0028, 0x1109, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x87 }, .{ .compat = &[_]u21{ 0x0028, 0x110B, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x88 }, .{ .compat = &[_]u21{ 0x0028, 0x110C, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x89 }, .{ .compat = &[_]u21{ 0x0028, 0x110E, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x8a }, .{ .compat = &[_]u21{ 0x0028, 0x110F, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x8b }, .{ .compat = &[_]u21{ 0x0028, 0x1110, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x8c }, .{ .compat = &[_]u21{ 0x0028, 0x1111, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x8d }, .{ .compat = &[_]u21{ 0x0028, 0x1112, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x8e }, .{ .compat = &[_]u21{ 0x0028, 0x1100, 0x1161, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x8f }, .{ .compat = &[_]u21{ 0x0028, 0x1102, 0x1161, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x90 }, .{ .compat = &[_]u21{ 0x0028, 0x1103, 0x1161, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x91 }, .{ .compat = &[_]u21{ 0x0028, 0x1105, 0x1161, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x92 }, .{ .compat = &[_]u21{ 0x0028, 0x1106, 0x1161, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x93 }, .{ .compat = &[_]u21{ 0x0028, 0x1107, 0x1161, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x94 }, .{ .compat = &[_]u21{ 0x0028, 0x1109, 0x1161, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x95 }, .{ .compat = &[_]u21{ 0x0028, 0x110B, 0x1161, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x96 }, .{ .compat = &[_]u21{ 0x0028, 0x110C, 0x1161, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x97 }, .{ .compat = &[_]u21{ 0x0028, 0x110E, 0x1161, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x98 }, .{ .compat = &[_]u21{ 0x0028, 0x110F, 0x1161, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x99 }, .{ .compat = &[_]u21{ 0x0028, 0x1110, 0x1161, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x9a }, .{ .compat = &[_]u21{ 0x0028, 0x1111, 0x1161, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x9b }, .{ .compat = &[_]u21{ 0x0028, 0x1112, 0x1161, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x9c }, .{ .compat = &[_]u21{ 0x0028, 0x110C, 0x116E, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x9d }, .{ .compat = &[_]u21{ 0x0028, 0x110B, 0x1169, 0x110C, 0x1165, 0x11AB, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0x9e }, .{ .compat = &[_]u21{ 0x0028, 0x110B, 0x1169, 0x1112, 0x116E, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xa0 }, .{ .compat = &[_]u21{ 0x0028, 0x4E00, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xa1 }, .{ .compat = &[_]u21{ 0x0028, 0x4E8C, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xa2 }, .{ .compat = &[_]u21{ 0x0028, 0x4E09, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xa3 }, .{ .compat = &[_]u21{ 0x0028, 0x56DB, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xa4 }, .{ .compat = &[_]u21{ 0x0028, 0x4E94, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xa5 }, .{ .compat = &[_]u21{ 0x0028, 0x516D, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xa6 }, .{ .compat = &[_]u21{ 0x0028, 0x4E03, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xa7 }, .{ .compat = &[_]u21{ 0x0028, 0x516B, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xa8 }, .{ .compat = &[_]u21{ 0x0028, 0x4E5D, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xa9 }, .{ .compat = &[_]u21{ 0x0028, 0x5341, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xaa }, .{ .compat = &[_]u21{ 0x0028, 0x6708, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xab }, .{ .compat = &[_]u21{ 0x0028, 0x706B, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xac }, .{ .compat = &[_]u21{ 0x0028, 0x6C34, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xad }, .{ .compat = &[_]u21{ 0x0028, 0x6728, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xae }, .{ .compat = &[_]u21{ 0x0028, 0x91D1, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xaf }, .{ .compat = &[_]u21{ 0x0028, 0x571F, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xb0 }, .{ .compat = &[_]u21{ 0x0028, 0x65E5, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xb1 }, .{ .compat = &[_]u21{ 0x0028, 0x682A, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xb2 }, .{ .compat = &[_]u21{ 0x0028, 0x6709, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xb3 }, .{ .compat = &[_]u21{ 0x0028, 0x793E, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xb4 }, .{ .compat = &[_]u21{ 0x0028, 0x540D, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xb5 }, .{ .compat = &[_]u21{ 0x0028, 0x7279, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xb6 }, .{ .compat = &[_]u21{ 0x0028, 0x8CA1, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xb7 }, .{ .compat = &[_]u21{ 0x0028, 0x795D, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xb8 }, .{ .compat = &[_]u21{ 0x0028, 0x52B4, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xb9 }, .{ .compat = &[_]u21{ 0x0028, 0x4EE3, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xba }, .{ .compat = &[_]u21{ 0x0028, 0x547C, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xbb }, .{ .compat = &[_]u21{ 0x0028, 0x5B66, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xbc }, .{ .compat = &[_]u21{ 0x0028, 0x76E3, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xbd }, .{ .compat = &[_]u21{ 0x0028, 0x4F01, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xbe }, .{ .compat = &[_]u21{ 0x0028, 0x8CC7, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x88, 0xbf }, .{ .compat = &[_]u21{ 0x0028, 0x5354, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x80 }, .{ .compat = &[_]u21{ 0x0028, 0x796D, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x81 }, .{ .compat = &[_]u21{ 0x0028, 0x4F11, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x82 }, .{ .compat = &[_]u21{ 0x0028, 0x81EA, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x83 }, .{ .compat = &[_]u21{ 0x0028, 0x81F3, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x84 }, .{ .compat = &[_]u21{ 0x554F } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x85 }, .{ .compat = &[_]u21{ 0x5E7C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x86 }, .{ .compat = &[_]u21{ 0x6587 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x87 }, .{ .compat = &[_]u21{ 0x7B8F } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x90 }, .{ .compat = &[_]u21{ 0x0050, 0x0054, 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x91 }, .{ .compat = &[_]u21{ 0x0032, 0x0031 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x92 }, .{ .compat = &[_]u21{ 0x0032, 0x0032 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x93 }, .{ .compat = &[_]u21{ 0x0032, 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x94 }, .{ .compat = &[_]u21{ 0x0032, 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x95 }, .{ .compat = &[_]u21{ 0x0032, 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x96 }, .{ .compat = &[_]u21{ 0x0032, 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x97 }, .{ .compat = &[_]u21{ 0x0032, 0x0037 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x98 }, .{ .compat = &[_]u21{ 0x0032, 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x99 }, .{ .compat = &[_]u21{ 0x0032, 0x0039 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x9a }, .{ .compat = &[_]u21{ 0x0033, 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x9b }, .{ .compat = &[_]u21{ 0x0033, 0x0031 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x9c }, .{ .compat = &[_]u21{ 0x0033, 0x0032 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x9d }, .{ .compat = &[_]u21{ 0x0033, 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x9e }, .{ .compat = &[_]u21{ 0x0033, 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0x9f }, .{ .compat = &[_]u21{ 0x0033, 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xa0 }, .{ .compat = &[_]u21{ 0x1100 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xa1 }, .{ .compat = &[_]u21{ 0x1102 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xa2 }, .{ .compat = &[_]u21{ 0x1103 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xa3 }, .{ .compat = &[_]u21{ 0x1105 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xa4 }, .{ .compat = &[_]u21{ 0x1106 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xa5 }, .{ .compat = &[_]u21{ 0x1107 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xa6 }, .{ .compat = &[_]u21{ 0x1109 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xa7 }, .{ .compat = &[_]u21{ 0x110B } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xa8 }, .{ .compat = &[_]u21{ 0x110C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xa9 }, .{ .compat = &[_]u21{ 0x110E } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xaa }, .{ .compat = &[_]u21{ 0x110F } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xab }, .{ .compat = &[_]u21{ 0x1110 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xac }, .{ .compat = &[_]u21{ 0x1111 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xad }, .{ .compat = &[_]u21{ 0x1112 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xae }, .{ .compat = &[_]u21{ 0x1100, 0x1161 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xaf }, .{ .compat = &[_]u21{ 0x1102, 0x1161 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xb0 }, .{ .compat = &[_]u21{ 0x1103, 0x1161 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xb1 }, .{ .compat = &[_]u21{ 0x1105, 0x1161 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xb2 }, .{ .compat = &[_]u21{ 0x1106, 0x1161 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xb3 }, .{ .compat = &[_]u21{ 0x1107, 0x1161 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xb4 }, .{ .compat = &[_]u21{ 0x1109, 0x1161 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xb5 }, .{ .compat = &[_]u21{ 0x110B, 0x1161 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xb6 }, .{ .compat = &[_]u21{ 0x110C, 0x1161 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xb7 }, .{ .compat = &[_]u21{ 0x110E, 0x1161 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xb8 }, .{ .compat = &[_]u21{ 0x110F, 0x1161 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xb9 }, .{ .compat = &[_]u21{ 0x1110, 0x1161 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xba }, .{ .compat = &[_]u21{ 0x1111, 0x1161 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xbb }, .{ .compat = &[_]u21{ 0x1112, 0x1161 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xbc }, .{ .compat = &[_]u21{ 0x110E, 0x1161, 0x11B7, 0x1100, 0x1169 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xbd }, .{ .compat = &[_]u21{ 0x110C, 0x116E, 0x110B, 0x1174 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x89, 0xbe }, .{ .compat = &[_]u21{ 0x110B, 0x116E } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x80 }, .{ .compat = &[_]u21{ 0x4E00 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x81 }, .{ .compat = &[_]u21{ 0x4E8C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x82 }, .{ .compat = &[_]u21{ 0x4E09 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x83 }, .{ .compat = &[_]u21{ 0x56DB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x84 }, .{ .compat = &[_]u21{ 0x4E94 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x85 }, .{ .compat = &[_]u21{ 0x516D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x86 }, .{ .compat = &[_]u21{ 0x4E03 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x87 }, .{ .compat = &[_]u21{ 0x516B } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x88 }, .{ .compat = &[_]u21{ 0x4E5D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x89 }, .{ .compat = &[_]u21{ 0x5341 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x8a }, .{ .compat = &[_]u21{ 0x6708 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x8b }, .{ .compat = &[_]u21{ 0x706B } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x8c }, .{ .compat = &[_]u21{ 0x6C34 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x8d }, .{ .compat = &[_]u21{ 0x6728 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x8e }, .{ .compat = &[_]u21{ 0x91D1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x8f }, .{ .compat = &[_]u21{ 0x571F } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x90 }, .{ .compat = &[_]u21{ 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x91 }, .{ .compat = &[_]u21{ 0x682A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x92 }, .{ .compat = &[_]u21{ 0x6709 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x93 }, .{ .compat = &[_]u21{ 0x793E } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x94 }, .{ .compat = &[_]u21{ 0x540D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x95 }, .{ .compat = &[_]u21{ 0x7279 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x96 }, .{ .compat = &[_]u21{ 0x8CA1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x97 }, .{ .compat = &[_]u21{ 0x795D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x98 }, .{ .compat = &[_]u21{ 0x52B4 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x99 }, .{ .compat = &[_]u21{ 0x79D8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x9a }, .{ .compat = &[_]u21{ 0x7537 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x9b }, .{ .compat = &[_]u21{ 0x5973 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x9c }, .{ .compat = &[_]u21{ 0x9069 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x9d }, .{ .compat = &[_]u21{ 0x512A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x9e }, .{ .compat = &[_]u21{ 0x5370 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0x9f }, .{ .compat = &[_]u21{ 0x6CE8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xa0 }, .{ .compat = &[_]u21{ 0x9805 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xa1 }, .{ .compat = &[_]u21{ 0x4F11 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xa2 }, .{ .compat = &[_]u21{ 0x5199 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xa3 }, .{ .compat = &[_]u21{ 0x6B63 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xa4 }, .{ .compat = &[_]u21{ 0x4E0A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xa5 }, .{ .compat = &[_]u21{ 0x4E2D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xa6 }, .{ .compat = &[_]u21{ 0x4E0B } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xa7 }, .{ .compat = &[_]u21{ 0x5DE6 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xa8 }, .{ .compat = &[_]u21{ 0x53F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xa9 }, .{ .compat = &[_]u21{ 0x533B } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xaa }, .{ .compat = &[_]u21{ 0x5B97 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xab }, .{ .compat = &[_]u21{ 0x5B66 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xac }, .{ .compat = &[_]u21{ 0x76E3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xad }, .{ .compat = &[_]u21{ 0x4F01 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xae }, .{ .compat = &[_]u21{ 0x8CC7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xaf }, .{ .compat = &[_]u21{ 0x5354 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xb0 }, .{ .compat = &[_]u21{ 0x591C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xb1 }, .{ .compat = &[_]u21{ 0x0033, 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xb2 }, .{ .compat = &[_]u21{ 0x0033, 0x0037 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xb3 }, .{ .compat = &[_]u21{ 0x0033, 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xb4 }, .{ .compat = &[_]u21{ 0x0033, 0x0039 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xb5 }, .{ .compat = &[_]u21{ 0x0034, 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xb6 }, .{ .compat = &[_]u21{ 0x0034, 0x0031 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xb7 }, .{ .compat = &[_]u21{ 0x0034, 0x0032 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xb8 }, .{ .compat = &[_]u21{ 0x0034, 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xb9 }, .{ .compat = &[_]u21{ 0x0034, 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xba }, .{ .compat = &[_]u21{ 0x0034, 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xbb }, .{ .compat = &[_]u21{ 0x0034, 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xbc }, .{ .compat = &[_]u21{ 0x0034, 0x0037 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xbd }, .{ .compat = &[_]u21{ 0x0034, 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xbe }, .{ .compat = &[_]u21{ 0x0034, 0x0039 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8a, 0xbf }, .{ .compat = &[_]u21{ 0x0035, 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x80 }, .{ .compat = &[_]u21{ 0x0031, 0x6708 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x81 }, .{ .compat = &[_]u21{ 0x0032, 0x6708 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x82 }, .{ .compat = &[_]u21{ 0x0033, 0x6708 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x83 }, .{ .compat = &[_]u21{ 0x0034, 0x6708 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x84 }, .{ .compat = &[_]u21{ 0x0035, 0x6708 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x85 }, .{ .compat = &[_]u21{ 0x0036, 0x6708 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x86 }, .{ .compat = &[_]u21{ 0x0037, 0x6708 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x87 }, .{ .compat = &[_]u21{ 0x0038, 0x6708 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x88 }, .{ .compat = &[_]u21{ 0x0039, 0x6708 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x89 }, .{ .compat = &[_]u21{ 0x0031, 0x0030, 0x6708 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x8a }, .{ .compat = &[_]u21{ 0x0031, 0x0031, 0x6708 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x8b }, .{ .compat = &[_]u21{ 0x0031, 0x0032, 0x6708 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x8c }, .{ .compat = &[_]u21{ 0x0048, 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x8d }, .{ .compat = &[_]u21{ 0x0065, 0x0072, 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x8e }, .{ .compat = &[_]u21{ 0x0065, 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x8f }, .{ .compat = &[_]u21{ 0x004C, 0x0054, 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x90 }, .{ .compat = &[_]u21{ 0x30A2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x91 }, .{ .compat = &[_]u21{ 0x30A4 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x92 }, .{ .compat = &[_]u21{ 0x30A6 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x93 }, .{ .compat = &[_]u21{ 0x30A8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x94 }, .{ .compat = &[_]u21{ 0x30AA } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x95 }, .{ .compat = &[_]u21{ 0x30AB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x96 }, .{ .compat = &[_]u21{ 0x30AD } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x97 }, .{ .compat = &[_]u21{ 0x30AF } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x98 }, .{ .compat = &[_]u21{ 0x30B1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x99 }, .{ .compat = &[_]u21{ 0x30B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x9a }, .{ .compat = &[_]u21{ 0x30B5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x9b }, .{ .compat = &[_]u21{ 0x30B7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x9c }, .{ .compat = &[_]u21{ 0x30B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x9d }, .{ .compat = &[_]u21{ 0x30BB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x9e }, .{ .compat = &[_]u21{ 0x30BD } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0x9f }, .{ .compat = &[_]u21{ 0x30BF } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xa0 }, .{ .compat = &[_]u21{ 0x30C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xa1 }, .{ .compat = &[_]u21{ 0x30C4 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xa2 }, .{ .compat = &[_]u21{ 0x30C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xa3 }, .{ .compat = &[_]u21{ 0x30C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xa4 }, .{ .compat = &[_]u21{ 0x30CA } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xa5 }, .{ .compat = &[_]u21{ 0x30CB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xa6 }, .{ .compat = &[_]u21{ 0x30CC } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xa7 }, .{ .compat = &[_]u21{ 0x30CD } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xa8 }, .{ .compat = &[_]u21{ 0x30CE } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xa9 }, .{ .compat = &[_]u21{ 0x30CF } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xaa }, .{ .compat = &[_]u21{ 0x30D2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xab }, .{ .compat = &[_]u21{ 0x30D5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xac }, .{ .compat = &[_]u21{ 0x30D8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xad }, .{ .compat = &[_]u21{ 0x30DB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xae }, .{ .compat = &[_]u21{ 0x30DE } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xaf }, .{ .compat = &[_]u21{ 0x30DF } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xb0 }, .{ .compat = &[_]u21{ 0x30E0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xb1 }, .{ .compat = &[_]u21{ 0x30E1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xb2 }, .{ .compat = &[_]u21{ 0x30E2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xb3 }, .{ .compat = &[_]u21{ 0x30E4 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xb4 }, .{ .compat = &[_]u21{ 0x30E6 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xb5 }, .{ .compat = &[_]u21{ 0x30E8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xb6 }, .{ .compat = &[_]u21{ 0x30E9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xb7 }, .{ .compat = &[_]u21{ 0x30EA } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xb8 }, .{ .compat = &[_]u21{ 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xb9 }, .{ .compat = &[_]u21{ 0x30EC } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xba }, .{ .compat = &[_]u21{ 0x30ED } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xbb }, .{ .compat = &[_]u21{ 0x30EF } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xbc }, .{ .compat = &[_]u21{ 0x30F0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xbd }, .{ .compat = &[_]u21{ 0x30F1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xbe }, .{ .compat = &[_]u21{ 0x30F2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8b, 0xbf }, .{ .compat = &[_]u21{ 0x4EE4, 0x548C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x80 }, .{ .compat = &[_]u21{ 0x30A2, 0x30D1, 0x30FC, 0x30C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x81 }, .{ .compat = &[_]u21{ 0x30A2, 0x30EB, 0x30D5, 0x30A1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x82 }, .{ .compat = &[_]u21{ 0x30A2, 0x30F3, 0x30DA, 0x30A2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x83 }, .{ .compat = &[_]u21{ 0x30A2, 0x30FC, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x84 }, .{ .compat = &[_]u21{ 0x30A4, 0x30CB, 0x30F3, 0x30B0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x85 }, .{ .compat = &[_]u21{ 0x30A4, 0x30F3, 0x30C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x86 }, .{ .compat = &[_]u21{ 0x30A6, 0x30A9, 0x30F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x87 }, .{ .compat = &[_]u21{ 0x30A8, 0x30B9, 0x30AF, 0x30FC, 0x30C9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x88 }, .{ .compat = &[_]u21{ 0x30A8, 0x30FC, 0x30AB, 0x30FC } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x89 }, .{ .compat = &[_]u21{ 0x30AA, 0x30F3, 0x30B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x8a }, .{ .compat = &[_]u21{ 0x30AA, 0x30FC, 0x30E0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x8b }, .{ .compat = &[_]u21{ 0x30AB, 0x30A4, 0x30EA } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x8c }, .{ .compat = &[_]u21{ 0x30AB, 0x30E9, 0x30C3, 0x30C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x8d }, .{ .compat = &[_]u21{ 0x30AB, 0x30ED, 0x30EA, 0x30FC } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x8e }, .{ .compat = &[_]u21{ 0x30AC, 0x30ED, 0x30F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x8f }, .{ .compat = &[_]u21{ 0x30AC, 0x30F3, 0x30DE } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x90 }, .{ .compat = &[_]u21{ 0x30AE, 0x30AC } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x91 }, .{ .compat = &[_]u21{ 0x30AE, 0x30CB, 0x30FC } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x92 }, .{ .compat = &[_]u21{ 0x30AD, 0x30E5, 0x30EA, 0x30FC } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x93 }, .{ .compat = &[_]u21{ 0x30AE, 0x30EB, 0x30C0, 0x30FC } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x94 }, .{ .compat = &[_]u21{ 0x30AD, 0x30ED } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x95 }, .{ .compat = &[_]u21{ 0x30AD, 0x30ED, 0x30B0, 0x30E9, 0x30E0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x96 }, .{ .compat = &[_]u21{ 0x30AD, 0x30ED, 0x30E1, 0x30FC, 0x30C8, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x97 }, .{ .compat = &[_]u21{ 0x30AD, 0x30ED, 0x30EF, 0x30C3, 0x30C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x98 }, .{ .compat = &[_]u21{ 0x30B0, 0x30E9, 0x30E0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x99 }, .{ .compat = &[_]u21{ 0x30B0, 0x30E9, 0x30E0, 0x30C8, 0x30F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x9a }, .{ .compat = &[_]u21{ 0x30AF, 0x30EB, 0x30BC, 0x30A4, 0x30ED } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x9b }, .{ .compat = &[_]u21{ 0x30AF, 0x30ED, 0x30FC, 0x30CD } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x9c }, .{ .compat = &[_]u21{ 0x30B1, 0x30FC, 0x30B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x9d }, .{ .compat = &[_]u21{ 0x30B3, 0x30EB, 0x30CA } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x9e }, .{ .compat = &[_]u21{ 0x30B3, 0x30FC, 0x30DD } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0x9f }, .{ .compat = &[_]u21{ 0x30B5, 0x30A4, 0x30AF, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xa0 }, .{ .compat = &[_]u21{ 0x30B5, 0x30F3, 0x30C1, 0x30FC, 0x30E0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xa1 }, .{ .compat = &[_]u21{ 0x30B7, 0x30EA, 0x30F3, 0x30B0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xa2 }, .{ .compat = &[_]u21{ 0x30BB, 0x30F3, 0x30C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xa3 }, .{ .compat = &[_]u21{ 0x30BB, 0x30F3, 0x30C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xa4 }, .{ .compat = &[_]u21{ 0x30C0, 0x30FC, 0x30B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xa5 }, .{ .compat = &[_]u21{ 0x30C7, 0x30B7 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xa6 }, .{ .compat = &[_]u21{ 0x30C9, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xa7 }, .{ .compat = &[_]u21{ 0x30C8, 0x30F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xa8 }, .{ .compat = &[_]u21{ 0x30CA, 0x30CE } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xa9 }, .{ .compat = &[_]u21{ 0x30CE, 0x30C3, 0x30C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xaa }, .{ .compat = &[_]u21{ 0x30CF, 0x30A4, 0x30C4 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xab }, .{ .compat = &[_]u21{ 0x30D1, 0x30FC, 0x30BB, 0x30F3, 0x30C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xac }, .{ .compat = &[_]u21{ 0x30D1, 0x30FC, 0x30C4 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xad }, .{ .compat = &[_]u21{ 0x30D0, 0x30FC, 0x30EC, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xae }, .{ .compat = &[_]u21{ 0x30D4, 0x30A2, 0x30B9, 0x30C8, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xaf }, .{ .compat = &[_]u21{ 0x30D4, 0x30AF, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xb0 }, .{ .compat = &[_]u21{ 0x30D4, 0x30B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xb1 }, .{ .compat = &[_]u21{ 0x30D3, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xb2 }, .{ .compat = &[_]u21{ 0x30D5, 0x30A1, 0x30E9, 0x30C3, 0x30C9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xb3 }, .{ .compat = &[_]u21{ 0x30D5, 0x30A3, 0x30FC, 0x30C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xb4 }, .{ .compat = &[_]u21{ 0x30D6, 0x30C3, 0x30B7, 0x30A7, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xb5 }, .{ .compat = &[_]u21{ 0x30D5, 0x30E9, 0x30F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xb6 }, .{ .compat = &[_]u21{ 0x30D8, 0x30AF, 0x30BF, 0x30FC, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xb7 }, .{ .compat = &[_]u21{ 0x30DA, 0x30BD } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xb8 }, .{ .compat = &[_]u21{ 0x30DA, 0x30CB, 0x30D2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xb9 }, .{ .compat = &[_]u21{ 0x30D8, 0x30EB, 0x30C4 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xba }, .{ .compat = &[_]u21{ 0x30DA, 0x30F3, 0x30B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xbb }, .{ .compat = &[_]u21{ 0x30DA, 0x30FC, 0x30B8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xbc }, .{ .compat = &[_]u21{ 0x30D9, 0x30FC, 0x30BF } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xbd }, .{ .compat = &[_]u21{ 0x30DD, 0x30A4, 0x30F3, 0x30C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xbe }, .{ .compat = &[_]u21{ 0x30DC, 0x30EB, 0x30C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8c, 0xbf }, .{ .compat = &[_]u21{ 0x30DB, 0x30F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x80 }, .{ .compat = &[_]u21{ 0x30DD, 0x30F3, 0x30C9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x81 }, .{ .compat = &[_]u21{ 0x30DB, 0x30FC, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x82 }, .{ .compat = &[_]u21{ 0x30DB, 0x30FC, 0x30F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x83 }, .{ .compat = &[_]u21{ 0x30DE, 0x30A4, 0x30AF, 0x30ED } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x84 }, .{ .compat = &[_]u21{ 0x30DE, 0x30A4, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x85 }, .{ .compat = &[_]u21{ 0x30DE, 0x30C3, 0x30CF } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x86 }, .{ .compat = &[_]u21{ 0x30DE, 0x30EB, 0x30AF } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x87 }, .{ .compat = &[_]u21{ 0x30DE, 0x30F3, 0x30B7, 0x30E7, 0x30F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x88 }, .{ .compat = &[_]u21{ 0x30DF, 0x30AF, 0x30ED, 0x30F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x89 }, .{ .compat = &[_]u21{ 0x30DF, 0x30EA } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x8a }, .{ .compat = &[_]u21{ 0x30DF, 0x30EA, 0x30D0, 0x30FC, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x8b }, .{ .compat = &[_]u21{ 0x30E1, 0x30AC } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x8c }, .{ .compat = &[_]u21{ 0x30E1, 0x30AC, 0x30C8, 0x30F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x8d }, .{ .compat = &[_]u21{ 0x30E1, 0x30FC, 0x30C8, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x8e }, .{ .compat = &[_]u21{ 0x30E4, 0x30FC, 0x30C9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x8f }, .{ .compat = &[_]u21{ 0x30E4, 0x30FC, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x90 }, .{ .compat = &[_]u21{ 0x30E6, 0x30A2, 0x30F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x91 }, .{ .compat = &[_]u21{ 0x30EA, 0x30C3, 0x30C8, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x92 }, .{ .compat = &[_]u21{ 0x30EA, 0x30E9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x93 }, .{ .compat = &[_]u21{ 0x30EB, 0x30D4, 0x30FC } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x94 }, .{ .compat = &[_]u21{ 0x30EB, 0x30FC, 0x30D6, 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x95 }, .{ .compat = &[_]u21{ 0x30EC, 0x30E0 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x96 }, .{ .compat = &[_]u21{ 0x30EC, 0x30F3, 0x30C8, 0x30B2, 0x30F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x97 }, .{ .compat = &[_]u21{ 0x30EF, 0x30C3, 0x30C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x98 }, .{ .compat = &[_]u21{ 0x0030, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x99 }, .{ .compat = &[_]u21{ 0x0031, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x9a }, .{ .compat = &[_]u21{ 0x0032, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x9b }, .{ .compat = &[_]u21{ 0x0033, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x9c }, .{ .compat = &[_]u21{ 0x0034, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x9d }, .{ .compat = &[_]u21{ 0x0035, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x9e }, .{ .compat = &[_]u21{ 0x0036, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0x9f }, .{ .compat = &[_]u21{ 0x0037, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xa0 }, .{ .compat = &[_]u21{ 0x0038, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xa1 }, .{ .compat = &[_]u21{ 0x0039, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xa2 }, .{ .compat = &[_]u21{ 0x0031, 0x0030, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xa3 }, .{ .compat = &[_]u21{ 0x0031, 0x0031, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xa4 }, .{ .compat = &[_]u21{ 0x0031, 0x0032, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xa5 }, .{ .compat = &[_]u21{ 0x0031, 0x0033, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xa6 }, .{ .compat = &[_]u21{ 0x0031, 0x0034, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xa7 }, .{ .compat = &[_]u21{ 0x0031, 0x0035, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xa8 }, .{ .compat = &[_]u21{ 0x0031, 0x0036, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xa9 }, .{ .compat = &[_]u21{ 0x0031, 0x0037, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xaa }, .{ .compat = &[_]u21{ 0x0031, 0x0038, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xab }, .{ .compat = &[_]u21{ 0x0031, 0x0039, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xac }, .{ .compat = &[_]u21{ 0x0032, 0x0030, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xad }, .{ .compat = &[_]u21{ 0x0032, 0x0031, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xae }, .{ .compat = &[_]u21{ 0x0032, 0x0032, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xaf }, .{ .compat = &[_]u21{ 0x0032, 0x0033, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xb0 }, .{ .compat = &[_]u21{ 0x0032, 0x0034, 0x70B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xb1 }, .{ .compat = &[_]u21{ 0x0068, 0x0050, 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xb2 }, .{ .compat = &[_]u21{ 0x0064, 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xb3 }, .{ .compat = &[_]u21{ 0x0041, 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xb4 }, .{ .compat = &[_]u21{ 0x0062, 0x0061, 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xb5 }, .{ .compat = &[_]u21{ 0x006F, 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xb6 }, .{ .compat = &[_]u21{ 0x0070, 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xb7 }, .{ .compat = &[_]u21{ 0x0064, 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xb8 }, .{ .compat = &[_]u21{ 0x0064, 0x006D, 0x00B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xb9 }, .{ .compat = &[_]u21{ 0x0064, 0x006D, 0x00B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xba }, .{ .compat = &[_]u21{ 0x0049, 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xbb }, .{ .compat = &[_]u21{ 0x5E73, 0x6210 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xbc }, .{ .compat = &[_]u21{ 0x662D, 0x548C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xbd }, .{ .compat = &[_]u21{ 0x5927, 0x6B63 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xbe }, .{ .compat = &[_]u21{ 0x660E, 0x6CBB } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8d, 0xbf }, .{ .compat = &[_]u21{ 0x682A, 0x5F0F, 0x4F1A, 0x793E } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x80 }, .{ .compat = &[_]u21{ 0x0070, 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x81 }, .{ .compat = &[_]u21{ 0x006E, 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x82 }, .{ .compat = &[_]u21{ 0x03BC, 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x83 }, .{ .compat = &[_]u21{ 0x006D, 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x84 }, .{ .compat = &[_]u21{ 0x006B, 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x85 }, .{ .compat = &[_]u21{ 0x004B, 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x86 }, .{ .compat = &[_]u21{ 0x004D, 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x87 }, .{ .compat = &[_]u21{ 0x0047, 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x88 }, .{ .compat = &[_]u21{ 0x0063, 0x0061, 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x89 }, .{ .compat = &[_]u21{ 0x006B, 0x0063, 0x0061, 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x8a }, .{ .compat = &[_]u21{ 0x0070, 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x8b }, .{ .compat = &[_]u21{ 0x006E, 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x8c }, .{ .compat = &[_]u21{ 0x03BC, 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x8d }, .{ .compat = &[_]u21{ 0x03BC, 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x8e }, .{ .compat = &[_]u21{ 0x006D, 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x8f }, .{ .compat = &[_]u21{ 0x006B, 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x90 }, .{ .compat = &[_]u21{ 0x0048, 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x91 }, .{ .compat = &[_]u21{ 0x006B, 0x0048, 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x92 }, .{ .compat = &[_]u21{ 0x004D, 0x0048, 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x93 }, .{ .compat = &[_]u21{ 0x0047, 0x0048, 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x94 }, .{ .compat = &[_]u21{ 0x0054, 0x0048, 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x95 }, .{ .compat = &[_]u21{ 0x03BC, 0x2113 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x96 }, .{ .compat = &[_]u21{ 0x006D, 0x2113 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x97 }, .{ .compat = &[_]u21{ 0x0064, 0x2113 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x98 }, .{ .compat = &[_]u21{ 0x006B, 0x2113 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x99 }, .{ .compat = &[_]u21{ 0x0066, 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x9a }, .{ .compat = &[_]u21{ 0x006E, 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x9b }, .{ .compat = &[_]u21{ 0x03BC, 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x9c }, .{ .compat = &[_]u21{ 0x006D, 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x9d }, .{ .compat = &[_]u21{ 0x0063, 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x9e }, .{ .compat = &[_]u21{ 0x006B, 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0x9f }, .{ .compat = &[_]u21{ 0x006D, 0x006D, 0x00B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xa0 }, .{ .compat = &[_]u21{ 0x0063, 0x006D, 0x00B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xa1 }, .{ .compat = &[_]u21{ 0x006D, 0x00B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xa2 }, .{ .compat = &[_]u21{ 0x006B, 0x006D, 0x00B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xa3 }, .{ .compat = &[_]u21{ 0x006D, 0x006D, 0x00B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xa4 }, .{ .compat = &[_]u21{ 0x0063, 0x006D, 0x00B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xa5 }, .{ .compat = &[_]u21{ 0x006D, 0x00B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xa6 }, .{ .compat = &[_]u21{ 0x006B, 0x006D, 0x00B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xa7 }, .{ .compat = &[_]u21{ 0x006D, 0x2215, 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xa8 }, .{ .compat = &[_]u21{ 0x006D, 0x2215, 0x0073, 0x00B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xa9 }, .{ .compat = &[_]u21{ 0x0050, 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xaa }, .{ .compat = &[_]u21{ 0x006B, 0x0050, 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xab }, .{ .compat = &[_]u21{ 0x004D, 0x0050, 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xac }, .{ .compat = &[_]u21{ 0x0047, 0x0050, 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xad }, .{ .compat = &[_]u21{ 0x0072, 0x0061, 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xae }, .{ .compat = &[_]u21{ 0x0072, 0x0061, 0x0064, 0x2215, 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xaf }, .{ .compat = &[_]u21{ 0x0072, 0x0061, 0x0064, 0x2215, 0x0073, 0x00B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xb0 }, .{ .compat = &[_]u21{ 0x0070, 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xb1 }, .{ .compat = &[_]u21{ 0x006E, 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xb2 }, .{ .compat = &[_]u21{ 0x03BC, 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xb3 }, .{ .compat = &[_]u21{ 0x006D, 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xb4 }, .{ .compat = &[_]u21{ 0x0070, 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xb5 }, .{ .compat = &[_]u21{ 0x006E, 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xb6 }, .{ .compat = &[_]u21{ 0x03BC, 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xb7 }, .{ .compat = &[_]u21{ 0x006D, 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xb8 }, .{ .compat = &[_]u21{ 0x006B, 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xb9 }, .{ .compat = &[_]u21{ 0x004D, 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xba }, .{ .compat = &[_]u21{ 0x0070, 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xbb }, .{ .compat = &[_]u21{ 0x006E, 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xbc }, .{ .compat = &[_]u21{ 0x03BC, 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xbd }, .{ .compat = &[_]u21{ 0x006D, 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xbe }, .{ .compat = &[_]u21{ 0x006B, 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8e, 0xbf }, .{ .compat = &[_]u21{ 0x004D, 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x80 }, .{ .compat = &[_]u21{ 0x006B, 0x03A9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x81 }, .{ .compat = &[_]u21{ 0x004D, 0x03A9 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x82 }, .{ .compat = &[_]u21{ 0x0061, 0x002E, 0x006D, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x83 }, .{ .compat = &[_]u21{ 0x0042, 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x84 }, .{ .compat = &[_]u21{ 0x0063, 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x85 }, .{ .compat = &[_]u21{ 0x0063, 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x86 }, .{ .compat = &[_]u21{ 0x0043, 0x2215, 0x006B, 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x87 }, .{ .compat = &[_]u21{ 0x0043, 0x006F, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x88 }, .{ .compat = &[_]u21{ 0x0064, 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x89 }, .{ .compat = &[_]u21{ 0x0047, 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x8a }, .{ .compat = &[_]u21{ 0x0068, 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x8b }, .{ .compat = &[_]u21{ 0x0048, 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x8c }, .{ .compat = &[_]u21{ 0x0069, 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x8d }, .{ .compat = &[_]u21{ 0x004B, 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x8e }, .{ .compat = &[_]u21{ 0x004B, 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x8f }, .{ .compat = &[_]u21{ 0x006B, 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x90 }, .{ .compat = &[_]u21{ 0x006C, 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x91 }, .{ .compat = &[_]u21{ 0x006C, 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x92 }, .{ .compat = &[_]u21{ 0x006C, 0x006F, 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x93 }, .{ .compat = &[_]u21{ 0x006C, 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x94 }, .{ .compat = &[_]u21{ 0x006D, 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x95 }, .{ .compat = &[_]u21{ 0x006D, 0x0069, 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x96 }, .{ .compat = &[_]u21{ 0x006D, 0x006F, 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x97 }, .{ .compat = &[_]u21{ 0x0050, 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x98 }, .{ .compat = &[_]u21{ 0x0070, 0x002E, 0x006D, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x99 }, .{ .compat = &[_]u21{ 0x0050, 0x0050, 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x9a }, .{ .compat = &[_]u21{ 0x0050, 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x9b }, .{ .compat = &[_]u21{ 0x0073, 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x9c }, .{ .compat = &[_]u21{ 0x0053, 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x9d }, .{ .compat = &[_]u21{ 0x0057, 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x9e }, .{ .compat = &[_]u21{ 0x0056, 0x2215, 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0x9f }, .{ .compat = &[_]u21{ 0x0041, 0x2215, 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xa0 }, .{ .compat = &[_]u21{ 0x0031, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xa1 }, .{ .compat = &[_]u21{ 0x0032, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xa2 }, .{ .compat = &[_]u21{ 0x0033, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xa3 }, .{ .compat = &[_]u21{ 0x0034, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xa4 }, .{ .compat = &[_]u21{ 0x0035, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xa5 }, .{ .compat = &[_]u21{ 0x0036, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xa6 }, .{ .compat = &[_]u21{ 0x0037, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xa7 }, .{ .compat = &[_]u21{ 0x0038, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xa8 }, .{ .compat = &[_]u21{ 0x0039, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xa9 }, .{ .compat = &[_]u21{ 0x0031, 0x0030, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xaa }, .{ .compat = &[_]u21{ 0x0031, 0x0031, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xab }, .{ .compat = &[_]u21{ 0x0031, 0x0032, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xac }, .{ .compat = &[_]u21{ 0x0031, 0x0033, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xad }, .{ .compat = &[_]u21{ 0x0031, 0x0034, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xae }, .{ .compat = &[_]u21{ 0x0031, 0x0035, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xaf }, .{ .compat = &[_]u21{ 0x0031, 0x0036, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xb0 }, .{ .compat = &[_]u21{ 0x0031, 0x0037, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xb1 }, .{ .compat = &[_]u21{ 0x0031, 0x0038, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xb2 }, .{ .compat = &[_]u21{ 0x0031, 0x0039, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xb3 }, .{ .compat = &[_]u21{ 0x0032, 0x0030, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xb4 }, .{ .compat = &[_]u21{ 0x0032, 0x0031, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xb5 }, .{ .compat = &[_]u21{ 0x0032, 0x0032, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xb6 }, .{ .compat = &[_]u21{ 0x0032, 0x0033, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xb7 }, .{ .compat = &[_]u21{ 0x0032, 0x0034, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xb8 }, .{ .compat = &[_]u21{ 0x0032, 0x0035, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xb9 }, .{ .compat = &[_]u21{ 0x0032, 0x0036, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xba }, .{ .compat = &[_]u21{ 0x0032, 0x0037, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xbb }, .{ .compat = &[_]u21{ 0x0032, 0x0038, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xbc }, .{ .compat = &[_]u21{ 0x0032, 0x0039, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xbd }, .{ .compat = &[_]u21{ 0x0033, 0x0030, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xbe }, .{ .compat = &[_]u21{ 0x0033, 0x0031, 0x65E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xe3, 0x8f, 0xbf }, .{ .compat = &[_]u21{ 0x0067, 0x0061, 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xea, 0x9a, 0x9c }, .{ .compat = &[_]u21{ 0x044A } });
    try self.decomp_trie.add(&[_]u8{ 0xea, 0x9a, 0x9d }, .{ .compat = &[_]u21{ 0x044C } });
    try self.decomp_trie.add(&[_]u8{ 0xea, 0x9d, 0xb0 }, .{ .compat = &[_]u21{ 0xA76F } });
    try self.decomp_trie.add(&[_]u8{ 0xea, 0x9f, 0xb8 }, .{ .compat = &[_]u21{ 0x0126 } });
    try self.decomp_trie.add(&[_]u8{ 0xea, 0x9f, 0xb9 }, .{ .compat = &[_]u21{ 0x0153 } });
    try self.decomp_trie.add(&[_]u8{ 0xea, 0xad, 0x9c }, .{ .compat = &[_]u21{ 0xA727 } });
    try self.decomp_trie.add(&[_]u8{ 0xea, 0xad, 0x9d }, .{ .compat = &[_]u21{ 0xAB37 } });
    try self.decomp_trie.add(&[_]u8{ 0xea, 0xad, 0x9e }, .{ .compat = &[_]u21{ 0x026B } });
    try self.decomp_trie.add(&[_]u8{ 0xea, 0xad, 0x9f }, .{ .compat = &[_]u21{ 0xAB52 } });
    try self.decomp_trie.add(&[_]u8{ 0xea, 0xad, 0xa9 }, .{ .compat = &[_]u21{ 0x028D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x80 }, .{ .single = 0x8C48 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x81 }, .{ .single = 0x66F4 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x82 }, .{ .single = 0x8ECA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x83 }, .{ .single = 0x8CC8 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x84 }, .{ .single = 0x6ED1 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x85 }, .{ .single = 0x4E32 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x86 }, .{ .single = 0x53E5 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x87 }, .{ .single = 0x9F9C });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x88 }, .{ .single = 0x9F9C });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x89 }, .{ .single = 0x5951 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x8a }, .{ .single = 0x91D1 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x8b }, .{ .single = 0x5587 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x8c }, .{ .single = 0x5948 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x8d }, .{ .single = 0x61F6 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x8e }, .{ .single = 0x7669 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x8f }, .{ .single = 0x7F85 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x90 }, .{ .single = 0x863F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x91 }, .{ .single = 0x87BA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x92 }, .{ .single = 0x88F8 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x93 }, .{ .single = 0x908F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x94 }, .{ .single = 0x6A02 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x95 }, .{ .single = 0x6D1B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x96 }, .{ .single = 0x70D9 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x97 }, .{ .single = 0x73DE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x98 }, .{ .single = 0x843D });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x99 }, .{ .single = 0x916A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x9a }, .{ .single = 0x99F1 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x9b }, .{ .single = 0x4E82 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x9c }, .{ .single = 0x5375 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x9d }, .{ .single = 0x6B04 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x9e }, .{ .single = 0x721B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0x9f }, .{ .single = 0x862D });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xa0 }, .{ .single = 0x9E1E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xa1 }, .{ .single = 0x5D50 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xa2 }, .{ .single = 0x6FEB });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xa3 }, .{ .single = 0x85CD });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xa4 }, .{ .single = 0x8964 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xa5 }, .{ .single = 0x62C9 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xa6 }, .{ .single = 0x81D8 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xa7 }, .{ .single = 0x881F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xa8 }, .{ .single = 0x5ECA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xa9 }, .{ .single = 0x6717 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xaa }, .{ .single = 0x6D6A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xab }, .{ .single = 0x72FC });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xac }, .{ .single = 0x90CE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xad }, .{ .single = 0x4F86 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xae }, .{ .single = 0x51B7 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xaf }, .{ .single = 0x52DE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xb0 }, .{ .single = 0x64C4 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xb1 }, .{ .single = 0x6AD3 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xb2 }, .{ .single = 0x7210 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xb3 }, .{ .single = 0x76E7 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xb4 }, .{ .single = 0x8001 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xb5 }, .{ .single = 0x8606 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xb6 }, .{ .single = 0x865C });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xb7 }, .{ .single = 0x8DEF });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xb8 }, .{ .single = 0x9732 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xb9 }, .{ .single = 0x9B6F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xba }, .{ .single = 0x9DFA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xbb }, .{ .single = 0x788C });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xbc }, .{ .single = 0x797F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xbd }, .{ .single = 0x7DA0 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xbe }, .{ .single = 0x83C9 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa4, 0xbf }, .{ .single = 0x9304 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x80 }, .{ .single = 0x9E7F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x81 }, .{ .single = 0x8AD6 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x82 }, .{ .single = 0x58DF });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x83 }, .{ .single = 0x5F04 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x84 }, .{ .single = 0x7C60 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x85 }, .{ .single = 0x807E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x86 }, .{ .single = 0x7262 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x87 }, .{ .single = 0x78CA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x88 }, .{ .single = 0x8CC2 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x89 }, .{ .single = 0x96F7 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x8a }, .{ .single = 0x58D8 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x8b }, .{ .single = 0x5C62 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x8c }, .{ .single = 0x6A13 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x8d }, .{ .single = 0x6DDA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x8e }, .{ .single = 0x6F0F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x8f }, .{ .single = 0x7D2F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x90 }, .{ .single = 0x7E37 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x91 }, .{ .single = 0x964B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x92 }, .{ .single = 0x52D2 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x93 }, .{ .single = 0x808B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x94 }, .{ .single = 0x51DC });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x95 }, .{ .single = 0x51CC });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x96 }, .{ .single = 0x7A1C });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x97 }, .{ .single = 0x7DBE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x98 }, .{ .single = 0x83F1 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x99 }, .{ .single = 0x9675 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x9a }, .{ .single = 0x8B80 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x9b }, .{ .single = 0x62CF });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x9c }, .{ .single = 0x6A02 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x9d }, .{ .single = 0x8AFE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x9e }, .{ .single = 0x4E39 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0x9f }, .{ .single = 0x5BE7 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xa0 }, .{ .single = 0x6012 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xa1 }, .{ .single = 0x7387 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xa2 }, .{ .single = 0x7570 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xa3 }, .{ .single = 0x5317 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xa4 }, .{ .single = 0x78FB });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xa5 }, .{ .single = 0x4FBF });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xa6 }, .{ .single = 0x5FA9 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xa7 }, .{ .single = 0x4E0D });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xa8 }, .{ .single = 0x6CCC });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xa9 }, .{ .single = 0x6578 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xaa }, .{ .single = 0x7D22 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xab }, .{ .single = 0x53C3 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xac }, .{ .single = 0x585E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xad }, .{ .single = 0x7701 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xae }, .{ .single = 0x8449 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xaf }, .{ .single = 0x8AAA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xb0 }, .{ .single = 0x6BBA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xb1 }, .{ .single = 0x8FB0 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xb2 }, .{ .single = 0x6C88 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xb3 }, .{ .single = 0x62FE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xb4 }, .{ .single = 0x82E5 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xb5 }, .{ .single = 0x63A0 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xb6 }, .{ .single = 0x7565 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xb7 }, .{ .single = 0x4EAE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xb8 }, .{ .single = 0x5169 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xb9 }, .{ .single = 0x51C9 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xba }, .{ .single = 0x6881 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xbb }, .{ .single = 0x7CE7 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xbc }, .{ .single = 0x826F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xbd }, .{ .single = 0x8AD2 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xbe }, .{ .single = 0x91CF });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa5, 0xbf }, .{ .single = 0x52F5 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x80 }, .{ .single = 0x5442 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x81 }, .{ .single = 0x5973 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x82 }, .{ .single = 0x5EEC });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x83 }, .{ .single = 0x65C5 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x84 }, .{ .single = 0x6FFE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x85 }, .{ .single = 0x792A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x86 }, .{ .single = 0x95AD });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x87 }, .{ .single = 0x9A6A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x88 }, .{ .single = 0x9E97 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x89 }, .{ .single = 0x9ECE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x8a }, .{ .single = 0x529B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x8b }, .{ .single = 0x66C6 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x8c }, .{ .single = 0x6B77 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x8d }, .{ .single = 0x8F62 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x8e }, .{ .single = 0x5E74 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x8f }, .{ .single = 0x6190 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x90 }, .{ .single = 0x6200 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x91 }, .{ .single = 0x649A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x92 }, .{ .single = 0x6F23 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x93 }, .{ .single = 0x7149 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x94 }, .{ .single = 0x7489 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x95 }, .{ .single = 0x79CA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x96 }, .{ .single = 0x7DF4 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x97 }, .{ .single = 0x806F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x98 }, .{ .single = 0x8F26 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x99 }, .{ .single = 0x84EE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x9a }, .{ .single = 0x9023 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x9b }, .{ .single = 0x934A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x9c }, .{ .single = 0x5217 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x9d }, .{ .single = 0x52A3 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x9e }, .{ .single = 0x54BD });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0x9f }, .{ .single = 0x70C8 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xa0 }, .{ .single = 0x88C2 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xa1 }, .{ .single = 0x8AAA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xa2 }, .{ .single = 0x5EC9 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xa3 }, .{ .single = 0x5FF5 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xa4 }, .{ .single = 0x637B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xa5 }, .{ .single = 0x6BAE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xa6 }, .{ .single = 0x7C3E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xa7 }, .{ .single = 0x7375 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xa8 }, .{ .single = 0x4EE4 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xa9 }, .{ .single = 0x56F9 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xaa }, .{ .single = 0x5BE7 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xab }, .{ .single = 0x5DBA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xac }, .{ .single = 0x601C });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xad }, .{ .single = 0x73B2 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xae }, .{ .single = 0x7469 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xaf }, .{ .single = 0x7F9A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xb0 }, .{ .single = 0x8046 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xb1 }, .{ .single = 0x9234 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xb2 }, .{ .single = 0x96F6 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xb3 }, .{ .single = 0x9748 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xb4 }, .{ .single = 0x9818 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xb5 }, .{ .single = 0x4F8B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xb6 }, .{ .single = 0x79AE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xb7 }, .{ .single = 0x91B4 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xb8 }, .{ .single = 0x96B8 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xb9 }, .{ .single = 0x60E1 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xba }, .{ .single = 0x4E86 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xbb }, .{ .single = 0x50DA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xbc }, .{ .single = 0x5BEE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xbd }, .{ .single = 0x5C3F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xbe }, .{ .single = 0x6599 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa6, 0xbf }, .{ .single = 0x6A02 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x80 }, .{ .single = 0x71CE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x81 }, .{ .single = 0x7642 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x82 }, .{ .single = 0x84FC });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x83 }, .{ .single = 0x907C });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x84 }, .{ .single = 0x9F8D });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x85 }, .{ .single = 0x6688 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x86 }, .{ .single = 0x962E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x87 }, .{ .single = 0x5289 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x88 }, .{ .single = 0x677B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x89 }, .{ .single = 0x67F3 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x8a }, .{ .single = 0x6D41 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x8b }, .{ .single = 0x6E9C });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x8c }, .{ .single = 0x7409 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x8d }, .{ .single = 0x7559 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x8e }, .{ .single = 0x786B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x8f }, .{ .single = 0x7D10 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x90 }, .{ .single = 0x985E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x91 }, .{ .single = 0x516D });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x92 }, .{ .single = 0x622E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x93 }, .{ .single = 0x9678 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x94 }, .{ .single = 0x502B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x95 }, .{ .single = 0x5D19 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x96 }, .{ .single = 0x6DEA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x97 }, .{ .single = 0x8F2A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x98 }, .{ .single = 0x5F8B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x99 }, .{ .single = 0x6144 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x9a }, .{ .single = 0x6817 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x9b }, .{ .single = 0x7387 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x9c }, .{ .single = 0x9686 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x9d }, .{ .single = 0x5229 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x9e }, .{ .single = 0x540F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0x9f }, .{ .single = 0x5C65 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xa0 }, .{ .single = 0x6613 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xa1 }, .{ .single = 0x674E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xa2 }, .{ .single = 0x68A8 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xa3 }, .{ .single = 0x6CE5 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xa4 }, .{ .single = 0x7406 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xa5 }, .{ .single = 0x75E2 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xa6 }, .{ .single = 0x7F79 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xa7 }, .{ .single = 0x88CF });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xa8 }, .{ .single = 0x88E1 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xa9 }, .{ .single = 0x91CC });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xaa }, .{ .single = 0x96E2 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xab }, .{ .single = 0x533F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xac }, .{ .single = 0x6EBA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xad }, .{ .single = 0x541D });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xae }, .{ .single = 0x71D0 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xaf }, .{ .single = 0x7498 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xb0 }, .{ .single = 0x85FA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xb1 }, .{ .single = 0x96A3 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xb2 }, .{ .single = 0x9C57 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xb3 }, .{ .single = 0x9E9F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xb4 }, .{ .single = 0x6797 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xb5 }, .{ .single = 0x6DCB });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xb6 }, .{ .single = 0x81E8 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xb7 }, .{ .single = 0x7ACB });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xb8 }, .{ .single = 0x7B20 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xb9 }, .{ .single = 0x7C92 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xba }, .{ .single = 0x72C0 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xbb }, .{ .single = 0x7099 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xbc }, .{ .single = 0x8B58 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xbd }, .{ .single = 0x4EC0 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xbe }, .{ .single = 0x8336 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa7, 0xbf }, .{ .single = 0x523A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x80 }, .{ .single = 0x5207 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x81 }, .{ .single = 0x5EA6 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x82 }, .{ .single = 0x62D3 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x83 }, .{ .single = 0x7CD6 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x84 }, .{ .single = 0x5B85 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x85 }, .{ .single = 0x6D1E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x86 }, .{ .single = 0x66B4 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x87 }, .{ .single = 0x8F3B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x88 }, .{ .single = 0x884C });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x89 }, .{ .single = 0x964D });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x8a }, .{ .single = 0x898B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x8b }, .{ .single = 0x5ED3 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x8c }, .{ .single = 0x5140 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x8d }, .{ .single = 0x55C0 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x90 }, .{ .single = 0x585A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x92 }, .{ .single = 0x6674 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x95 }, .{ .single = 0x51DE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x96 }, .{ .single = 0x732A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x97 }, .{ .single = 0x76CA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x98 }, .{ .single = 0x793C });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x99 }, .{ .single = 0x795E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x9a }, .{ .single = 0x7965 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x9b }, .{ .single = 0x798F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x9c }, .{ .single = 0x9756 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x9d }, .{ .single = 0x7CBE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0x9e }, .{ .single = 0x7FBD });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xa0 }, .{ .single = 0x8612 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xa2 }, .{ .single = 0x8AF8 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xa5 }, .{ .single = 0x9038 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xa6 }, .{ .single = 0x90FD });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xaa }, .{ .single = 0x98EF });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xab }, .{ .single = 0x98FC });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xac }, .{ .single = 0x9928 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xad }, .{ .single = 0x9DB4 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xae }, .{ .single = 0x90DE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xaf }, .{ .single = 0x96B7 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xb0 }, .{ .single = 0x4FAE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xb1 }, .{ .single = 0x50E7 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xb2 }, .{ .single = 0x514D });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xb3 }, .{ .single = 0x52C9 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xb4 }, .{ .single = 0x52E4 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xb5 }, .{ .single = 0x5351 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xb6 }, .{ .single = 0x559D });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xb7 }, .{ .single = 0x5606 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xb8 }, .{ .single = 0x5668 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xb9 }, .{ .single = 0x5840 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xba }, .{ .single = 0x58A8 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xbb }, .{ .single = 0x5C64 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xbc }, .{ .single = 0x5C6E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xbd }, .{ .single = 0x6094 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xbe }, .{ .single = 0x6168 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa8, 0xbf }, .{ .single = 0x618E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x80 }, .{ .single = 0x61F2 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x81 }, .{ .single = 0x654F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x82 }, .{ .single = 0x65E2 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x83 }, .{ .single = 0x6691 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x84 }, .{ .single = 0x6885 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x85 }, .{ .single = 0x6D77 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x86 }, .{ .single = 0x6E1A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x87 }, .{ .single = 0x6F22 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x88 }, .{ .single = 0x716E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x89 }, .{ .single = 0x722B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x8a }, .{ .single = 0x7422 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x8b }, .{ .single = 0x7891 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x8c }, .{ .single = 0x793E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x8d }, .{ .single = 0x7949 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x8e }, .{ .single = 0x7948 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x8f }, .{ .single = 0x7950 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x90 }, .{ .single = 0x7956 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x91 }, .{ .single = 0x795D });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x92 }, .{ .single = 0x798D });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x93 }, .{ .single = 0x798E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x94 }, .{ .single = 0x7A40 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x95 }, .{ .single = 0x7A81 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x96 }, .{ .single = 0x7BC0 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x97 }, .{ .single = 0x7DF4 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x98 }, .{ .single = 0x7E09 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x99 }, .{ .single = 0x7E41 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x9a }, .{ .single = 0x7F72 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x9b }, .{ .single = 0x8005 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x9c }, .{ .single = 0x81ED });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x9d }, .{ .single = 0x8279 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x9e }, .{ .single = 0x8279 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0x9f }, .{ .single = 0x8457 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xa0 }, .{ .single = 0x8910 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xa1 }, .{ .single = 0x8996 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xa2 }, .{ .single = 0x8B01 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xa3 }, .{ .single = 0x8B39 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xa4 }, .{ .single = 0x8CD3 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xa5 }, .{ .single = 0x8D08 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xa6 }, .{ .single = 0x8FB6 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xa7 }, .{ .single = 0x9038 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xa8 }, .{ .single = 0x96E3 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xa9 }, .{ .single = 0x97FF });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xaa }, .{ .single = 0x983B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xab }, .{ .single = 0x6075 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xac }, .{ .single = 0x242EE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xad }, .{ .single = 0x8218 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xb0 }, .{ .single = 0x4E26 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xb1 }, .{ .single = 0x51B5 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xb2 }, .{ .single = 0x5168 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xb3 }, .{ .single = 0x4F80 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xb4 }, .{ .single = 0x5145 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xb5 }, .{ .single = 0x5180 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xb6 }, .{ .single = 0x52C7 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xb7 }, .{ .single = 0x52FA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xb8 }, .{ .single = 0x559D });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xb9 }, .{ .single = 0x5555 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xba }, .{ .single = 0x5599 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xbb }, .{ .single = 0x55E2 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xbc }, .{ .single = 0x585A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xbd }, .{ .single = 0x58B3 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xbe }, .{ .single = 0x5944 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xa9, 0xbf }, .{ .single = 0x5954 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x80 }, .{ .single = 0x5A62 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x81 }, .{ .single = 0x5B28 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x82 }, .{ .single = 0x5ED2 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x83 }, .{ .single = 0x5ED9 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x84 }, .{ .single = 0x5F69 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x85 }, .{ .single = 0x5FAD });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x86 }, .{ .single = 0x60D8 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x87 }, .{ .single = 0x614E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x88 }, .{ .single = 0x6108 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x89 }, .{ .single = 0x618E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x8a }, .{ .single = 0x6160 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x8b }, .{ .single = 0x61F2 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x8c }, .{ .single = 0x6234 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x8d }, .{ .single = 0x63C4 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x8e }, .{ .single = 0x641C });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x8f }, .{ .single = 0x6452 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x90 }, .{ .single = 0x6556 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x91 }, .{ .single = 0x6674 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x92 }, .{ .single = 0x6717 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x93 }, .{ .single = 0x671B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x94 }, .{ .single = 0x6756 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x95 }, .{ .single = 0x6B79 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x96 }, .{ .single = 0x6BBA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x97 }, .{ .single = 0x6D41 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x98 }, .{ .single = 0x6EDB });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x99 }, .{ .single = 0x6ECB });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x9a }, .{ .single = 0x6F22 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x9b }, .{ .single = 0x701E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x9c }, .{ .single = 0x716E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x9d }, .{ .single = 0x77A7 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x9e }, .{ .single = 0x7235 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0x9f }, .{ .single = 0x72AF });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xa0 }, .{ .single = 0x732A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xa1 }, .{ .single = 0x7471 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xa2 }, .{ .single = 0x7506 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xa3 }, .{ .single = 0x753B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xa4 }, .{ .single = 0x761D });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xa5 }, .{ .single = 0x761F });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xa6 }, .{ .single = 0x76CA });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xa7 }, .{ .single = 0x76DB });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xa8 }, .{ .single = 0x76F4 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xa9 }, .{ .single = 0x774A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xaa }, .{ .single = 0x7740 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xab }, .{ .single = 0x78CC });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xac }, .{ .single = 0x7AB1 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xad }, .{ .single = 0x7BC0 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xae }, .{ .single = 0x7C7B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xaf }, .{ .single = 0x7D5B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xb0 }, .{ .single = 0x7DF4 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xb1 }, .{ .single = 0x7F3E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xb2 }, .{ .single = 0x8005 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xb3 }, .{ .single = 0x8352 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xb4 }, .{ .single = 0x83EF });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xb5 }, .{ .single = 0x8779 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xb6 }, .{ .single = 0x8941 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xb7 }, .{ .single = 0x8986 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xb8 }, .{ .single = 0x8996 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xb9 }, .{ .single = 0x8ABF });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xba }, .{ .single = 0x8AF8 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xbb }, .{ .single = 0x8ACB });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xbc }, .{ .single = 0x8B01 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xbd }, .{ .single = 0x8AFE });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xbe }, .{ .single = 0x8AED });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaa, 0xbf }, .{ .single = 0x8B39 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x80 }, .{ .single = 0x8B8A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x81 }, .{ .single = 0x8D08 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x82 }, .{ .single = 0x8F38 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x83 }, .{ .single = 0x9072 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x84 }, .{ .single = 0x9199 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x85 }, .{ .single = 0x9276 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x86 }, .{ .single = 0x967C });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x87 }, .{ .single = 0x96E3 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x88 }, .{ .single = 0x9756 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x89 }, .{ .single = 0x97DB });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x8a }, .{ .single = 0x97FF });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x8b }, .{ .single = 0x980B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x8c }, .{ .single = 0x983B });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x8d }, .{ .single = 0x9B12 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x8e }, .{ .single = 0x9F9C });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x8f }, .{ .single = 0x2284A });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x90 }, .{ .single = 0x22844 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x91 }, .{ .single = 0x233D5 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x92 }, .{ .single = 0x3B9D });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x93 }, .{ .single = 0x4018 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x94 }, .{ .single = 0x4039 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x95 }, .{ .single = 0x25249 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x96 }, .{ .single = 0x25CD0 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x97 }, .{ .single = 0x27ED3 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x98 }, .{ .single = 0x9F43 });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xab, 0x99 }, .{ .single = 0x9F8E });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0x80 }, .{ .compat = &[_]u21{ 0x0066, 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0x81 }, .{ .compat = &[_]u21{ 0x0066, 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0x82 }, .{ .compat = &[_]u21{ 0x0066, 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0x83 }, .{ .compat = &[_]u21{ 0x0066, 0x0066, 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0x84 }, .{ .compat = &[_]u21{ 0x0066, 0x0066, 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0x85 }, .{ .compat = &[_]u21{ 0x017F, 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0x86 }, .{ .compat = &[_]u21{ 0x0073, 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0x93 }, .{ .compat = &[_]u21{ 0x0574, 0x0576 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0x94 }, .{ .compat = &[_]u21{ 0x0574, 0x0565 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0x95 }, .{ .compat = &[_]u21{ 0x0574, 0x056B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0x96 }, .{ .compat = &[_]u21{ 0x057E, 0x0576 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0x97 }, .{ .compat = &[_]u21{ 0x0574, 0x056D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0x9d }, .{ .canon = [2]u21{ 0x05D9, 0x05B4 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0x9f }, .{ .canon = [2]u21{ 0x05F2, 0x05B7 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xa0 }, .{ .compat = &[_]u21{ 0x05E2 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xa1 }, .{ .compat = &[_]u21{ 0x05D0 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xa2 }, .{ .compat = &[_]u21{ 0x05D3 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xa3 }, .{ .compat = &[_]u21{ 0x05D4 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xa4 }, .{ .compat = &[_]u21{ 0x05DB } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xa5 }, .{ .compat = &[_]u21{ 0x05DC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xa6 }, .{ .compat = &[_]u21{ 0x05DD } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xa7 }, .{ .compat = &[_]u21{ 0x05E8 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xa8 }, .{ .compat = &[_]u21{ 0x05EA } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xa9 }, .{ .compat = &[_]u21{ 0x002B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xaa }, .{ .canon = [2]u21{ 0x05E9, 0x05C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xab }, .{ .canon = [2]u21{ 0x05E9, 0x05C2 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xac }, .{ .canon = [2]u21{ 0xFB49, 0x05C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xad }, .{ .canon = [2]u21{ 0xFB49, 0x05C2 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xae }, .{ .canon = [2]u21{ 0x05D0, 0x05B7 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xaf }, .{ .canon = [2]u21{ 0x05D0, 0x05B8 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xb0 }, .{ .canon = [2]u21{ 0x05D0, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xb1 }, .{ .canon = [2]u21{ 0x05D1, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xb2 }, .{ .canon = [2]u21{ 0x05D2, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xb3 }, .{ .canon = [2]u21{ 0x05D3, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xb4 }, .{ .canon = [2]u21{ 0x05D4, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xb5 }, .{ .canon = [2]u21{ 0x05D5, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xb6 }, .{ .canon = [2]u21{ 0x05D6, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xb8 }, .{ .canon = [2]u21{ 0x05D8, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xb9 }, .{ .canon = [2]u21{ 0x05D9, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xba }, .{ .canon = [2]u21{ 0x05DA, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xbb }, .{ .canon = [2]u21{ 0x05DB, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xbc }, .{ .canon = [2]u21{ 0x05DC, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xac, 0xbe }, .{ .canon = [2]u21{ 0x05DE, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x80 }, .{ .canon = [2]u21{ 0x05E0, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x81 }, .{ .canon = [2]u21{ 0x05E1, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x83 }, .{ .canon = [2]u21{ 0x05E3, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x84 }, .{ .canon = [2]u21{ 0x05E4, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x86 }, .{ .canon = [2]u21{ 0x05E6, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x87 }, .{ .canon = [2]u21{ 0x05E7, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x88 }, .{ .canon = [2]u21{ 0x05E8, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x89 }, .{ .canon = [2]u21{ 0x05E9, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x8a }, .{ .canon = [2]u21{ 0x05EA, 0x05BC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x8b }, .{ .canon = [2]u21{ 0x05D5, 0x05B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x8c }, .{ .canon = [2]u21{ 0x05D1, 0x05BF } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x8d }, .{ .canon = [2]u21{ 0x05DB, 0x05BF } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x8e }, .{ .canon = [2]u21{ 0x05E4, 0x05BF } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x8f }, .{ .compat = &[_]u21{ 0x05D0, 0x05DC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x90 }, .{ .compat = &[_]u21{ 0x0671 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x91 }, .{ .compat = &[_]u21{ 0x0671 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x92 }, .{ .compat = &[_]u21{ 0x067B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x93 }, .{ .compat = &[_]u21{ 0x067B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x94 }, .{ .compat = &[_]u21{ 0x067B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x95 }, .{ .compat = &[_]u21{ 0x067B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x96 }, .{ .compat = &[_]u21{ 0x067E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x97 }, .{ .compat = &[_]u21{ 0x067E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x98 }, .{ .compat = &[_]u21{ 0x067E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x99 }, .{ .compat = &[_]u21{ 0x067E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x9a }, .{ .compat = &[_]u21{ 0x0680 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x9b }, .{ .compat = &[_]u21{ 0x0680 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x9c }, .{ .compat = &[_]u21{ 0x0680 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x9d }, .{ .compat = &[_]u21{ 0x0680 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x9e }, .{ .compat = &[_]u21{ 0x067A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0x9f }, .{ .compat = &[_]u21{ 0x067A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xa0 }, .{ .compat = &[_]u21{ 0x067A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xa1 }, .{ .compat = &[_]u21{ 0x067A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xa2 }, .{ .compat = &[_]u21{ 0x067F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xa3 }, .{ .compat = &[_]u21{ 0x067F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xa4 }, .{ .compat = &[_]u21{ 0x067F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xa5 }, .{ .compat = &[_]u21{ 0x067F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xa6 }, .{ .compat = &[_]u21{ 0x0679 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xa7 }, .{ .compat = &[_]u21{ 0x0679 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xa8 }, .{ .compat = &[_]u21{ 0x0679 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xa9 }, .{ .compat = &[_]u21{ 0x0679 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xaa }, .{ .compat = &[_]u21{ 0x06A4 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xab }, .{ .compat = &[_]u21{ 0x06A4 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xac }, .{ .compat = &[_]u21{ 0x06A4 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xad }, .{ .compat = &[_]u21{ 0x06A4 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xae }, .{ .compat = &[_]u21{ 0x06A6 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xaf }, .{ .compat = &[_]u21{ 0x06A6 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xb0 }, .{ .compat = &[_]u21{ 0x06A6 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xb1 }, .{ .compat = &[_]u21{ 0x06A6 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xb2 }, .{ .compat = &[_]u21{ 0x0684 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xb3 }, .{ .compat = &[_]u21{ 0x0684 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xb4 }, .{ .compat = &[_]u21{ 0x0684 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xb5 }, .{ .compat = &[_]u21{ 0x0684 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xb6 }, .{ .compat = &[_]u21{ 0x0683 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xb7 }, .{ .compat = &[_]u21{ 0x0683 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xb8 }, .{ .compat = &[_]u21{ 0x0683 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xb9 }, .{ .compat = &[_]u21{ 0x0683 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xba }, .{ .compat = &[_]u21{ 0x0686 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xbb }, .{ .compat = &[_]u21{ 0x0686 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xbc }, .{ .compat = &[_]u21{ 0x0686 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xbd }, .{ .compat = &[_]u21{ 0x0686 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xbe }, .{ .compat = &[_]u21{ 0x0687 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xad, 0xbf }, .{ .compat = &[_]u21{ 0x0687 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x80 }, .{ .compat = &[_]u21{ 0x0687 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x81 }, .{ .compat = &[_]u21{ 0x0687 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x82 }, .{ .compat = &[_]u21{ 0x068D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x83 }, .{ .compat = &[_]u21{ 0x068D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x84 }, .{ .compat = &[_]u21{ 0x068C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x85 }, .{ .compat = &[_]u21{ 0x068C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x86 }, .{ .compat = &[_]u21{ 0x068E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x87 }, .{ .compat = &[_]u21{ 0x068E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x88 }, .{ .compat = &[_]u21{ 0x0688 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x89 }, .{ .compat = &[_]u21{ 0x0688 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x8a }, .{ .compat = &[_]u21{ 0x0698 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x8b }, .{ .compat = &[_]u21{ 0x0698 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x8c }, .{ .compat = &[_]u21{ 0x0691 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x8d }, .{ .compat = &[_]u21{ 0x0691 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x8e }, .{ .compat = &[_]u21{ 0x06A9 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x8f }, .{ .compat = &[_]u21{ 0x06A9 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x90 }, .{ .compat = &[_]u21{ 0x06A9 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x91 }, .{ .compat = &[_]u21{ 0x06A9 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x92 }, .{ .compat = &[_]u21{ 0x06AF } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x93 }, .{ .compat = &[_]u21{ 0x06AF } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x94 }, .{ .compat = &[_]u21{ 0x06AF } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x95 }, .{ .compat = &[_]u21{ 0x06AF } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x96 }, .{ .compat = &[_]u21{ 0x06B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x97 }, .{ .compat = &[_]u21{ 0x06B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x98 }, .{ .compat = &[_]u21{ 0x06B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x99 }, .{ .compat = &[_]u21{ 0x06B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x9a }, .{ .compat = &[_]u21{ 0x06B1 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x9b }, .{ .compat = &[_]u21{ 0x06B1 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x9c }, .{ .compat = &[_]u21{ 0x06B1 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x9d }, .{ .compat = &[_]u21{ 0x06B1 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x9e }, .{ .compat = &[_]u21{ 0x06BA } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0x9f }, .{ .compat = &[_]u21{ 0x06BA } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xa0 }, .{ .compat = &[_]u21{ 0x06BB } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xa1 }, .{ .compat = &[_]u21{ 0x06BB } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xa2 }, .{ .compat = &[_]u21{ 0x06BB } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xa3 }, .{ .compat = &[_]u21{ 0x06BB } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xa4 }, .{ .compat = &[_]u21{ 0x06C0 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xa5 }, .{ .compat = &[_]u21{ 0x06C0 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xa6 }, .{ .compat = &[_]u21{ 0x06C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xa7 }, .{ .compat = &[_]u21{ 0x06C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xa8 }, .{ .compat = &[_]u21{ 0x06C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xa9 }, .{ .compat = &[_]u21{ 0x06C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xaa }, .{ .compat = &[_]u21{ 0x06BE } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xab }, .{ .compat = &[_]u21{ 0x06BE } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xac }, .{ .compat = &[_]u21{ 0x06BE } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xad }, .{ .compat = &[_]u21{ 0x06BE } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xae }, .{ .compat = &[_]u21{ 0x06D2 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xaf }, .{ .compat = &[_]u21{ 0x06D2 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xb0 }, .{ .compat = &[_]u21{ 0x06D3 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xae, 0xb1 }, .{ .compat = &[_]u21{ 0x06D3 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0x93 }, .{ .compat = &[_]u21{ 0x06AD } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0x94 }, .{ .compat = &[_]u21{ 0x06AD } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0x95 }, .{ .compat = &[_]u21{ 0x06AD } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0x96 }, .{ .compat = &[_]u21{ 0x06AD } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0x97 }, .{ .compat = &[_]u21{ 0x06C7 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0x98 }, .{ .compat = &[_]u21{ 0x06C7 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0x99 }, .{ .compat = &[_]u21{ 0x06C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0x9a }, .{ .compat = &[_]u21{ 0x06C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0x9b }, .{ .compat = &[_]u21{ 0x06C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0x9c }, .{ .compat = &[_]u21{ 0x06C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0x9d }, .{ .compat = &[_]u21{ 0x0677 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0x9e }, .{ .compat = &[_]u21{ 0x06CB } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0x9f }, .{ .compat = &[_]u21{ 0x06CB } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xa0 }, .{ .compat = &[_]u21{ 0x06C5 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xa1 }, .{ .compat = &[_]u21{ 0x06C5 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xa2 }, .{ .compat = &[_]u21{ 0x06C9 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xa3 }, .{ .compat = &[_]u21{ 0x06C9 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xa4 }, .{ .compat = &[_]u21{ 0x06D0 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xa5 }, .{ .compat = &[_]u21{ 0x06D0 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xa6 }, .{ .compat = &[_]u21{ 0x06D0 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xa7 }, .{ .compat = &[_]u21{ 0x06D0 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xa8 }, .{ .compat = &[_]u21{ 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xa9 }, .{ .compat = &[_]u21{ 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xaa }, .{ .compat = &[_]u21{ 0x0626, 0x0627 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xab }, .{ .compat = &[_]u21{ 0x0626, 0x0627 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xac }, .{ .compat = &[_]u21{ 0x0626, 0x06D5 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xad }, .{ .compat = &[_]u21{ 0x0626, 0x06D5 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xae }, .{ .compat = &[_]u21{ 0x0626, 0x0648 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xaf }, .{ .compat = &[_]u21{ 0x0626, 0x0648 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xb0 }, .{ .compat = &[_]u21{ 0x0626, 0x06C7 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xb1 }, .{ .compat = &[_]u21{ 0x0626, 0x06C7 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xb2 }, .{ .compat = &[_]u21{ 0x0626, 0x06C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xb3 }, .{ .compat = &[_]u21{ 0x0626, 0x06C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xb4 }, .{ .compat = &[_]u21{ 0x0626, 0x06C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xb5 }, .{ .compat = &[_]u21{ 0x0626, 0x06C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xb6 }, .{ .compat = &[_]u21{ 0x0626, 0x06D0 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xb7 }, .{ .compat = &[_]u21{ 0x0626, 0x06D0 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xb8 }, .{ .compat = &[_]u21{ 0x0626, 0x06D0 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xb9 }, .{ .compat = &[_]u21{ 0x0626, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xba }, .{ .compat = &[_]u21{ 0x0626, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xbb }, .{ .compat = &[_]u21{ 0x0626, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xbc }, .{ .compat = &[_]u21{ 0x06CC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xbd }, .{ .compat = &[_]u21{ 0x06CC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xbe }, .{ .compat = &[_]u21{ 0x06CC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xaf, 0xbf }, .{ .compat = &[_]u21{ 0x06CC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x80 }, .{ .compat = &[_]u21{ 0x0626, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x81 }, .{ .compat = &[_]u21{ 0x0626, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x82 }, .{ .compat = &[_]u21{ 0x0626, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x83 }, .{ .compat = &[_]u21{ 0x0626, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x84 }, .{ .compat = &[_]u21{ 0x0626, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x85 }, .{ .compat = &[_]u21{ 0x0628, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x86 }, .{ .compat = &[_]u21{ 0x0628, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x87 }, .{ .compat = &[_]u21{ 0x0628, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x88 }, .{ .compat = &[_]u21{ 0x0628, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x89 }, .{ .compat = &[_]u21{ 0x0628, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x8a }, .{ .compat = &[_]u21{ 0x0628, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x8b }, .{ .compat = &[_]u21{ 0x062A, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x8c }, .{ .compat = &[_]u21{ 0x062A, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x8d }, .{ .compat = &[_]u21{ 0x062A, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x8e }, .{ .compat = &[_]u21{ 0x062A, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x8f }, .{ .compat = &[_]u21{ 0x062A, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x90 }, .{ .compat = &[_]u21{ 0x062A, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x91 }, .{ .compat = &[_]u21{ 0x062B, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x92 }, .{ .compat = &[_]u21{ 0x062B, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x93 }, .{ .compat = &[_]u21{ 0x062B, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x94 }, .{ .compat = &[_]u21{ 0x062B, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x95 }, .{ .compat = &[_]u21{ 0x062C, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x96 }, .{ .compat = &[_]u21{ 0x062C, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x97 }, .{ .compat = &[_]u21{ 0x062D, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x98 }, .{ .compat = &[_]u21{ 0x062D, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x99 }, .{ .compat = &[_]u21{ 0x062E, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x9a }, .{ .compat = &[_]u21{ 0x062E, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x9b }, .{ .compat = &[_]u21{ 0x062E, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x9c }, .{ .compat = &[_]u21{ 0x0633, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x9d }, .{ .compat = &[_]u21{ 0x0633, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x9e }, .{ .compat = &[_]u21{ 0x0633, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0x9f }, .{ .compat = &[_]u21{ 0x0633, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xa0 }, .{ .compat = &[_]u21{ 0x0635, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xa1 }, .{ .compat = &[_]u21{ 0x0635, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xa2 }, .{ .compat = &[_]u21{ 0x0636, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xa3 }, .{ .compat = &[_]u21{ 0x0636, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xa4 }, .{ .compat = &[_]u21{ 0x0636, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xa5 }, .{ .compat = &[_]u21{ 0x0636, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xa6 }, .{ .compat = &[_]u21{ 0x0637, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xa7 }, .{ .compat = &[_]u21{ 0x0637, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xa8 }, .{ .compat = &[_]u21{ 0x0638, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xa9 }, .{ .compat = &[_]u21{ 0x0639, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xaa }, .{ .compat = &[_]u21{ 0x0639, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xab }, .{ .compat = &[_]u21{ 0x063A, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xac }, .{ .compat = &[_]u21{ 0x063A, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xad }, .{ .compat = &[_]u21{ 0x0641, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xae }, .{ .compat = &[_]u21{ 0x0641, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xaf }, .{ .compat = &[_]u21{ 0x0641, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xb0 }, .{ .compat = &[_]u21{ 0x0641, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xb1 }, .{ .compat = &[_]u21{ 0x0641, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xb2 }, .{ .compat = &[_]u21{ 0x0641, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xb3 }, .{ .compat = &[_]u21{ 0x0642, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xb4 }, .{ .compat = &[_]u21{ 0x0642, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xb5 }, .{ .compat = &[_]u21{ 0x0642, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xb6 }, .{ .compat = &[_]u21{ 0x0642, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xb7 }, .{ .compat = &[_]u21{ 0x0643, 0x0627 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xb8 }, .{ .compat = &[_]u21{ 0x0643, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xb9 }, .{ .compat = &[_]u21{ 0x0643, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xba }, .{ .compat = &[_]u21{ 0x0643, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xbb }, .{ .compat = &[_]u21{ 0x0643, 0x0644 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xbc }, .{ .compat = &[_]u21{ 0x0643, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xbd }, .{ .compat = &[_]u21{ 0x0643, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xbe }, .{ .compat = &[_]u21{ 0x0643, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb0, 0xbf }, .{ .compat = &[_]u21{ 0x0644, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x80 }, .{ .compat = &[_]u21{ 0x0644, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x81 }, .{ .compat = &[_]u21{ 0x0644, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x82 }, .{ .compat = &[_]u21{ 0x0644, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x83 }, .{ .compat = &[_]u21{ 0x0644, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x84 }, .{ .compat = &[_]u21{ 0x0644, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x85 }, .{ .compat = &[_]u21{ 0x0645, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x86 }, .{ .compat = &[_]u21{ 0x0645, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x87 }, .{ .compat = &[_]u21{ 0x0645, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x88 }, .{ .compat = &[_]u21{ 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x89 }, .{ .compat = &[_]u21{ 0x0645, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x8a }, .{ .compat = &[_]u21{ 0x0645, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x8b }, .{ .compat = &[_]u21{ 0x0646, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x8c }, .{ .compat = &[_]u21{ 0x0646, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x8d }, .{ .compat = &[_]u21{ 0x0646, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x8e }, .{ .compat = &[_]u21{ 0x0646, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x8f }, .{ .compat = &[_]u21{ 0x0646, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x90 }, .{ .compat = &[_]u21{ 0x0646, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x91 }, .{ .compat = &[_]u21{ 0x0647, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x92 }, .{ .compat = &[_]u21{ 0x0647, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x93 }, .{ .compat = &[_]u21{ 0x0647, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x94 }, .{ .compat = &[_]u21{ 0x0647, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x95 }, .{ .compat = &[_]u21{ 0x064A, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x96 }, .{ .compat = &[_]u21{ 0x064A, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x97 }, .{ .compat = &[_]u21{ 0x064A, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x98 }, .{ .compat = &[_]u21{ 0x064A, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x99 }, .{ .compat = &[_]u21{ 0x064A, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x9a }, .{ .compat = &[_]u21{ 0x064A, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x9b }, .{ .compat = &[_]u21{ 0x0630, 0x0670 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x9c }, .{ .compat = &[_]u21{ 0x0631, 0x0670 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x9d }, .{ .compat = &[_]u21{ 0x0649, 0x0670 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x9e }, .{ .compat = &[_]u21{ 0x0020, 0x064C, 0x0651 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0x9f }, .{ .compat = &[_]u21{ 0x0020, 0x064D, 0x0651 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xa0 }, .{ .compat = &[_]u21{ 0x0020, 0x064E, 0x0651 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xa1 }, .{ .compat = &[_]u21{ 0x0020, 0x064F, 0x0651 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xa2 }, .{ .compat = &[_]u21{ 0x0020, 0x0650, 0x0651 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xa3 }, .{ .compat = &[_]u21{ 0x0020, 0x0651, 0x0670 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xa4 }, .{ .compat = &[_]u21{ 0x0626, 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xa5 }, .{ .compat = &[_]u21{ 0x0626, 0x0632 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xa6 }, .{ .compat = &[_]u21{ 0x0626, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xa7 }, .{ .compat = &[_]u21{ 0x0626, 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xa8 }, .{ .compat = &[_]u21{ 0x0626, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xa9 }, .{ .compat = &[_]u21{ 0x0626, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xaa }, .{ .compat = &[_]u21{ 0x0628, 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xab }, .{ .compat = &[_]u21{ 0x0628, 0x0632 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xac }, .{ .compat = &[_]u21{ 0x0628, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xad }, .{ .compat = &[_]u21{ 0x0628, 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xae }, .{ .compat = &[_]u21{ 0x0628, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xaf }, .{ .compat = &[_]u21{ 0x0628, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xb0 }, .{ .compat = &[_]u21{ 0x062A, 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xb1 }, .{ .compat = &[_]u21{ 0x062A, 0x0632 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xb2 }, .{ .compat = &[_]u21{ 0x062A, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xb3 }, .{ .compat = &[_]u21{ 0x062A, 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xb4 }, .{ .compat = &[_]u21{ 0x062A, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xb5 }, .{ .compat = &[_]u21{ 0x062A, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xb6 }, .{ .compat = &[_]u21{ 0x062B, 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xb7 }, .{ .compat = &[_]u21{ 0x062B, 0x0632 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xb8 }, .{ .compat = &[_]u21{ 0x062B, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xb9 }, .{ .compat = &[_]u21{ 0x062B, 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xba }, .{ .compat = &[_]u21{ 0x062B, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xbb }, .{ .compat = &[_]u21{ 0x062B, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xbc }, .{ .compat = &[_]u21{ 0x0641, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xbd }, .{ .compat = &[_]u21{ 0x0641, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xbe }, .{ .compat = &[_]u21{ 0x0642, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb1, 0xbf }, .{ .compat = &[_]u21{ 0x0642, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x80 }, .{ .compat = &[_]u21{ 0x0643, 0x0627 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x81 }, .{ .compat = &[_]u21{ 0x0643, 0x0644 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x82 }, .{ .compat = &[_]u21{ 0x0643, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x83 }, .{ .compat = &[_]u21{ 0x0643, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x84 }, .{ .compat = &[_]u21{ 0x0643, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x85 }, .{ .compat = &[_]u21{ 0x0644, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x86 }, .{ .compat = &[_]u21{ 0x0644, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x87 }, .{ .compat = &[_]u21{ 0x0644, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x88 }, .{ .compat = &[_]u21{ 0x0645, 0x0627 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x89 }, .{ .compat = &[_]u21{ 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x8a }, .{ .compat = &[_]u21{ 0x0646, 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x8b }, .{ .compat = &[_]u21{ 0x0646, 0x0632 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x8c }, .{ .compat = &[_]u21{ 0x0646, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x8d }, .{ .compat = &[_]u21{ 0x0646, 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x8e }, .{ .compat = &[_]u21{ 0x0646, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x8f }, .{ .compat = &[_]u21{ 0x0646, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x90 }, .{ .compat = &[_]u21{ 0x0649, 0x0670 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x91 }, .{ .compat = &[_]u21{ 0x064A, 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x92 }, .{ .compat = &[_]u21{ 0x064A, 0x0632 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x93 }, .{ .compat = &[_]u21{ 0x064A, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x94 }, .{ .compat = &[_]u21{ 0x064A, 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x95 }, .{ .compat = &[_]u21{ 0x064A, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x96 }, .{ .compat = &[_]u21{ 0x064A, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x97 }, .{ .compat = &[_]u21{ 0x0626, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x98 }, .{ .compat = &[_]u21{ 0x0626, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x99 }, .{ .compat = &[_]u21{ 0x0626, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x9a }, .{ .compat = &[_]u21{ 0x0626, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x9b }, .{ .compat = &[_]u21{ 0x0626, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x9c }, .{ .compat = &[_]u21{ 0x0628, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x9d }, .{ .compat = &[_]u21{ 0x0628, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x9e }, .{ .compat = &[_]u21{ 0x0628, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0x9f }, .{ .compat = &[_]u21{ 0x0628, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xa0 }, .{ .compat = &[_]u21{ 0x0628, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xa1 }, .{ .compat = &[_]u21{ 0x062A, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xa2 }, .{ .compat = &[_]u21{ 0x062A, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xa3 }, .{ .compat = &[_]u21{ 0x062A, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xa4 }, .{ .compat = &[_]u21{ 0x062A, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xa5 }, .{ .compat = &[_]u21{ 0x062A, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xa6 }, .{ .compat = &[_]u21{ 0x062B, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xa7 }, .{ .compat = &[_]u21{ 0x062C, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xa8 }, .{ .compat = &[_]u21{ 0x062C, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xa9 }, .{ .compat = &[_]u21{ 0x062D, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xaa }, .{ .compat = &[_]u21{ 0x062D, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xab }, .{ .compat = &[_]u21{ 0x062E, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xac }, .{ .compat = &[_]u21{ 0x062E, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xad }, .{ .compat = &[_]u21{ 0x0633, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xae }, .{ .compat = &[_]u21{ 0x0633, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xaf }, .{ .compat = &[_]u21{ 0x0633, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xb0 }, .{ .compat = &[_]u21{ 0x0633, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xb1 }, .{ .compat = &[_]u21{ 0x0635, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xb2 }, .{ .compat = &[_]u21{ 0x0635, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xb3 }, .{ .compat = &[_]u21{ 0x0635, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xb4 }, .{ .compat = &[_]u21{ 0x0636, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xb5 }, .{ .compat = &[_]u21{ 0x0636, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xb6 }, .{ .compat = &[_]u21{ 0x0636, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xb7 }, .{ .compat = &[_]u21{ 0x0636, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xb8 }, .{ .compat = &[_]u21{ 0x0637, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xb9 }, .{ .compat = &[_]u21{ 0x0638, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xba }, .{ .compat = &[_]u21{ 0x0639, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xbb }, .{ .compat = &[_]u21{ 0x0639, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xbc }, .{ .compat = &[_]u21{ 0x063A, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xbd }, .{ .compat = &[_]u21{ 0x063A, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xbe }, .{ .compat = &[_]u21{ 0x0641, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb2, 0xbf }, .{ .compat = &[_]u21{ 0x0641, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x80 }, .{ .compat = &[_]u21{ 0x0641, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x81 }, .{ .compat = &[_]u21{ 0x0641, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x82 }, .{ .compat = &[_]u21{ 0x0642, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x83 }, .{ .compat = &[_]u21{ 0x0642, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x84 }, .{ .compat = &[_]u21{ 0x0643, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x85 }, .{ .compat = &[_]u21{ 0x0643, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x86 }, .{ .compat = &[_]u21{ 0x0643, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x87 }, .{ .compat = &[_]u21{ 0x0643, 0x0644 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x88 }, .{ .compat = &[_]u21{ 0x0643, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x89 }, .{ .compat = &[_]u21{ 0x0644, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x8a }, .{ .compat = &[_]u21{ 0x0644, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x8b }, .{ .compat = &[_]u21{ 0x0644, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x8c }, .{ .compat = &[_]u21{ 0x0644, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x8d }, .{ .compat = &[_]u21{ 0x0644, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x8e }, .{ .compat = &[_]u21{ 0x0645, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x8f }, .{ .compat = &[_]u21{ 0x0645, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x90 }, .{ .compat = &[_]u21{ 0x0645, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x91 }, .{ .compat = &[_]u21{ 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x92 }, .{ .compat = &[_]u21{ 0x0646, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x93 }, .{ .compat = &[_]u21{ 0x0646, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x94 }, .{ .compat = &[_]u21{ 0x0646, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x95 }, .{ .compat = &[_]u21{ 0x0646, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x96 }, .{ .compat = &[_]u21{ 0x0646, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x97 }, .{ .compat = &[_]u21{ 0x0647, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x98 }, .{ .compat = &[_]u21{ 0x0647, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x99 }, .{ .compat = &[_]u21{ 0x0647, 0x0670 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x9a }, .{ .compat = &[_]u21{ 0x064A, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x9b }, .{ .compat = &[_]u21{ 0x064A, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x9c }, .{ .compat = &[_]u21{ 0x064A, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x9d }, .{ .compat = &[_]u21{ 0x064A, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x9e }, .{ .compat = &[_]u21{ 0x064A, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0x9f }, .{ .compat = &[_]u21{ 0x0626, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xa0 }, .{ .compat = &[_]u21{ 0x0626, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xa1 }, .{ .compat = &[_]u21{ 0x0628, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xa2 }, .{ .compat = &[_]u21{ 0x0628, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xa3 }, .{ .compat = &[_]u21{ 0x062A, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xa4 }, .{ .compat = &[_]u21{ 0x062A, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xa5 }, .{ .compat = &[_]u21{ 0x062B, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xa6 }, .{ .compat = &[_]u21{ 0x062B, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xa7 }, .{ .compat = &[_]u21{ 0x0633, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xa8 }, .{ .compat = &[_]u21{ 0x0633, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xa9 }, .{ .compat = &[_]u21{ 0x0634, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xaa }, .{ .compat = &[_]u21{ 0x0634, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xab }, .{ .compat = &[_]u21{ 0x0643, 0x0644 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xac }, .{ .compat = &[_]u21{ 0x0643, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xad }, .{ .compat = &[_]u21{ 0x0644, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xae }, .{ .compat = &[_]u21{ 0x0646, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xaf }, .{ .compat = &[_]u21{ 0x0646, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xb0 }, .{ .compat = &[_]u21{ 0x064A, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xb1 }, .{ .compat = &[_]u21{ 0x064A, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xb2 }, .{ .compat = &[_]u21{ 0x0640, 0x064E, 0x0651 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xb3 }, .{ .compat = &[_]u21{ 0x0640, 0x064F, 0x0651 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xb4 }, .{ .compat = &[_]u21{ 0x0640, 0x0650, 0x0651 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xb5 }, .{ .compat = &[_]u21{ 0x0637, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xb6 }, .{ .compat = &[_]u21{ 0x0637, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xb7 }, .{ .compat = &[_]u21{ 0x0639, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xb8 }, .{ .compat = &[_]u21{ 0x0639, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xb9 }, .{ .compat = &[_]u21{ 0x063A, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xba }, .{ .compat = &[_]u21{ 0x063A, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xbb }, .{ .compat = &[_]u21{ 0x0633, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xbc }, .{ .compat = &[_]u21{ 0x0633, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xbd }, .{ .compat = &[_]u21{ 0x0634, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xbe }, .{ .compat = &[_]u21{ 0x0634, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb3, 0xbf }, .{ .compat = &[_]u21{ 0x062D, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x80 }, .{ .compat = &[_]u21{ 0x062D, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x81 }, .{ .compat = &[_]u21{ 0x062C, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x82 }, .{ .compat = &[_]u21{ 0x062C, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x83 }, .{ .compat = &[_]u21{ 0x062E, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x84 }, .{ .compat = &[_]u21{ 0x062E, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x85 }, .{ .compat = &[_]u21{ 0x0635, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x86 }, .{ .compat = &[_]u21{ 0x0635, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x87 }, .{ .compat = &[_]u21{ 0x0636, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x88 }, .{ .compat = &[_]u21{ 0x0636, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x89 }, .{ .compat = &[_]u21{ 0x0634, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x8a }, .{ .compat = &[_]u21{ 0x0634, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x8b }, .{ .compat = &[_]u21{ 0x0634, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x8c }, .{ .compat = &[_]u21{ 0x0634, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x8d }, .{ .compat = &[_]u21{ 0x0634, 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x8e }, .{ .compat = &[_]u21{ 0x0633, 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x8f }, .{ .compat = &[_]u21{ 0x0635, 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x90 }, .{ .compat = &[_]u21{ 0x0636, 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x91 }, .{ .compat = &[_]u21{ 0x0637, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x92 }, .{ .compat = &[_]u21{ 0x0637, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x93 }, .{ .compat = &[_]u21{ 0x0639, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x94 }, .{ .compat = &[_]u21{ 0x0639, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x95 }, .{ .compat = &[_]u21{ 0x063A, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x96 }, .{ .compat = &[_]u21{ 0x063A, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x97 }, .{ .compat = &[_]u21{ 0x0633, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x98 }, .{ .compat = &[_]u21{ 0x0633, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x99 }, .{ .compat = &[_]u21{ 0x0634, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x9a }, .{ .compat = &[_]u21{ 0x0634, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x9b }, .{ .compat = &[_]u21{ 0x062D, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x9c }, .{ .compat = &[_]u21{ 0x062D, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x9d }, .{ .compat = &[_]u21{ 0x062C, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x9e }, .{ .compat = &[_]u21{ 0x062C, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0x9f }, .{ .compat = &[_]u21{ 0x062E, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xa0 }, .{ .compat = &[_]u21{ 0x062E, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xa1 }, .{ .compat = &[_]u21{ 0x0635, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xa2 }, .{ .compat = &[_]u21{ 0x0635, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xa3 }, .{ .compat = &[_]u21{ 0x0636, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xa4 }, .{ .compat = &[_]u21{ 0x0636, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xa5 }, .{ .compat = &[_]u21{ 0x0634, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xa6 }, .{ .compat = &[_]u21{ 0x0634, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xa7 }, .{ .compat = &[_]u21{ 0x0634, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xa8 }, .{ .compat = &[_]u21{ 0x0634, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xa9 }, .{ .compat = &[_]u21{ 0x0634, 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xaa }, .{ .compat = &[_]u21{ 0x0633, 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xab }, .{ .compat = &[_]u21{ 0x0635, 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xac }, .{ .compat = &[_]u21{ 0x0636, 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xad }, .{ .compat = &[_]u21{ 0x0634, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xae }, .{ .compat = &[_]u21{ 0x0634, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xaf }, .{ .compat = &[_]u21{ 0x0634, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xb0 }, .{ .compat = &[_]u21{ 0x0634, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xb1 }, .{ .compat = &[_]u21{ 0x0633, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xb2 }, .{ .compat = &[_]u21{ 0x0634, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xb3 }, .{ .compat = &[_]u21{ 0x0637, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xb4 }, .{ .compat = &[_]u21{ 0x0633, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xb5 }, .{ .compat = &[_]u21{ 0x0633, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xb6 }, .{ .compat = &[_]u21{ 0x0633, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xb7 }, .{ .compat = &[_]u21{ 0x0634, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xb8 }, .{ .compat = &[_]u21{ 0x0634, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xb9 }, .{ .compat = &[_]u21{ 0x0634, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xba }, .{ .compat = &[_]u21{ 0x0637, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xbb }, .{ .compat = &[_]u21{ 0x0638, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xbc }, .{ .compat = &[_]u21{ 0x0627, 0x064B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb4, 0xbd }, .{ .compat = &[_]u21{ 0x0627, 0x064B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x90 }, .{ .compat = &[_]u21{ 0x062A, 0x062C, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x91 }, .{ .compat = &[_]u21{ 0x062A, 0x062D, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x92 }, .{ .compat = &[_]u21{ 0x062A, 0x062D, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x93 }, .{ .compat = &[_]u21{ 0x062A, 0x062D, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x94 }, .{ .compat = &[_]u21{ 0x062A, 0x062E, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x95 }, .{ .compat = &[_]u21{ 0x062A, 0x0645, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x96 }, .{ .compat = &[_]u21{ 0x062A, 0x0645, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x97 }, .{ .compat = &[_]u21{ 0x062A, 0x0645, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x98 }, .{ .compat = &[_]u21{ 0x062C, 0x0645, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x99 }, .{ .compat = &[_]u21{ 0x062C, 0x0645, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x9a }, .{ .compat = &[_]u21{ 0x062D, 0x0645, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x9b }, .{ .compat = &[_]u21{ 0x062D, 0x0645, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x9c }, .{ .compat = &[_]u21{ 0x0633, 0x062D, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x9d }, .{ .compat = &[_]u21{ 0x0633, 0x062C, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x9e }, .{ .compat = &[_]u21{ 0x0633, 0x062C, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0x9f }, .{ .compat = &[_]u21{ 0x0633, 0x0645, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xa0 }, .{ .compat = &[_]u21{ 0x0633, 0x0645, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xa1 }, .{ .compat = &[_]u21{ 0x0633, 0x0645, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xa2 }, .{ .compat = &[_]u21{ 0x0633, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xa3 }, .{ .compat = &[_]u21{ 0x0633, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xa4 }, .{ .compat = &[_]u21{ 0x0635, 0x062D, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xa5 }, .{ .compat = &[_]u21{ 0x0635, 0x062D, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xa6 }, .{ .compat = &[_]u21{ 0x0635, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xa7 }, .{ .compat = &[_]u21{ 0x0634, 0x062D, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xa8 }, .{ .compat = &[_]u21{ 0x0634, 0x062D, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xa9 }, .{ .compat = &[_]u21{ 0x0634, 0x062C, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xaa }, .{ .compat = &[_]u21{ 0x0634, 0x0645, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xab }, .{ .compat = &[_]u21{ 0x0634, 0x0645, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xac }, .{ .compat = &[_]u21{ 0x0634, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xad }, .{ .compat = &[_]u21{ 0x0634, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xae }, .{ .compat = &[_]u21{ 0x0636, 0x062D, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xaf }, .{ .compat = &[_]u21{ 0x0636, 0x062E, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xb0 }, .{ .compat = &[_]u21{ 0x0636, 0x062E, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xb1 }, .{ .compat = &[_]u21{ 0x0637, 0x0645, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xb2 }, .{ .compat = &[_]u21{ 0x0637, 0x0645, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xb3 }, .{ .compat = &[_]u21{ 0x0637, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xb4 }, .{ .compat = &[_]u21{ 0x0637, 0x0645, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xb5 }, .{ .compat = &[_]u21{ 0x0639, 0x062C, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xb6 }, .{ .compat = &[_]u21{ 0x0639, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xb7 }, .{ .compat = &[_]u21{ 0x0639, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xb8 }, .{ .compat = &[_]u21{ 0x0639, 0x0645, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xb9 }, .{ .compat = &[_]u21{ 0x063A, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xba }, .{ .compat = &[_]u21{ 0x063A, 0x0645, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xbb }, .{ .compat = &[_]u21{ 0x063A, 0x0645, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xbc }, .{ .compat = &[_]u21{ 0x0641, 0x062E, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xbd }, .{ .compat = &[_]u21{ 0x0641, 0x062E, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xbe }, .{ .compat = &[_]u21{ 0x0642, 0x0645, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb5, 0xbf }, .{ .compat = &[_]u21{ 0x0642, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x80 }, .{ .compat = &[_]u21{ 0x0644, 0x062D, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x81 }, .{ .compat = &[_]u21{ 0x0644, 0x062D, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x82 }, .{ .compat = &[_]u21{ 0x0644, 0x062D, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x83 }, .{ .compat = &[_]u21{ 0x0644, 0x062C, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x84 }, .{ .compat = &[_]u21{ 0x0644, 0x062C, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x85 }, .{ .compat = &[_]u21{ 0x0644, 0x062E, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x86 }, .{ .compat = &[_]u21{ 0x0644, 0x062E, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x87 }, .{ .compat = &[_]u21{ 0x0644, 0x0645, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x88 }, .{ .compat = &[_]u21{ 0x0644, 0x0645, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x89 }, .{ .compat = &[_]u21{ 0x0645, 0x062D, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x8a }, .{ .compat = &[_]u21{ 0x0645, 0x062D, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x8b }, .{ .compat = &[_]u21{ 0x0645, 0x062D, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x8c }, .{ .compat = &[_]u21{ 0x0645, 0x062C, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x8d }, .{ .compat = &[_]u21{ 0x0645, 0x062C, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x8e }, .{ .compat = &[_]u21{ 0x0645, 0x062E, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x8f }, .{ .compat = &[_]u21{ 0x0645, 0x062E, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x92 }, .{ .compat = &[_]u21{ 0x0645, 0x062C, 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x93 }, .{ .compat = &[_]u21{ 0x0647, 0x0645, 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x94 }, .{ .compat = &[_]u21{ 0x0647, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x95 }, .{ .compat = &[_]u21{ 0x0646, 0x062D, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x96 }, .{ .compat = &[_]u21{ 0x0646, 0x062D, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x97 }, .{ .compat = &[_]u21{ 0x0646, 0x062C, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x98 }, .{ .compat = &[_]u21{ 0x0646, 0x062C, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x99 }, .{ .compat = &[_]u21{ 0x0646, 0x062C, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x9a }, .{ .compat = &[_]u21{ 0x0646, 0x0645, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x9b }, .{ .compat = &[_]u21{ 0x0646, 0x0645, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x9c }, .{ .compat = &[_]u21{ 0x064A, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x9d }, .{ .compat = &[_]u21{ 0x064A, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x9e }, .{ .compat = &[_]u21{ 0x0628, 0x062E, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0x9f }, .{ .compat = &[_]u21{ 0x062A, 0x062C, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xa0 }, .{ .compat = &[_]u21{ 0x062A, 0x062C, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xa1 }, .{ .compat = &[_]u21{ 0x062A, 0x062E, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xa2 }, .{ .compat = &[_]u21{ 0x062A, 0x062E, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xa3 }, .{ .compat = &[_]u21{ 0x062A, 0x0645, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xa4 }, .{ .compat = &[_]u21{ 0x062A, 0x0645, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xa5 }, .{ .compat = &[_]u21{ 0x062C, 0x0645, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xa6 }, .{ .compat = &[_]u21{ 0x062C, 0x062D, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xa7 }, .{ .compat = &[_]u21{ 0x062C, 0x0645, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xa8 }, .{ .compat = &[_]u21{ 0x0633, 0x062E, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xa9 }, .{ .compat = &[_]u21{ 0x0635, 0x062D, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xaa }, .{ .compat = &[_]u21{ 0x0634, 0x062D, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xab }, .{ .compat = &[_]u21{ 0x0636, 0x062D, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xac }, .{ .compat = &[_]u21{ 0x0644, 0x062C, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xad }, .{ .compat = &[_]u21{ 0x0644, 0x0645, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xae }, .{ .compat = &[_]u21{ 0x064A, 0x062D, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xaf }, .{ .compat = &[_]u21{ 0x064A, 0x062C, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xb0 }, .{ .compat = &[_]u21{ 0x064A, 0x0645, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xb1 }, .{ .compat = &[_]u21{ 0x0645, 0x0645, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xb2 }, .{ .compat = &[_]u21{ 0x0642, 0x0645, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xb3 }, .{ .compat = &[_]u21{ 0x0646, 0x062D, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xb4 }, .{ .compat = &[_]u21{ 0x0642, 0x0645, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xb5 }, .{ .compat = &[_]u21{ 0x0644, 0x062D, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xb6 }, .{ .compat = &[_]u21{ 0x0639, 0x0645, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xb7 }, .{ .compat = &[_]u21{ 0x0643, 0x0645, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xb8 }, .{ .compat = &[_]u21{ 0x0646, 0x062C, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xb9 }, .{ .compat = &[_]u21{ 0x0645, 0x062E, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xba }, .{ .compat = &[_]u21{ 0x0644, 0x062C, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xbb }, .{ .compat = &[_]u21{ 0x0643, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xbc }, .{ .compat = &[_]u21{ 0x0644, 0x062C, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xbd }, .{ .compat = &[_]u21{ 0x0646, 0x062C, 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xbe }, .{ .compat = &[_]u21{ 0x062C, 0x062D, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb6, 0xbf }, .{ .compat = &[_]u21{ 0x062D, 0x062C, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0x80 }, .{ .compat = &[_]u21{ 0x0645, 0x062C, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0x81 }, .{ .compat = &[_]u21{ 0x0641, 0x0645, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0x82 }, .{ .compat = &[_]u21{ 0x0628, 0x062D, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0x83 }, .{ .compat = &[_]u21{ 0x0643, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0x84 }, .{ .compat = &[_]u21{ 0x0639, 0x062C, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0x85 }, .{ .compat = &[_]u21{ 0x0635, 0x0645, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0x86 }, .{ .compat = &[_]u21{ 0x0633, 0x062E, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0x87 }, .{ .compat = &[_]u21{ 0x0646, 0x062C, 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0xb0 }, .{ .compat = &[_]u21{ 0x0635, 0x0644, 0x06D2 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0xb1 }, .{ .compat = &[_]u21{ 0x0642, 0x0644, 0x06D2 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0xb2 }, .{ .compat = &[_]u21{ 0x0627, 0x0644, 0x0644, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0xb3 }, .{ .compat = &[_]u21{ 0x0627, 0x0643, 0x0628, 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0xb4 }, .{ .compat = &[_]u21{ 0x0645, 0x062D, 0x0645, 0x062F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0xb5 }, .{ .compat = &[_]u21{ 0x0635, 0x0644, 0x0639, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0xb6 }, .{ .compat = &[_]u21{ 0x0631, 0x0633, 0x0648, 0x0644 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0xb7 }, .{ .compat = &[_]u21{ 0x0639, 0x0644, 0x064A, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0xb8 }, .{ .compat = &[_]u21{ 0x0648, 0x0633, 0x0644, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0xb9 }, .{ .compat = &[_]u21{ 0x0635, 0x0644, 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0xba }, .{ .compat = &[_]u21{ 0x0635, 0x0644, 0x0649, 0x0020, 0x0627, 0x0644, 0x0644, 0x0647, 0x0020, 0x0639, 0x0644, 0x064A, 0x0647, 0x0020, 0x0648, 0x0633, 0x0644, 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0xbb }, .{ .compat = &[_]u21{ 0x062C, 0x0644, 0x0020, 0x062C, 0x0644, 0x0627, 0x0644, 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb7, 0xbc }, .{ .compat = &[_]u21{ 0x0631, 0x06CC, 0x0627, 0x0644 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0x90 }, .{ .compat = &[_]u21{ 0x002C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0x91 }, .{ .compat = &[_]u21{ 0x3001 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0x92 }, .{ .compat = &[_]u21{ 0x3002 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0x93 }, .{ .compat = &[_]u21{ 0x003A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0x94 }, .{ .compat = &[_]u21{ 0x003B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0x95 }, .{ .compat = &[_]u21{ 0x0021 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0x96 }, .{ .compat = &[_]u21{ 0x003F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0x97 }, .{ .compat = &[_]u21{ 0x3016 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0x98 }, .{ .compat = &[_]u21{ 0x3017 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0x99 }, .{ .compat = &[_]u21{ 0x2026 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xb0 }, .{ .compat = &[_]u21{ 0x2025 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xb1 }, .{ .compat = &[_]u21{ 0x2014 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xb2 }, .{ .compat = &[_]u21{ 0x2013 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xb3 }, .{ .compat = &[_]u21{ 0x005F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xb4 }, .{ .compat = &[_]u21{ 0x005F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xb5 }, .{ .compat = &[_]u21{ 0x0028 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xb6 }, .{ .compat = &[_]u21{ 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xb7 }, .{ .compat = &[_]u21{ 0x007B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xb8 }, .{ .compat = &[_]u21{ 0x007D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xb9 }, .{ .compat = &[_]u21{ 0x3014 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xba }, .{ .compat = &[_]u21{ 0x3015 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xbb }, .{ .compat = &[_]u21{ 0x3010 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xbc }, .{ .compat = &[_]u21{ 0x3011 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xbd }, .{ .compat = &[_]u21{ 0x300A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xbe }, .{ .compat = &[_]u21{ 0x300B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb8, 0xbf }, .{ .compat = &[_]u21{ 0x3008 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x80 }, .{ .compat = &[_]u21{ 0x3009 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x81 }, .{ .compat = &[_]u21{ 0x300C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x82 }, .{ .compat = &[_]u21{ 0x300D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x83 }, .{ .compat = &[_]u21{ 0x300E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x84 }, .{ .compat = &[_]u21{ 0x300F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x87 }, .{ .compat = &[_]u21{ 0x005B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x88 }, .{ .compat = &[_]u21{ 0x005D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x89 }, .{ .compat = &[_]u21{ 0x203E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x8a }, .{ .compat = &[_]u21{ 0x203E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x8b }, .{ .compat = &[_]u21{ 0x203E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x8c }, .{ .compat = &[_]u21{ 0x203E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x8d }, .{ .compat = &[_]u21{ 0x005F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x8e }, .{ .compat = &[_]u21{ 0x005F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x8f }, .{ .compat = &[_]u21{ 0x005F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x90 }, .{ .compat = &[_]u21{ 0x002C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x91 }, .{ .compat = &[_]u21{ 0x3001 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x92 }, .{ .compat = &[_]u21{ 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x94 }, .{ .compat = &[_]u21{ 0x003B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x95 }, .{ .compat = &[_]u21{ 0x003A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x96 }, .{ .compat = &[_]u21{ 0x003F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x97 }, .{ .compat = &[_]u21{ 0x0021 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x98 }, .{ .compat = &[_]u21{ 0x2014 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x99 }, .{ .compat = &[_]u21{ 0x0028 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x9a }, .{ .compat = &[_]u21{ 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x9b }, .{ .compat = &[_]u21{ 0x007B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x9c }, .{ .compat = &[_]u21{ 0x007D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x9d }, .{ .compat = &[_]u21{ 0x3014 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x9e }, .{ .compat = &[_]u21{ 0x3015 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0x9f }, .{ .compat = &[_]u21{ 0x0023 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xa0 }, .{ .compat = &[_]u21{ 0x0026 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xa1 }, .{ .compat = &[_]u21{ 0x002A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xa2 }, .{ .compat = &[_]u21{ 0x002B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xa3 }, .{ .compat = &[_]u21{ 0x002D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xa4 }, .{ .compat = &[_]u21{ 0x003C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xa5 }, .{ .compat = &[_]u21{ 0x003E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xa6 }, .{ .compat = &[_]u21{ 0x003D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xa8 }, .{ .compat = &[_]u21{ 0x005C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xa9 }, .{ .compat = &[_]u21{ 0x0024 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xaa }, .{ .compat = &[_]u21{ 0x0025 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xab }, .{ .compat = &[_]u21{ 0x0040 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xb0 }, .{ .compat = &[_]u21{ 0x0020, 0x064B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xb1 }, .{ .compat = &[_]u21{ 0x0640, 0x064B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xb2 }, .{ .compat = &[_]u21{ 0x0020, 0x064C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xb4 }, .{ .compat = &[_]u21{ 0x0020, 0x064D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xb6 }, .{ .compat = &[_]u21{ 0x0020, 0x064E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xb7 }, .{ .compat = &[_]u21{ 0x0640, 0x064E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xb8 }, .{ .compat = &[_]u21{ 0x0020, 0x064F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xb9 }, .{ .compat = &[_]u21{ 0x0640, 0x064F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xba }, .{ .compat = &[_]u21{ 0x0020, 0x0650 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xbb }, .{ .compat = &[_]u21{ 0x0640, 0x0650 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xbc }, .{ .compat = &[_]u21{ 0x0020, 0x0651 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xbd }, .{ .compat = &[_]u21{ 0x0640, 0x0651 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xbe }, .{ .compat = &[_]u21{ 0x0020, 0x0652 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xb9, 0xbf }, .{ .compat = &[_]u21{ 0x0640, 0x0652 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x80 }, .{ .compat = &[_]u21{ 0x0621 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x81 }, .{ .compat = &[_]u21{ 0x0622 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x82 }, .{ .compat = &[_]u21{ 0x0622 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x83 }, .{ .compat = &[_]u21{ 0x0623 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x84 }, .{ .compat = &[_]u21{ 0x0623 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x85 }, .{ .compat = &[_]u21{ 0x0624 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x86 }, .{ .compat = &[_]u21{ 0x0624 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x87 }, .{ .compat = &[_]u21{ 0x0625 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x88 }, .{ .compat = &[_]u21{ 0x0625 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x89 }, .{ .compat = &[_]u21{ 0x0626 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x8a }, .{ .compat = &[_]u21{ 0x0626 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x8b }, .{ .compat = &[_]u21{ 0x0626 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x8c }, .{ .compat = &[_]u21{ 0x0626 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x8d }, .{ .compat = &[_]u21{ 0x0627 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x8e }, .{ .compat = &[_]u21{ 0x0627 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x8f }, .{ .compat = &[_]u21{ 0x0628 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x90 }, .{ .compat = &[_]u21{ 0x0628 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x91 }, .{ .compat = &[_]u21{ 0x0628 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x92 }, .{ .compat = &[_]u21{ 0x0628 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x93 }, .{ .compat = &[_]u21{ 0x0629 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x94 }, .{ .compat = &[_]u21{ 0x0629 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x95 }, .{ .compat = &[_]u21{ 0x062A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x96 }, .{ .compat = &[_]u21{ 0x062A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x97 }, .{ .compat = &[_]u21{ 0x062A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x98 }, .{ .compat = &[_]u21{ 0x062A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x99 }, .{ .compat = &[_]u21{ 0x062B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x9a }, .{ .compat = &[_]u21{ 0x062B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x9b }, .{ .compat = &[_]u21{ 0x062B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x9c }, .{ .compat = &[_]u21{ 0x062B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x9d }, .{ .compat = &[_]u21{ 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x9e }, .{ .compat = &[_]u21{ 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0x9f }, .{ .compat = &[_]u21{ 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xa0 }, .{ .compat = &[_]u21{ 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xa1 }, .{ .compat = &[_]u21{ 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xa2 }, .{ .compat = &[_]u21{ 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xa3 }, .{ .compat = &[_]u21{ 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xa4 }, .{ .compat = &[_]u21{ 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xa5 }, .{ .compat = &[_]u21{ 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xa6 }, .{ .compat = &[_]u21{ 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xa7 }, .{ .compat = &[_]u21{ 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xa8 }, .{ .compat = &[_]u21{ 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xa9 }, .{ .compat = &[_]u21{ 0x062F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xaa }, .{ .compat = &[_]u21{ 0x062F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xab }, .{ .compat = &[_]u21{ 0x0630 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xac }, .{ .compat = &[_]u21{ 0x0630 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xad }, .{ .compat = &[_]u21{ 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xae }, .{ .compat = &[_]u21{ 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xaf }, .{ .compat = &[_]u21{ 0x0632 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xb0 }, .{ .compat = &[_]u21{ 0x0632 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xb1 }, .{ .compat = &[_]u21{ 0x0633 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xb2 }, .{ .compat = &[_]u21{ 0x0633 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xb3 }, .{ .compat = &[_]u21{ 0x0633 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xb4 }, .{ .compat = &[_]u21{ 0x0633 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xb5 }, .{ .compat = &[_]u21{ 0x0634 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xb6 }, .{ .compat = &[_]u21{ 0x0634 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xb7 }, .{ .compat = &[_]u21{ 0x0634 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xb8 }, .{ .compat = &[_]u21{ 0x0634 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xb9 }, .{ .compat = &[_]u21{ 0x0635 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xba }, .{ .compat = &[_]u21{ 0x0635 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xbb }, .{ .compat = &[_]u21{ 0x0635 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xbc }, .{ .compat = &[_]u21{ 0x0635 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xbd }, .{ .compat = &[_]u21{ 0x0636 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xbe }, .{ .compat = &[_]u21{ 0x0636 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xba, 0xbf }, .{ .compat = &[_]u21{ 0x0636 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x80 }, .{ .compat = &[_]u21{ 0x0636 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x81 }, .{ .compat = &[_]u21{ 0x0637 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x82 }, .{ .compat = &[_]u21{ 0x0637 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x83 }, .{ .compat = &[_]u21{ 0x0637 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x84 }, .{ .compat = &[_]u21{ 0x0637 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x85 }, .{ .compat = &[_]u21{ 0x0638 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x86 }, .{ .compat = &[_]u21{ 0x0638 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x87 }, .{ .compat = &[_]u21{ 0x0638 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x88 }, .{ .compat = &[_]u21{ 0x0638 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x89 }, .{ .compat = &[_]u21{ 0x0639 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x8a }, .{ .compat = &[_]u21{ 0x0639 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x8b }, .{ .compat = &[_]u21{ 0x0639 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x8c }, .{ .compat = &[_]u21{ 0x0639 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x8d }, .{ .compat = &[_]u21{ 0x063A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x8e }, .{ .compat = &[_]u21{ 0x063A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x8f }, .{ .compat = &[_]u21{ 0x063A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x90 }, .{ .compat = &[_]u21{ 0x063A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x91 }, .{ .compat = &[_]u21{ 0x0641 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x92 }, .{ .compat = &[_]u21{ 0x0641 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x93 }, .{ .compat = &[_]u21{ 0x0641 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x94 }, .{ .compat = &[_]u21{ 0x0641 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x95 }, .{ .compat = &[_]u21{ 0x0642 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x96 }, .{ .compat = &[_]u21{ 0x0642 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x97 }, .{ .compat = &[_]u21{ 0x0642 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x98 }, .{ .compat = &[_]u21{ 0x0642 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x99 }, .{ .compat = &[_]u21{ 0x0643 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x9a }, .{ .compat = &[_]u21{ 0x0643 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x9b }, .{ .compat = &[_]u21{ 0x0643 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x9c }, .{ .compat = &[_]u21{ 0x0643 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x9d }, .{ .compat = &[_]u21{ 0x0644 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x9e }, .{ .compat = &[_]u21{ 0x0644 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0x9f }, .{ .compat = &[_]u21{ 0x0644 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xa0 }, .{ .compat = &[_]u21{ 0x0644 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xa1 }, .{ .compat = &[_]u21{ 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xa2 }, .{ .compat = &[_]u21{ 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xa3 }, .{ .compat = &[_]u21{ 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xa4 }, .{ .compat = &[_]u21{ 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xa5 }, .{ .compat = &[_]u21{ 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xa6 }, .{ .compat = &[_]u21{ 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xa7 }, .{ .compat = &[_]u21{ 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xa8 }, .{ .compat = &[_]u21{ 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xa9 }, .{ .compat = &[_]u21{ 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xaa }, .{ .compat = &[_]u21{ 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xab }, .{ .compat = &[_]u21{ 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xac }, .{ .compat = &[_]u21{ 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xad }, .{ .compat = &[_]u21{ 0x0648 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xae }, .{ .compat = &[_]u21{ 0x0648 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xaf }, .{ .compat = &[_]u21{ 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xb0 }, .{ .compat = &[_]u21{ 0x0649 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xb1 }, .{ .compat = &[_]u21{ 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xb2 }, .{ .compat = &[_]u21{ 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xb3 }, .{ .compat = &[_]u21{ 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xb4 }, .{ .compat = &[_]u21{ 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xb5 }, .{ .compat = &[_]u21{ 0x0644, 0x0622 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xb6 }, .{ .compat = &[_]u21{ 0x0644, 0x0622 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xb7 }, .{ .compat = &[_]u21{ 0x0644, 0x0623 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xb8 }, .{ .compat = &[_]u21{ 0x0644, 0x0623 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xb9 }, .{ .compat = &[_]u21{ 0x0644, 0x0625 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xba }, .{ .compat = &[_]u21{ 0x0644, 0x0625 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xbb }, .{ .compat = &[_]u21{ 0x0644, 0x0627 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbb, 0xbc }, .{ .compat = &[_]u21{ 0x0644, 0x0627 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x81 }, .{ .compat = &[_]u21{ 0x0021 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x82 }, .{ .compat = &[_]u21{ 0x0022 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x83 }, .{ .compat = &[_]u21{ 0x0023 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x84 }, .{ .compat = &[_]u21{ 0x0024 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x85 }, .{ .compat = &[_]u21{ 0x0025 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x86 }, .{ .compat = &[_]u21{ 0x0026 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x87 }, .{ .compat = &[_]u21{ 0x0027 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x88 }, .{ .compat = &[_]u21{ 0x0028 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x89 }, .{ .compat = &[_]u21{ 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x8a }, .{ .compat = &[_]u21{ 0x002A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x8b }, .{ .compat = &[_]u21{ 0x002B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x8c }, .{ .compat = &[_]u21{ 0x002C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x8d }, .{ .compat = &[_]u21{ 0x002D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x8e }, .{ .compat = &[_]u21{ 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x8f }, .{ .compat = &[_]u21{ 0x002F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x90 }, .{ .compat = &[_]u21{ 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x91 }, .{ .compat = &[_]u21{ 0x0031 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x92 }, .{ .compat = &[_]u21{ 0x0032 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x93 }, .{ .compat = &[_]u21{ 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x94 }, .{ .compat = &[_]u21{ 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x95 }, .{ .compat = &[_]u21{ 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x96 }, .{ .compat = &[_]u21{ 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x97 }, .{ .compat = &[_]u21{ 0x0037 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x98 }, .{ .compat = &[_]u21{ 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x99 }, .{ .compat = &[_]u21{ 0x0039 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x9a }, .{ .compat = &[_]u21{ 0x003A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x9b }, .{ .compat = &[_]u21{ 0x003B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x9c }, .{ .compat = &[_]u21{ 0x003C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x9d }, .{ .compat = &[_]u21{ 0x003D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x9e }, .{ .compat = &[_]u21{ 0x003E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0x9f }, .{ .compat = &[_]u21{ 0x003F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xa0 }, .{ .compat = &[_]u21{ 0x0040 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xa1 }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xa2 }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xa3 }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xa4 }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xa5 }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xa6 }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xa7 }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xa8 }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xa9 }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xaa }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xab }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xac }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xad }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xae }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xaf }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xb0 }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xb1 }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xb2 }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xb3 }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xb4 }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xb5 }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xb6 }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xb7 }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xb8 }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xb9 }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xba }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xbb }, .{ .compat = &[_]u21{ 0x005B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xbc }, .{ .compat = &[_]u21{ 0x005C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xbd }, .{ .compat = &[_]u21{ 0x005D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xbe }, .{ .compat = &[_]u21{ 0x005E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbc, 0xbf }, .{ .compat = &[_]u21{ 0x005F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x80 }, .{ .compat = &[_]u21{ 0x0060 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x81 }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x82 }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x83 }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x84 }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x85 }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x86 }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x87 }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x88 }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x89 }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x8a }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x8b }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x8c }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x8d }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x8e }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x8f }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x90 }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x91 }, .{ .compat = &[_]u21{ 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x92 }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x93 }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x94 }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x95 }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x96 }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x97 }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x98 }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x99 }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x9a }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x9b }, .{ .compat = &[_]u21{ 0x007B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x9c }, .{ .compat = &[_]u21{ 0x007C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x9d }, .{ .compat = &[_]u21{ 0x007D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x9e }, .{ .compat = &[_]u21{ 0x007E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0x9f }, .{ .compat = &[_]u21{ 0x2985 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xa0 }, .{ .compat = &[_]u21{ 0x2986 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xa1 }, .{ .compat = &[_]u21{ 0x3002 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xa2 }, .{ .compat = &[_]u21{ 0x300C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xa3 }, .{ .compat = &[_]u21{ 0x300D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xa4 }, .{ .compat = &[_]u21{ 0x3001 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xa5 }, .{ .compat = &[_]u21{ 0x30FB } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xa6 }, .{ .compat = &[_]u21{ 0x30F2 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xa7 }, .{ .compat = &[_]u21{ 0x30A1 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xa8 }, .{ .compat = &[_]u21{ 0x30A3 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xa9 }, .{ .compat = &[_]u21{ 0x30A5 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xaa }, .{ .compat = &[_]u21{ 0x30A7 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xab }, .{ .compat = &[_]u21{ 0x30A9 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xac }, .{ .compat = &[_]u21{ 0x30E3 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xad }, .{ .compat = &[_]u21{ 0x30E5 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xae }, .{ .compat = &[_]u21{ 0x30E7 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xaf }, .{ .compat = &[_]u21{ 0x30C3 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xb0 }, .{ .compat = &[_]u21{ 0x30FC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xb1 }, .{ .compat = &[_]u21{ 0x30A2 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xb2 }, .{ .compat = &[_]u21{ 0x30A4 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xb3 }, .{ .compat = &[_]u21{ 0x30A6 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xb4 }, .{ .compat = &[_]u21{ 0x30A8 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xb5 }, .{ .compat = &[_]u21{ 0x30AA } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xb6 }, .{ .compat = &[_]u21{ 0x30AB } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xb7 }, .{ .compat = &[_]u21{ 0x30AD } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xb8 }, .{ .compat = &[_]u21{ 0x30AF } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xb9 }, .{ .compat = &[_]u21{ 0x30B1 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xba }, .{ .compat = &[_]u21{ 0x30B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xbb }, .{ .compat = &[_]u21{ 0x30B5 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xbc }, .{ .compat = &[_]u21{ 0x30B7 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xbd }, .{ .compat = &[_]u21{ 0x30B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xbe }, .{ .compat = &[_]u21{ 0x30BB } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbd, 0xbf }, .{ .compat = &[_]u21{ 0x30BD } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x80 }, .{ .compat = &[_]u21{ 0x30BF } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x81 }, .{ .compat = &[_]u21{ 0x30C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x82 }, .{ .compat = &[_]u21{ 0x30C4 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x83 }, .{ .compat = &[_]u21{ 0x30C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x84 }, .{ .compat = &[_]u21{ 0x30C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x85 }, .{ .compat = &[_]u21{ 0x30CA } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x86 }, .{ .compat = &[_]u21{ 0x30CB } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x87 }, .{ .compat = &[_]u21{ 0x30CC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x88 }, .{ .compat = &[_]u21{ 0x30CD } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x89 }, .{ .compat = &[_]u21{ 0x30CE } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x8a }, .{ .compat = &[_]u21{ 0x30CF } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x8b }, .{ .compat = &[_]u21{ 0x30D2 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x8c }, .{ .compat = &[_]u21{ 0x30D5 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x8d }, .{ .compat = &[_]u21{ 0x30D8 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x8e }, .{ .compat = &[_]u21{ 0x30DB } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x8f }, .{ .compat = &[_]u21{ 0x30DE } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x90 }, .{ .compat = &[_]u21{ 0x30DF } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x91 }, .{ .compat = &[_]u21{ 0x30E0 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x92 }, .{ .compat = &[_]u21{ 0x30E1 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x93 }, .{ .compat = &[_]u21{ 0x30E2 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x94 }, .{ .compat = &[_]u21{ 0x30E4 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x95 }, .{ .compat = &[_]u21{ 0x30E6 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x96 }, .{ .compat = &[_]u21{ 0x30E8 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x97 }, .{ .compat = &[_]u21{ 0x30E9 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x98 }, .{ .compat = &[_]u21{ 0x30EA } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x99 }, .{ .compat = &[_]u21{ 0x30EB } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x9a }, .{ .compat = &[_]u21{ 0x30EC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x9b }, .{ .compat = &[_]u21{ 0x30ED } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x9c }, .{ .compat = &[_]u21{ 0x30EF } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x9d }, .{ .compat = &[_]u21{ 0x30F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x9e }, .{ .compat = &[_]u21{ 0x3099 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0x9f }, .{ .compat = &[_]u21{ 0x309A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xa0 }, .{ .compat = &[_]u21{ 0x3164 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xa1 }, .{ .compat = &[_]u21{ 0x3131 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xa2 }, .{ .compat = &[_]u21{ 0x3132 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xa3 }, .{ .compat = &[_]u21{ 0x3133 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xa4 }, .{ .compat = &[_]u21{ 0x3134 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xa5 }, .{ .compat = &[_]u21{ 0x3135 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xa6 }, .{ .compat = &[_]u21{ 0x3136 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xa7 }, .{ .compat = &[_]u21{ 0x3137 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xa8 }, .{ .compat = &[_]u21{ 0x3138 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xa9 }, .{ .compat = &[_]u21{ 0x3139 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xaa }, .{ .compat = &[_]u21{ 0x313A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xab }, .{ .compat = &[_]u21{ 0x313B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xac }, .{ .compat = &[_]u21{ 0x313C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xad }, .{ .compat = &[_]u21{ 0x313D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xae }, .{ .compat = &[_]u21{ 0x313E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xaf }, .{ .compat = &[_]u21{ 0x313F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xb0 }, .{ .compat = &[_]u21{ 0x3140 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xb1 }, .{ .compat = &[_]u21{ 0x3141 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xb2 }, .{ .compat = &[_]u21{ 0x3142 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xb3 }, .{ .compat = &[_]u21{ 0x3143 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xb4 }, .{ .compat = &[_]u21{ 0x3144 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xb5 }, .{ .compat = &[_]u21{ 0x3145 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xb6 }, .{ .compat = &[_]u21{ 0x3146 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xb7 }, .{ .compat = &[_]u21{ 0x3147 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xb8 }, .{ .compat = &[_]u21{ 0x3148 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xb9 }, .{ .compat = &[_]u21{ 0x3149 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xba }, .{ .compat = &[_]u21{ 0x314A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xbb }, .{ .compat = &[_]u21{ 0x314B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xbc }, .{ .compat = &[_]u21{ 0x314C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xbd }, .{ .compat = &[_]u21{ 0x314D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbe, 0xbe }, .{ .compat = &[_]u21{ 0x314E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x82 }, .{ .compat = &[_]u21{ 0x314F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x83 }, .{ .compat = &[_]u21{ 0x3150 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x84 }, .{ .compat = &[_]u21{ 0x3151 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x85 }, .{ .compat = &[_]u21{ 0x3152 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x86 }, .{ .compat = &[_]u21{ 0x3153 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x87 }, .{ .compat = &[_]u21{ 0x3154 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x8a }, .{ .compat = &[_]u21{ 0x3155 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x8b }, .{ .compat = &[_]u21{ 0x3156 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x8c }, .{ .compat = &[_]u21{ 0x3157 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x8d }, .{ .compat = &[_]u21{ 0x3158 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x8e }, .{ .compat = &[_]u21{ 0x3159 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x8f }, .{ .compat = &[_]u21{ 0x315A } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x92 }, .{ .compat = &[_]u21{ 0x315B } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x93 }, .{ .compat = &[_]u21{ 0x315C } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x94 }, .{ .compat = &[_]u21{ 0x315D } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x95 }, .{ .compat = &[_]u21{ 0x315E } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x96 }, .{ .compat = &[_]u21{ 0x315F } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x97 }, .{ .compat = &[_]u21{ 0x3160 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x9a }, .{ .compat = &[_]u21{ 0x3161 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x9b }, .{ .compat = &[_]u21{ 0x3162 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0x9c }, .{ .compat = &[_]u21{ 0x3163 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0xa0 }, .{ .compat = &[_]u21{ 0x00A2 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0xa1 }, .{ .compat = &[_]u21{ 0x00A3 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0xa2 }, .{ .compat = &[_]u21{ 0x00AC } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0xa3 }, .{ .compat = &[_]u21{ 0x00AF } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0xa4 }, .{ .compat = &[_]u21{ 0x00A6 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0xa5 }, .{ .compat = &[_]u21{ 0x00A5 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0xa6 }, .{ .compat = &[_]u21{ 0x20A9 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0xa8 }, .{ .compat = &[_]u21{ 0x2502 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0xa9 }, .{ .compat = &[_]u21{ 0x2190 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0xaa }, .{ .compat = &[_]u21{ 0x2191 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0xab }, .{ .compat = &[_]u21{ 0x2192 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0xac }, .{ .compat = &[_]u21{ 0x2193 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0xad }, .{ .compat = &[_]u21{ 0x25A0 } });
    try self.decomp_trie.add(&[_]u8{ 0xef, 0xbf, 0xae }, .{ .compat = &[_]u21{ 0x25CB } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x91, 0x82, 0x9a }, .{ .canon = [2]u21{ 0x11099, 0x110BA } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x91, 0x82, 0x9c }, .{ .canon = [2]u21{ 0x1109B, 0x110BA } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x91, 0x82, 0xab }, .{ .canon = [2]u21{ 0x110A5, 0x110BA } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x91, 0x84, 0xae }, .{ .canon = [2]u21{ 0x11131, 0x11127 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x91, 0x84, 0xaf }, .{ .canon = [2]u21{ 0x11132, 0x11127 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x91, 0x8d, 0x8b }, .{ .canon = [2]u21{ 0x11347, 0x1133E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x91, 0x8d, 0x8c }, .{ .canon = [2]u21{ 0x11347, 0x11357 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x91, 0x92, 0xbb }, .{ .canon = [2]u21{ 0x114B9, 0x114BA } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x91, 0x92, 0xbc }, .{ .canon = [2]u21{ 0x114B9, 0x114B0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x91, 0x92, 0xbe }, .{ .canon = [2]u21{ 0x114B9, 0x114BD } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x91, 0x96, 0xba }, .{ .canon = [2]u21{ 0x115B8, 0x115AF } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x91, 0x96, 0xbb }, .{ .canon = [2]u21{ 0x115B9, 0x115AF } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x91, 0xa4, 0xb8 }, .{ .canon = [2]u21{ 0x11935, 0x11930 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x85, 0x9e }, .{ .canon = [2]u21{ 0x1D157, 0x1D165 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x85, 0x9f }, .{ .canon = [2]u21{ 0x1D158, 0x1D165 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x85, 0xa0 }, .{ .canon = [2]u21{ 0x1D15F, 0x1D16E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x85, 0xa1 }, .{ .canon = [2]u21{ 0x1D15F, 0x1D16F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x85, 0xa2 }, .{ .canon = [2]u21{ 0x1D15F, 0x1D170 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x85, 0xa3 }, .{ .canon = [2]u21{ 0x1D15F, 0x1D171 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x85, 0xa4 }, .{ .canon = [2]u21{ 0x1D15F, 0x1D172 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x86, 0xbb }, .{ .canon = [2]u21{ 0x1D1B9, 0x1D165 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x86, 0xbc }, .{ .canon = [2]u21{ 0x1D1BA, 0x1D165 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x86, 0xbd }, .{ .canon = [2]u21{ 0x1D1BB, 0x1D16E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x86, 0xbe }, .{ .canon = [2]u21{ 0x1D1BC, 0x1D16E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x86, 0xbf }, .{ .canon = [2]u21{ 0x1D1BB, 0x1D16F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x87, 0x80 }, .{ .canon = [2]u21{ 0x1D1BC, 0x1D16F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x80 }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x81 }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x82 }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x83 }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x84 }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x85 }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x86 }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x87 }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x88 }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x89 }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x8a }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x8b }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x8c }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x8d }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x8e }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x8f }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x90 }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x91 }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x92 }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x93 }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x94 }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x95 }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x96 }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x97 }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x98 }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x99 }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x9a }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x9b }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x9c }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x9d }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x9e }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0x9f }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xa0 }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xa1 }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xa2 }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xa3 }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xa4 }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xa5 }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xa6 }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xa7 }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xa8 }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xa9 }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xaa }, .{ .compat = &[_]u21{ 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xab }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xac }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xad }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xae }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xaf }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xb0 }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xb1 }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xb2 }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xb3 }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xb4 }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xb5 }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xb6 }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xb7 }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xb8 }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xb9 }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xba }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xbb }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xbc }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xbd }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xbe }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x90, 0xbf }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x80 }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x81 }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x82 }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x83 }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x84 }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x85 }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x86 }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x87 }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x88 }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x89 }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x8a }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x8b }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x8c }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x8d }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x8e }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x8f }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x90 }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x91 }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x92 }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x93 }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x94 }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x96 }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x97 }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x98 }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x99 }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x9a }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x9b }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x9c }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x9d }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x9e }, .{ .compat = &[_]u21{ 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0x9f }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xa0 }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xa1 }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xa2 }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xa3 }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xa4 }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xa5 }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xa6 }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xa7 }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xa8 }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xa9 }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xaa }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xab }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xac }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xad }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xae }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xaf }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xb0 }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xb1 }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xb2 }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xb3 }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xb4 }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xb5 }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xb6 }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xb7 }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xb8 }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xb9 }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xba }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xbb }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xbc }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xbd }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xbe }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x91, 0xbf }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x80 }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x81 }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x82 }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x83 }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x84 }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x85 }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x86 }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x87 }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x88 }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x89 }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x8a }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x8b }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x8c }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x8d }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x8e }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x8f }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x90 }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x91 }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x92 }, .{ .compat = &[_]u21{ 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x93 }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x94 }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x95 }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x96 }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x97 }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x98 }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x99 }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x9a }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x9b }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x9c }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x9e }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0x9f }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xa2 }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xa5 }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xa6 }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xa9 }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xaa }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xab }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xac }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xae }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xaf }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xb0 }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xb1 }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xb2 }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xb3 }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xb4 }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xb5 }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xb6 }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xb7 }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xb8 }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xb9 }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xbb }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xbd }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xbe }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x92, 0xbf }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x80 }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x81 }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x82 }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x83 }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x85 }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x86 }, .{ .compat = &[_]u21{ 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x87 }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x88 }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x89 }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x8a }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x8b }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x8c }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x8d }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x8e }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x8f }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x90 }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x91 }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x92 }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x93 }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x94 }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x95 }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x96 }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x97 }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x98 }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x99 }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x9a }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x9b }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x9c }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x9d }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x9e }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0x9f }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xa0 }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xa1 }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xa2 }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xa3 }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xa4 }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xa5 }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xa6 }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xa7 }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xa8 }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xa9 }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xaa }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xab }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xac }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xad }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xae }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xaf }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xb0 }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xb1 }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xb2 }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xb3 }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xb4 }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xb5 }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xb6 }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xb7 }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xb8 }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xb9 }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xba }, .{ .compat = &[_]u21{ 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xbb }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xbc }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xbd }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xbe }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x93, 0xbf }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x80 }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x81 }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x82 }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x83 }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x84 }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x85 }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x87 }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x88 }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x89 }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x8a }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x8d }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x8e }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x8f }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x90 }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x91 }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x92 }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x93 }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x94 }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x96 }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x97 }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x98 }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x99 }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x9a }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x9b }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x9c }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x9e }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0x9f }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xa0 }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xa1 }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xa2 }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xa3 }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xa4 }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xa5 }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xa6 }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xa7 }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xa8 }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xa9 }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xaa }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xab }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xac }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xad }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xae }, .{ .compat = &[_]u21{ 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xaf }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xb0 }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xb1 }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xb2 }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xb3 }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xb4 }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xb5 }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xb6 }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xb7 }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xb8 }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xb9 }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xbb }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xbc }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xbd }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x94, 0xbe }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x80 }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x81 }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x82 }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x83 }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x84 }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x86 }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x8a }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x8b }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x8c }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x8d }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x8e }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x8f }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x90 }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x92 }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x93 }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x94 }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x95 }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x96 }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x97 }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x98 }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x99 }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x9a }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x9b }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x9c }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x9d }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x9e }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0x9f }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xa0 }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xa1 }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xa2 }, .{ .compat = &[_]u21{ 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xa3 }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xa4 }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xa5 }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xa6 }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xa7 }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xa8 }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xa9 }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xaa }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xab }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xac }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xad }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xae }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xaf }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xb0 }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xb1 }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xb2 }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xb3 }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xb4 }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xb5 }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xb6 }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xb7 }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xb8 }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xb9 }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xba }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xbb }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xbc }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xbd }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xbe }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x95, 0xbf }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x80 }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x81 }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x82 }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x83 }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x84 }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x85 }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x86 }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x87 }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x88 }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x89 }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x8a }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x8b }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x8c }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x8d }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x8e }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x8f }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x90 }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x91 }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x92 }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x93 }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x94 }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x95 }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x96 }, .{ .compat = &[_]u21{ 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x97 }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x98 }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x99 }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x9a }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x9b }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x9c }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x9d }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x9e }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0x9f }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xa0 }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xa1 }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xa2 }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xa3 }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xa4 }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xa5 }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xa6 }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xa7 }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xa8 }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xa9 }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xaa }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xab }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xac }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xad }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xae }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xaf }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xb0 }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xb1 }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xb2 }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xb3 }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xb4 }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xb5 }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xb6 }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xb7 }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xb8 }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xb9 }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xba }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xbb }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xbc }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xbd }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xbe }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x96, 0xbf }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x80 }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x81 }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x82 }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x83 }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x84 }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x85 }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x86 }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x87 }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x88 }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x89 }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x8a }, .{ .compat = &[_]u21{ 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x8b }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x8c }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x8d }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x8e }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x8f }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x90 }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x91 }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x92 }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x93 }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x94 }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x95 }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x96 }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x97 }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x98 }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x99 }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x9a }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x9b }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x9c }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x9d }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x9e }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0x9f }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xa0 }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xa1 }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xa2 }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xa3 }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xa4 }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xa5 }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xa6 }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xa7 }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xa8 }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xa9 }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xaa }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xab }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xac }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xad }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xae }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xaf }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xb0 }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xb1 }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xb2 }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xb3 }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xb4 }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xb5 }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xb6 }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xb7 }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xb8 }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xb9 }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xba }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xbb }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xbc }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xbd }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xbe }, .{ .compat = &[_]u21{ 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x97, 0xbf }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x80 }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x81 }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x82 }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x83 }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x84 }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x85 }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x86 }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x87 }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x88 }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x89 }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x8a }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x8b }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x8c }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x8d }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x8e }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x8f }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x90 }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x91 }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x92 }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x93 }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x94 }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x95 }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x96 }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x97 }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x98 }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x99 }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x9a }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x9b }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x9c }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x9d }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x9e }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0x9f }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xa0 }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xa1 }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xa2 }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xa3 }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xa4 }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xa5 }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xa6 }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xa7 }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xa8 }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xa9 }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xaa }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xab }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xac }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xad }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xae }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xaf }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xb0 }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xb1 }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xb2 }, .{ .compat = &[_]u21{ 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xb3 }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xb4 }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xb5 }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xb6 }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xb7 }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xb8 }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xb9 }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xba }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xbb }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xbc }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xbd }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xbe }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x98, 0xbf }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x80 }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x81 }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x82 }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x83 }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x84 }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x85 }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x86 }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x87 }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x88 }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x89 }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x8a }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x8b }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x8c }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x8d }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x8e }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x8f }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x90 }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x91 }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x92 }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x93 }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x94 }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x95 }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x96 }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x97 }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x98 }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x99 }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x9a }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x9b }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x9c }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x9d }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x9e }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0x9f }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xa0 }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xa1 }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xa2 }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xa3 }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xa4 }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xa5 }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xa6 }, .{ .compat = &[_]u21{ 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xa7 }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xa8 }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xa9 }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xaa }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xab }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xac }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xad }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xae }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xaf }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xb0 }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xb1 }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xb2 }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xb3 }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xb4 }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xb5 }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xb6 }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xb7 }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xb8 }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xb9 }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xba }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xbb }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xbc }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xbd }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xbe }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x99, 0xbf }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x80 }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x81 }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x82 }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x83 }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x84 }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x85 }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x86 }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x87 }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x88 }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x89 }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x8a }, .{ .compat = &[_]u21{ 0x0061 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x8b }, .{ .compat = &[_]u21{ 0x0062 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x8c }, .{ .compat = &[_]u21{ 0x0063 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x8d }, .{ .compat = &[_]u21{ 0x0064 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x8e }, .{ .compat = &[_]u21{ 0x0065 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x8f }, .{ .compat = &[_]u21{ 0x0066 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x90 }, .{ .compat = &[_]u21{ 0x0067 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x91 }, .{ .compat = &[_]u21{ 0x0068 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x92 }, .{ .compat = &[_]u21{ 0x0069 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x93 }, .{ .compat = &[_]u21{ 0x006A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x94 }, .{ .compat = &[_]u21{ 0x006B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x95 }, .{ .compat = &[_]u21{ 0x006C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x96 }, .{ .compat = &[_]u21{ 0x006D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x97 }, .{ .compat = &[_]u21{ 0x006E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x98 }, .{ .compat = &[_]u21{ 0x006F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x99 }, .{ .compat = &[_]u21{ 0x0070 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x9a }, .{ .compat = &[_]u21{ 0x0071 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x9b }, .{ .compat = &[_]u21{ 0x0072 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x9c }, .{ .compat = &[_]u21{ 0x0073 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x9d }, .{ .compat = &[_]u21{ 0x0074 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x9e }, .{ .compat = &[_]u21{ 0x0075 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0x9f }, .{ .compat = &[_]u21{ 0x0076 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xa0 }, .{ .compat = &[_]u21{ 0x0077 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xa1 }, .{ .compat = &[_]u21{ 0x0078 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xa2 }, .{ .compat = &[_]u21{ 0x0079 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xa3 }, .{ .compat = &[_]u21{ 0x007A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xa4 }, .{ .compat = &[_]u21{ 0x0131 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xa5 }, .{ .compat = &[_]u21{ 0x0237 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xa8 }, .{ .compat = &[_]u21{ 0x0391 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xa9 }, .{ .compat = &[_]u21{ 0x0392 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xaa }, .{ .compat = &[_]u21{ 0x0393 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xab }, .{ .compat = &[_]u21{ 0x0394 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xac }, .{ .compat = &[_]u21{ 0x0395 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xad }, .{ .compat = &[_]u21{ 0x0396 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xae }, .{ .compat = &[_]u21{ 0x0397 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xaf }, .{ .compat = &[_]u21{ 0x0398 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xb0 }, .{ .compat = &[_]u21{ 0x0399 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xb1 }, .{ .compat = &[_]u21{ 0x039A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xb2 }, .{ .compat = &[_]u21{ 0x039B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xb3 }, .{ .compat = &[_]u21{ 0x039C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xb4 }, .{ .compat = &[_]u21{ 0x039D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xb5 }, .{ .compat = &[_]u21{ 0x039E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xb6 }, .{ .compat = &[_]u21{ 0x039F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xb7 }, .{ .compat = &[_]u21{ 0x03A0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xb8 }, .{ .compat = &[_]u21{ 0x03A1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xb9 }, .{ .compat = &[_]u21{ 0x03F4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xba }, .{ .compat = &[_]u21{ 0x03A3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xbb }, .{ .compat = &[_]u21{ 0x03A4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xbc }, .{ .compat = &[_]u21{ 0x03A5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xbd }, .{ .compat = &[_]u21{ 0x03A6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xbe }, .{ .compat = &[_]u21{ 0x03A7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9a, 0xbf }, .{ .compat = &[_]u21{ 0x03A8 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x80 }, .{ .compat = &[_]u21{ 0x03A9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x81 }, .{ .compat = &[_]u21{ 0x2207 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x82 }, .{ .compat = &[_]u21{ 0x03B1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x83 }, .{ .compat = &[_]u21{ 0x03B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x84 }, .{ .compat = &[_]u21{ 0x03B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x85 }, .{ .compat = &[_]u21{ 0x03B4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x86 }, .{ .compat = &[_]u21{ 0x03B5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x87 }, .{ .compat = &[_]u21{ 0x03B6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x88 }, .{ .compat = &[_]u21{ 0x03B7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x89 }, .{ .compat = &[_]u21{ 0x03B8 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x8a }, .{ .compat = &[_]u21{ 0x03B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x8b }, .{ .compat = &[_]u21{ 0x03BA } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x8c }, .{ .compat = &[_]u21{ 0x03BB } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x8d }, .{ .compat = &[_]u21{ 0x03BC } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x8e }, .{ .compat = &[_]u21{ 0x03BD } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x8f }, .{ .compat = &[_]u21{ 0x03BE } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x90 }, .{ .compat = &[_]u21{ 0x03BF } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x91 }, .{ .compat = &[_]u21{ 0x03C0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x92 }, .{ .compat = &[_]u21{ 0x03C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x93 }, .{ .compat = &[_]u21{ 0x03C2 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x94 }, .{ .compat = &[_]u21{ 0x03C3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x95 }, .{ .compat = &[_]u21{ 0x03C4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x96 }, .{ .compat = &[_]u21{ 0x03C5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x97 }, .{ .compat = &[_]u21{ 0x03C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x98 }, .{ .compat = &[_]u21{ 0x03C7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x99 }, .{ .compat = &[_]u21{ 0x03C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x9a }, .{ .compat = &[_]u21{ 0x03C9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x9b }, .{ .compat = &[_]u21{ 0x2202 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x9c }, .{ .compat = &[_]u21{ 0x03F5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x9d }, .{ .compat = &[_]u21{ 0x03D1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x9e }, .{ .compat = &[_]u21{ 0x03F0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0x9f }, .{ .compat = &[_]u21{ 0x03D5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xa0 }, .{ .compat = &[_]u21{ 0x03F1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xa1 }, .{ .compat = &[_]u21{ 0x03D6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xa2 }, .{ .compat = &[_]u21{ 0x0391 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xa3 }, .{ .compat = &[_]u21{ 0x0392 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xa4 }, .{ .compat = &[_]u21{ 0x0393 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xa5 }, .{ .compat = &[_]u21{ 0x0394 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xa6 }, .{ .compat = &[_]u21{ 0x0395 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xa7 }, .{ .compat = &[_]u21{ 0x0396 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xa8 }, .{ .compat = &[_]u21{ 0x0397 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xa9 }, .{ .compat = &[_]u21{ 0x0398 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xaa }, .{ .compat = &[_]u21{ 0x0399 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xab }, .{ .compat = &[_]u21{ 0x039A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xac }, .{ .compat = &[_]u21{ 0x039B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xad }, .{ .compat = &[_]u21{ 0x039C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xae }, .{ .compat = &[_]u21{ 0x039D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xaf }, .{ .compat = &[_]u21{ 0x039E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xb0 }, .{ .compat = &[_]u21{ 0x039F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xb1 }, .{ .compat = &[_]u21{ 0x03A0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xb2 }, .{ .compat = &[_]u21{ 0x03A1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xb3 }, .{ .compat = &[_]u21{ 0x03F4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xb4 }, .{ .compat = &[_]u21{ 0x03A3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xb5 }, .{ .compat = &[_]u21{ 0x03A4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xb6 }, .{ .compat = &[_]u21{ 0x03A5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xb7 }, .{ .compat = &[_]u21{ 0x03A6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xb8 }, .{ .compat = &[_]u21{ 0x03A7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xb9 }, .{ .compat = &[_]u21{ 0x03A8 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xba }, .{ .compat = &[_]u21{ 0x03A9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xbb }, .{ .compat = &[_]u21{ 0x2207 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xbc }, .{ .compat = &[_]u21{ 0x03B1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xbd }, .{ .compat = &[_]u21{ 0x03B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xbe }, .{ .compat = &[_]u21{ 0x03B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9b, 0xbf }, .{ .compat = &[_]u21{ 0x03B4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x80 }, .{ .compat = &[_]u21{ 0x03B5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x81 }, .{ .compat = &[_]u21{ 0x03B6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x82 }, .{ .compat = &[_]u21{ 0x03B7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x83 }, .{ .compat = &[_]u21{ 0x03B8 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x84 }, .{ .compat = &[_]u21{ 0x03B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x85 }, .{ .compat = &[_]u21{ 0x03BA } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x86 }, .{ .compat = &[_]u21{ 0x03BB } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x87 }, .{ .compat = &[_]u21{ 0x03BC } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x88 }, .{ .compat = &[_]u21{ 0x03BD } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x89 }, .{ .compat = &[_]u21{ 0x03BE } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x8a }, .{ .compat = &[_]u21{ 0x03BF } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x8b }, .{ .compat = &[_]u21{ 0x03C0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x8c }, .{ .compat = &[_]u21{ 0x03C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x8d }, .{ .compat = &[_]u21{ 0x03C2 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x8e }, .{ .compat = &[_]u21{ 0x03C3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x8f }, .{ .compat = &[_]u21{ 0x03C4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x90 }, .{ .compat = &[_]u21{ 0x03C5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x91 }, .{ .compat = &[_]u21{ 0x03C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x92 }, .{ .compat = &[_]u21{ 0x03C7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x93 }, .{ .compat = &[_]u21{ 0x03C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x94 }, .{ .compat = &[_]u21{ 0x03C9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x95 }, .{ .compat = &[_]u21{ 0x2202 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x96 }, .{ .compat = &[_]u21{ 0x03F5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x97 }, .{ .compat = &[_]u21{ 0x03D1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x98 }, .{ .compat = &[_]u21{ 0x03F0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x99 }, .{ .compat = &[_]u21{ 0x03D5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x9a }, .{ .compat = &[_]u21{ 0x03F1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x9b }, .{ .compat = &[_]u21{ 0x03D6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x9c }, .{ .compat = &[_]u21{ 0x0391 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x9d }, .{ .compat = &[_]u21{ 0x0392 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x9e }, .{ .compat = &[_]u21{ 0x0393 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0x9f }, .{ .compat = &[_]u21{ 0x0394 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xa0 }, .{ .compat = &[_]u21{ 0x0395 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xa1 }, .{ .compat = &[_]u21{ 0x0396 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xa2 }, .{ .compat = &[_]u21{ 0x0397 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xa3 }, .{ .compat = &[_]u21{ 0x0398 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xa4 }, .{ .compat = &[_]u21{ 0x0399 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xa5 }, .{ .compat = &[_]u21{ 0x039A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xa6 }, .{ .compat = &[_]u21{ 0x039B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xa7 }, .{ .compat = &[_]u21{ 0x039C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xa8 }, .{ .compat = &[_]u21{ 0x039D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xa9 }, .{ .compat = &[_]u21{ 0x039E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xaa }, .{ .compat = &[_]u21{ 0x039F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xab }, .{ .compat = &[_]u21{ 0x03A0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xac }, .{ .compat = &[_]u21{ 0x03A1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xad }, .{ .compat = &[_]u21{ 0x03F4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xae }, .{ .compat = &[_]u21{ 0x03A3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xaf }, .{ .compat = &[_]u21{ 0x03A4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xb0 }, .{ .compat = &[_]u21{ 0x03A5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xb1 }, .{ .compat = &[_]u21{ 0x03A6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xb2 }, .{ .compat = &[_]u21{ 0x03A7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xb3 }, .{ .compat = &[_]u21{ 0x03A8 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xb4 }, .{ .compat = &[_]u21{ 0x03A9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xb5 }, .{ .compat = &[_]u21{ 0x2207 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xb6 }, .{ .compat = &[_]u21{ 0x03B1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xb7 }, .{ .compat = &[_]u21{ 0x03B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xb8 }, .{ .compat = &[_]u21{ 0x03B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xb9 }, .{ .compat = &[_]u21{ 0x03B4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xba }, .{ .compat = &[_]u21{ 0x03B5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xbb }, .{ .compat = &[_]u21{ 0x03B6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xbc }, .{ .compat = &[_]u21{ 0x03B7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xbd }, .{ .compat = &[_]u21{ 0x03B8 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xbe }, .{ .compat = &[_]u21{ 0x03B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9c, 0xbf }, .{ .compat = &[_]u21{ 0x03BA } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x80 }, .{ .compat = &[_]u21{ 0x03BB } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x81 }, .{ .compat = &[_]u21{ 0x03BC } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x82 }, .{ .compat = &[_]u21{ 0x03BD } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x83 }, .{ .compat = &[_]u21{ 0x03BE } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x84 }, .{ .compat = &[_]u21{ 0x03BF } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x85 }, .{ .compat = &[_]u21{ 0x03C0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x86 }, .{ .compat = &[_]u21{ 0x03C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x87 }, .{ .compat = &[_]u21{ 0x03C2 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x88 }, .{ .compat = &[_]u21{ 0x03C3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x89 }, .{ .compat = &[_]u21{ 0x03C4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x8a }, .{ .compat = &[_]u21{ 0x03C5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x8b }, .{ .compat = &[_]u21{ 0x03C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x8c }, .{ .compat = &[_]u21{ 0x03C7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x8d }, .{ .compat = &[_]u21{ 0x03C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x8e }, .{ .compat = &[_]u21{ 0x03C9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x8f }, .{ .compat = &[_]u21{ 0x2202 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x90 }, .{ .compat = &[_]u21{ 0x03F5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x91 }, .{ .compat = &[_]u21{ 0x03D1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x92 }, .{ .compat = &[_]u21{ 0x03F0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x93 }, .{ .compat = &[_]u21{ 0x03D5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x94 }, .{ .compat = &[_]u21{ 0x03F1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x95 }, .{ .compat = &[_]u21{ 0x03D6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x96 }, .{ .compat = &[_]u21{ 0x0391 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x97 }, .{ .compat = &[_]u21{ 0x0392 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x98 }, .{ .compat = &[_]u21{ 0x0393 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x99 }, .{ .compat = &[_]u21{ 0x0394 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x9a }, .{ .compat = &[_]u21{ 0x0395 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x9b }, .{ .compat = &[_]u21{ 0x0396 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x9c }, .{ .compat = &[_]u21{ 0x0397 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x9d }, .{ .compat = &[_]u21{ 0x0398 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x9e }, .{ .compat = &[_]u21{ 0x0399 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0x9f }, .{ .compat = &[_]u21{ 0x039A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xa0 }, .{ .compat = &[_]u21{ 0x039B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xa1 }, .{ .compat = &[_]u21{ 0x039C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xa2 }, .{ .compat = &[_]u21{ 0x039D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xa3 }, .{ .compat = &[_]u21{ 0x039E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xa4 }, .{ .compat = &[_]u21{ 0x039F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xa5 }, .{ .compat = &[_]u21{ 0x03A0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xa6 }, .{ .compat = &[_]u21{ 0x03A1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xa7 }, .{ .compat = &[_]u21{ 0x03F4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xa8 }, .{ .compat = &[_]u21{ 0x03A3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xa9 }, .{ .compat = &[_]u21{ 0x03A4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xaa }, .{ .compat = &[_]u21{ 0x03A5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xab }, .{ .compat = &[_]u21{ 0x03A6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xac }, .{ .compat = &[_]u21{ 0x03A7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xad }, .{ .compat = &[_]u21{ 0x03A8 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xae }, .{ .compat = &[_]u21{ 0x03A9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xaf }, .{ .compat = &[_]u21{ 0x2207 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xb0 }, .{ .compat = &[_]u21{ 0x03B1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xb1 }, .{ .compat = &[_]u21{ 0x03B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xb2 }, .{ .compat = &[_]u21{ 0x03B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xb3 }, .{ .compat = &[_]u21{ 0x03B4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xb4 }, .{ .compat = &[_]u21{ 0x03B5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xb5 }, .{ .compat = &[_]u21{ 0x03B6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xb6 }, .{ .compat = &[_]u21{ 0x03B7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xb7 }, .{ .compat = &[_]u21{ 0x03B8 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xb8 }, .{ .compat = &[_]u21{ 0x03B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xb9 }, .{ .compat = &[_]u21{ 0x03BA } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xba }, .{ .compat = &[_]u21{ 0x03BB } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xbb }, .{ .compat = &[_]u21{ 0x03BC } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xbc }, .{ .compat = &[_]u21{ 0x03BD } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xbd }, .{ .compat = &[_]u21{ 0x03BE } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xbe }, .{ .compat = &[_]u21{ 0x03BF } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9d, 0xbf }, .{ .compat = &[_]u21{ 0x03C0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x80 }, .{ .compat = &[_]u21{ 0x03C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x81 }, .{ .compat = &[_]u21{ 0x03C2 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x82 }, .{ .compat = &[_]u21{ 0x03C3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x83 }, .{ .compat = &[_]u21{ 0x03C4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x84 }, .{ .compat = &[_]u21{ 0x03C5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x85 }, .{ .compat = &[_]u21{ 0x03C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x86 }, .{ .compat = &[_]u21{ 0x03C7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x87 }, .{ .compat = &[_]u21{ 0x03C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x88 }, .{ .compat = &[_]u21{ 0x03C9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x89 }, .{ .compat = &[_]u21{ 0x2202 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x8a }, .{ .compat = &[_]u21{ 0x03F5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x8b }, .{ .compat = &[_]u21{ 0x03D1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x8c }, .{ .compat = &[_]u21{ 0x03F0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x8d }, .{ .compat = &[_]u21{ 0x03D5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x8e }, .{ .compat = &[_]u21{ 0x03F1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x8f }, .{ .compat = &[_]u21{ 0x03D6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x90 }, .{ .compat = &[_]u21{ 0x0391 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x91 }, .{ .compat = &[_]u21{ 0x0392 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x92 }, .{ .compat = &[_]u21{ 0x0393 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x93 }, .{ .compat = &[_]u21{ 0x0394 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x94 }, .{ .compat = &[_]u21{ 0x0395 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x95 }, .{ .compat = &[_]u21{ 0x0396 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x96 }, .{ .compat = &[_]u21{ 0x0397 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x97 }, .{ .compat = &[_]u21{ 0x0398 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x98 }, .{ .compat = &[_]u21{ 0x0399 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x99 }, .{ .compat = &[_]u21{ 0x039A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x9a }, .{ .compat = &[_]u21{ 0x039B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x9b }, .{ .compat = &[_]u21{ 0x039C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x9c }, .{ .compat = &[_]u21{ 0x039D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x9d }, .{ .compat = &[_]u21{ 0x039E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x9e }, .{ .compat = &[_]u21{ 0x039F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0x9f }, .{ .compat = &[_]u21{ 0x03A0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xa0 }, .{ .compat = &[_]u21{ 0x03A1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xa1 }, .{ .compat = &[_]u21{ 0x03F4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xa2 }, .{ .compat = &[_]u21{ 0x03A3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xa3 }, .{ .compat = &[_]u21{ 0x03A4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xa4 }, .{ .compat = &[_]u21{ 0x03A5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xa5 }, .{ .compat = &[_]u21{ 0x03A6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xa6 }, .{ .compat = &[_]u21{ 0x03A7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xa7 }, .{ .compat = &[_]u21{ 0x03A8 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xa8 }, .{ .compat = &[_]u21{ 0x03A9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xa9 }, .{ .compat = &[_]u21{ 0x2207 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xaa }, .{ .compat = &[_]u21{ 0x03B1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xab }, .{ .compat = &[_]u21{ 0x03B2 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xac }, .{ .compat = &[_]u21{ 0x03B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xad }, .{ .compat = &[_]u21{ 0x03B4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xae }, .{ .compat = &[_]u21{ 0x03B5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xaf }, .{ .compat = &[_]u21{ 0x03B6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xb0 }, .{ .compat = &[_]u21{ 0x03B7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xb1 }, .{ .compat = &[_]u21{ 0x03B8 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xb2 }, .{ .compat = &[_]u21{ 0x03B9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xb3 }, .{ .compat = &[_]u21{ 0x03BA } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xb4 }, .{ .compat = &[_]u21{ 0x03BB } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xb5 }, .{ .compat = &[_]u21{ 0x03BC } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xb6 }, .{ .compat = &[_]u21{ 0x03BD } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xb7 }, .{ .compat = &[_]u21{ 0x03BE } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xb8 }, .{ .compat = &[_]u21{ 0x03BF } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xb9 }, .{ .compat = &[_]u21{ 0x03C0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xba }, .{ .compat = &[_]u21{ 0x03C1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xbb }, .{ .compat = &[_]u21{ 0x03C2 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xbc }, .{ .compat = &[_]u21{ 0x03C3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xbd }, .{ .compat = &[_]u21{ 0x03C4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xbe }, .{ .compat = &[_]u21{ 0x03C5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9e, 0xbf }, .{ .compat = &[_]u21{ 0x03C6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x80 }, .{ .compat = &[_]u21{ 0x03C7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x81 }, .{ .compat = &[_]u21{ 0x03C8 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x82 }, .{ .compat = &[_]u21{ 0x03C9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x83 }, .{ .compat = &[_]u21{ 0x2202 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x84 }, .{ .compat = &[_]u21{ 0x03F5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x85 }, .{ .compat = &[_]u21{ 0x03D1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x86 }, .{ .compat = &[_]u21{ 0x03F0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x87 }, .{ .compat = &[_]u21{ 0x03D5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x88 }, .{ .compat = &[_]u21{ 0x03F1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x89 }, .{ .compat = &[_]u21{ 0x03D6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x8a }, .{ .compat = &[_]u21{ 0x03DC } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x8b }, .{ .compat = &[_]u21{ 0x03DD } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x8e }, .{ .compat = &[_]u21{ 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x8f }, .{ .compat = &[_]u21{ 0x0031 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x90 }, .{ .compat = &[_]u21{ 0x0032 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x91 }, .{ .compat = &[_]u21{ 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x92 }, .{ .compat = &[_]u21{ 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x93 }, .{ .compat = &[_]u21{ 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x94 }, .{ .compat = &[_]u21{ 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x95 }, .{ .compat = &[_]u21{ 0x0037 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x96 }, .{ .compat = &[_]u21{ 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x97 }, .{ .compat = &[_]u21{ 0x0039 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x98 }, .{ .compat = &[_]u21{ 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x99 }, .{ .compat = &[_]u21{ 0x0031 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x9a }, .{ .compat = &[_]u21{ 0x0032 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x9b }, .{ .compat = &[_]u21{ 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x9c }, .{ .compat = &[_]u21{ 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x9d }, .{ .compat = &[_]u21{ 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x9e }, .{ .compat = &[_]u21{ 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0x9f }, .{ .compat = &[_]u21{ 0x0037 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xa0 }, .{ .compat = &[_]u21{ 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xa1 }, .{ .compat = &[_]u21{ 0x0039 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xa2 }, .{ .compat = &[_]u21{ 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xa3 }, .{ .compat = &[_]u21{ 0x0031 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xa4 }, .{ .compat = &[_]u21{ 0x0032 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xa5 }, .{ .compat = &[_]u21{ 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xa6 }, .{ .compat = &[_]u21{ 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xa7 }, .{ .compat = &[_]u21{ 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xa8 }, .{ .compat = &[_]u21{ 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xa9 }, .{ .compat = &[_]u21{ 0x0037 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xaa }, .{ .compat = &[_]u21{ 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xab }, .{ .compat = &[_]u21{ 0x0039 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xac }, .{ .compat = &[_]u21{ 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xad }, .{ .compat = &[_]u21{ 0x0031 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xae }, .{ .compat = &[_]u21{ 0x0032 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xaf }, .{ .compat = &[_]u21{ 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xb0 }, .{ .compat = &[_]u21{ 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xb1 }, .{ .compat = &[_]u21{ 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xb2 }, .{ .compat = &[_]u21{ 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xb3 }, .{ .compat = &[_]u21{ 0x0037 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xb4 }, .{ .compat = &[_]u21{ 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xb5 }, .{ .compat = &[_]u21{ 0x0039 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xb6 }, .{ .compat = &[_]u21{ 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xb7 }, .{ .compat = &[_]u21{ 0x0031 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xb8 }, .{ .compat = &[_]u21{ 0x0032 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xb9 }, .{ .compat = &[_]u21{ 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xba }, .{ .compat = &[_]u21{ 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xbb }, .{ .compat = &[_]u21{ 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xbc }, .{ .compat = &[_]u21{ 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xbd }, .{ .compat = &[_]u21{ 0x0037 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xbe }, .{ .compat = &[_]u21{ 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9d, 0x9f, 0xbf }, .{ .compat = &[_]u21{ 0x0039 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x80 }, .{ .compat = &[_]u21{ 0x0627 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x81 }, .{ .compat = &[_]u21{ 0x0628 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x82 }, .{ .compat = &[_]u21{ 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x83 }, .{ .compat = &[_]u21{ 0x062F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x85 }, .{ .compat = &[_]u21{ 0x0648 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x86 }, .{ .compat = &[_]u21{ 0x0632 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x87 }, .{ .compat = &[_]u21{ 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x88 }, .{ .compat = &[_]u21{ 0x0637 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x89 }, .{ .compat = &[_]u21{ 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x8a }, .{ .compat = &[_]u21{ 0x0643 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x8b }, .{ .compat = &[_]u21{ 0x0644 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x8c }, .{ .compat = &[_]u21{ 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x8d }, .{ .compat = &[_]u21{ 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x8e }, .{ .compat = &[_]u21{ 0x0633 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x8f }, .{ .compat = &[_]u21{ 0x0639 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x90 }, .{ .compat = &[_]u21{ 0x0641 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x91 }, .{ .compat = &[_]u21{ 0x0635 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x92 }, .{ .compat = &[_]u21{ 0x0642 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x93 }, .{ .compat = &[_]u21{ 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x94 }, .{ .compat = &[_]u21{ 0x0634 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x95 }, .{ .compat = &[_]u21{ 0x062A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x96 }, .{ .compat = &[_]u21{ 0x062B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x97 }, .{ .compat = &[_]u21{ 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x98 }, .{ .compat = &[_]u21{ 0x0630 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x99 }, .{ .compat = &[_]u21{ 0x0636 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x9a }, .{ .compat = &[_]u21{ 0x0638 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x9b }, .{ .compat = &[_]u21{ 0x063A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x9c }, .{ .compat = &[_]u21{ 0x066E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x9d }, .{ .compat = &[_]u21{ 0x06BA } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x9e }, .{ .compat = &[_]u21{ 0x06A1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0x9f }, .{ .compat = &[_]u21{ 0x066F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xa1 }, .{ .compat = &[_]u21{ 0x0628 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xa2 }, .{ .compat = &[_]u21{ 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xa4 }, .{ .compat = &[_]u21{ 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xa7 }, .{ .compat = &[_]u21{ 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xa9 }, .{ .compat = &[_]u21{ 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xaa }, .{ .compat = &[_]u21{ 0x0643 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xab }, .{ .compat = &[_]u21{ 0x0644 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xac }, .{ .compat = &[_]u21{ 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xad }, .{ .compat = &[_]u21{ 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xae }, .{ .compat = &[_]u21{ 0x0633 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xaf }, .{ .compat = &[_]u21{ 0x0639 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xb0 }, .{ .compat = &[_]u21{ 0x0641 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xb1 }, .{ .compat = &[_]u21{ 0x0635 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xb2 }, .{ .compat = &[_]u21{ 0x0642 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xb4 }, .{ .compat = &[_]u21{ 0x0634 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xb5 }, .{ .compat = &[_]u21{ 0x062A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xb6 }, .{ .compat = &[_]u21{ 0x062B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xb7 }, .{ .compat = &[_]u21{ 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xb9 }, .{ .compat = &[_]u21{ 0x0636 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb8, 0xbb }, .{ .compat = &[_]u21{ 0x063A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0x82 }, .{ .compat = &[_]u21{ 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0x87 }, .{ .compat = &[_]u21{ 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0x89 }, .{ .compat = &[_]u21{ 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0x8b }, .{ .compat = &[_]u21{ 0x0644 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0x8d }, .{ .compat = &[_]u21{ 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0x8e }, .{ .compat = &[_]u21{ 0x0633 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0x8f }, .{ .compat = &[_]u21{ 0x0639 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0x91 }, .{ .compat = &[_]u21{ 0x0635 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0x92 }, .{ .compat = &[_]u21{ 0x0642 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0x94 }, .{ .compat = &[_]u21{ 0x0634 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0x97 }, .{ .compat = &[_]u21{ 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0x99 }, .{ .compat = &[_]u21{ 0x0636 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0x9b }, .{ .compat = &[_]u21{ 0x063A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0x9d }, .{ .compat = &[_]u21{ 0x06BA } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0x9f }, .{ .compat = &[_]u21{ 0x066F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xa1 }, .{ .compat = &[_]u21{ 0x0628 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xa2 }, .{ .compat = &[_]u21{ 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xa4 }, .{ .compat = &[_]u21{ 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xa7 }, .{ .compat = &[_]u21{ 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xa8 }, .{ .compat = &[_]u21{ 0x0637 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xa9 }, .{ .compat = &[_]u21{ 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xaa }, .{ .compat = &[_]u21{ 0x0643 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xac }, .{ .compat = &[_]u21{ 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xad }, .{ .compat = &[_]u21{ 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xae }, .{ .compat = &[_]u21{ 0x0633 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xaf }, .{ .compat = &[_]u21{ 0x0639 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xb0 }, .{ .compat = &[_]u21{ 0x0641 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xb1 }, .{ .compat = &[_]u21{ 0x0635 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xb2 }, .{ .compat = &[_]u21{ 0x0642 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xb4 }, .{ .compat = &[_]u21{ 0x0634 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xb5 }, .{ .compat = &[_]u21{ 0x062A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xb6 }, .{ .compat = &[_]u21{ 0x062B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xb7 }, .{ .compat = &[_]u21{ 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xb9 }, .{ .compat = &[_]u21{ 0x0636 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xba }, .{ .compat = &[_]u21{ 0x0638 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xbb }, .{ .compat = &[_]u21{ 0x063A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xbc }, .{ .compat = &[_]u21{ 0x066E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xb9, 0xbe }, .{ .compat = &[_]u21{ 0x06A1 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x80 }, .{ .compat = &[_]u21{ 0x0627 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x81 }, .{ .compat = &[_]u21{ 0x0628 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x82 }, .{ .compat = &[_]u21{ 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x83 }, .{ .compat = &[_]u21{ 0x062F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x84 }, .{ .compat = &[_]u21{ 0x0647 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x85 }, .{ .compat = &[_]u21{ 0x0648 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x86 }, .{ .compat = &[_]u21{ 0x0632 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x87 }, .{ .compat = &[_]u21{ 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x88 }, .{ .compat = &[_]u21{ 0x0637 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x89 }, .{ .compat = &[_]u21{ 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x8b }, .{ .compat = &[_]u21{ 0x0644 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x8c }, .{ .compat = &[_]u21{ 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x8d }, .{ .compat = &[_]u21{ 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x8e }, .{ .compat = &[_]u21{ 0x0633 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x8f }, .{ .compat = &[_]u21{ 0x0639 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x90 }, .{ .compat = &[_]u21{ 0x0641 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x91 }, .{ .compat = &[_]u21{ 0x0635 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x92 }, .{ .compat = &[_]u21{ 0x0642 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x93 }, .{ .compat = &[_]u21{ 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x94 }, .{ .compat = &[_]u21{ 0x0634 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x95 }, .{ .compat = &[_]u21{ 0x062A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x96 }, .{ .compat = &[_]u21{ 0x062B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x97 }, .{ .compat = &[_]u21{ 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x98 }, .{ .compat = &[_]u21{ 0x0630 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x99 }, .{ .compat = &[_]u21{ 0x0636 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x9a }, .{ .compat = &[_]u21{ 0x0638 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0x9b }, .{ .compat = &[_]u21{ 0x063A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xa1 }, .{ .compat = &[_]u21{ 0x0628 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xa2 }, .{ .compat = &[_]u21{ 0x062C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xa3 }, .{ .compat = &[_]u21{ 0x062F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xa5 }, .{ .compat = &[_]u21{ 0x0648 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xa6 }, .{ .compat = &[_]u21{ 0x0632 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xa7 }, .{ .compat = &[_]u21{ 0x062D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xa8 }, .{ .compat = &[_]u21{ 0x0637 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xa9 }, .{ .compat = &[_]u21{ 0x064A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xab }, .{ .compat = &[_]u21{ 0x0644 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xac }, .{ .compat = &[_]u21{ 0x0645 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xad }, .{ .compat = &[_]u21{ 0x0646 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xae }, .{ .compat = &[_]u21{ 0x0633 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xaf }, .{ .compat = &[_]u21{ 0x0639 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xb0 }, .{ .compat = &[_]u21{ 0x0641 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xb1 }, .{ .compat = &[_]u21{ 0x0635 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xb2 }, .{ .compat = &[_]u21{ 0x0642 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xb3 }, .{ .compat = &[_]u21{ 0x0631 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xb4 }, .{ .compat = &[_]u21{ 0x0634 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xb5 }, .{ .compat = &[_]u21{ 0x062A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xb6 }, .{ .compat = &[_]u21{ 0x062B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xb7 }, .{ .compat = &[_]u21{ 0x062E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xb8 }, .{ .compat = &[_]u21{ 0x0630 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xb9 }, .{ .compat = &[_]u21{ 0x0636 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xba }, .{ .compat = &[_]u21{ 0x0638 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9e, 0xba, 0xbb }, .{ .compat = &[_]u21{ 0x063A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x80 }, .{ .compat = &[_]u21{ 0x0030, 0x002E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x81 }, .{ .compat = &[_]u21{ 0x0030, 0x002C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x82 }, .{ .compat = &[_]u21{ 0x0031, 0x002C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x83 }, .{ .compat = &[_]u21{ 0x0032, 0x002C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x84 }, .{ .compat = &[_]u21{ 0x0033, 0x002C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x85 }, .{ .compat = &[_]u21{ 0x0034, 0x002C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x86 }, .{ .compat = &[_]u21{ 0x0035, 0x002C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x87 }, .{ .compat = &[_]u21{ 0x0036, 0x002C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x88 }, .{ .compat = &[_]u21{ 0x0037, 0x002C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x89 }, .{ .compat = &[_]u21{ 0x0038, 0x002C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x8a }, .{ .compat = &[_]u21{ 0x0039, 0x002C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x90 }, .{ .compat = &[_]u21{ 0x0028, 0x0041, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x91 }, .{ .compat = &[_]u21{ 0x0028, 0x0042, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x92 }, .{ .compat = &[_]u21{ 0x0028, 0x0043, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x93 }, .{ .compat = &[_]u21{ 0x0028, 0x0044, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x94 }, .{ .compat = &[_]u21{ 0x0028, 0x0045, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x95 }, .{ .compat = &[_]u21{ 0x0028, 0x0046, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x96 }, .{ .compat = &[_]u21{ 0x0028, 0x0047, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x97 }, .{ .compat = &[_]u21{ 0x0028, 0x0048, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x98 }, .{ .compat = &[_]u21{ 0x0028, 0x0049, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x99 }, .{ .compat = &[_]u21{ 0x0028, 0x004A, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x9a }, .{ .compat = &[_]u21{ 0x0028, 0x004B, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x9b }, .{ .compat = &[_]u21{ 0x0028, 0x004C, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x9c }, .{ .compat = &[_]u21{ 0x0028, 0x004D, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x9d }, .{ .compat = &[_]u21{ 0x0028, 0x004E, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x9e }, .{ .compat = &[_]u21{ 0x0028, 0x004F, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0x9f }, .{ .compat = &[_]u21{ 0x0028, 0x0050, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xa0 }, .{ .compat = &[_]u21{ 0x0028, 0x0051, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xa1 }, .{ .compat = &[_]u21{ 0x0028, 0x0052, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xa2 }, .{ .compat = &[_]u21{ 0x0028, 0x0053, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xa3 }, .{ .compat = &[_]u21{ 0x0028, 0x0054, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xa4 }, .{ .compat = &[_]u21{ 0x0028, 0x0055, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xa5 }, .{ .compat = &[_]u21{ 0x0028, 0x0056, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xa6 }, .{ .compat = &[_]u21{ 0x0028, 0x0057, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xa7 }, .{ .compat = &[_]u21{ 0x0028, 0x0058, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xa8 }, .{ .compat = &[_]u21{ 0x0028, 0x0059, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xa9 }, .{ .compat = &[_]u21{ 0x0028, 0x005A, 0x0029 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xaa }, .{ .compat = &[_]u21{ 0x3014, 0x0053, 0x3015 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xab }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xac }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xad }, .{ .compat = &[_]u21{ 0x0043, 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xae }, .{ .compat = &[_]u21{ 0x0057, 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xb0 }, .{ .compat = &[_]u21{ 0x0041 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xb1 }, .{ .compat = &[_]u21{ 0x0042 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xb2 }, .{ .compat = &[_]u21{ 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xb3 }, .{ .compat = &[_]u21{ 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xb4 }, .{ .compat = &[_]u21{ 0x0045 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xb5 }, .{ .compat = &[_]u21{ 0x0046 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xb6 }, .{ .compat = &[_]u21{ 0x0047 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xb7 }, .{ .compat = &[_]u21{ 0x0048 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xb8 }, .{ .compat = &[_]u21{ 0x0049 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xb9 }, .{ .compat = &[_]u21{ 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xba }, .{ .compat = &[_]u21{ 0x004B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xbb }, .{ .compat = &[_]u21{ 0x004C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xbc }, .{ .compat = &[_]u21{ 0x004D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xbd }, .{ .compat = &[_]u21{ 0x004E } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xbe }, .{ .compat = &[_]u21{ 0x004F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x84, 0xbf }, .{ .compat = &[_]u21{ 0x0050 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x80 }, .{ .compat = &[_]u21{ 0x0051 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x81 }, .{ .compat = &[_]u21{ 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x82 }, .{ .compat = &[_]u21{ 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x83 }, .{ .compat = &[_]u21{ 0x0054 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x84 }, .{ .compat = &[_]u21{ 0x0055 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x85 }, .{ .compat = &[_]u21{ 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x86 }, .{ .compat = &[_]u21{ 0x0057 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x87 }, .{ .compat = &[_]u21{ 0x0058 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x88 }, .{ .compat = &[_]u21{ 0x0059 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x89 }, .{ .compat = &[_]u21{ 0x005A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x8a }, .{ .compat = &[_]u21{ 0x0048, 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x8b }, .{ .compat = &[_]u21{ 0x004D, 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x8c }, .{ .compat = &[_]u21{ 0x0053, 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x8d }, .{ .compat = &[_]u21{ 0x0053, 0x0053 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x8e }, .{ .compat = &[_]u21{ 0x0050, 0x0050, 0x0056 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0x8f }, .{ .compat = &[_]u21{ 0x0057, 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0xaa }, .{ .compat = &[_]u21{ 0x004D, 0x0043 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0xab }, .{ .compat = &[_]u21{ 0x004D, 0x0044 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x85, 0xac }, .{ .compat = &[_]u21{ 0x004D, 0x0052 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x86, 0x90 }, .{ .compat = &[_]u21{ 0x0044, 0x004A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x80 }, .{ .compat = &[_]u21{ 0x307B, 0x304B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x81 }, .{ .compat = &[_]u21{ 0x30B3, 0x30B3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x82 }, .{ .compat = &[_]u21{ 0x30B5 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x90 }, .{ .compat = &[_]u21{ 0x624B } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x91 }, .{ .compat = &[_]u21{ 0x5B57 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x92 }, .{ .compat = &[_]u21{ 0x53CC } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x93 }, .{ .compat = &[_]u21{ 0x30C7 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x94 }, .{ .compat = &[_]u21{ 0x4E8C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x95 }, .{ .compat = &[_]u21{ 0x591A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x96 }, .{ .compat = &[_]u21{ 0x89E3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x97 }, .{ .compat = &[_]u21{ 0x5929 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x98 }, .{ .compat = &[_]u21{ 0x4EA4 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x99 }, .{ .compat = &[_]u21{ 0x6620 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x9a }, .{ .compat = &[_]u21{ 0x7121 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x9b }, .{ .compat = &[_]u21{ 0x6599 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x9c }, .{ .compat = &[_]u21{ 0x524D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x9d }, .{ .compat = &[_]u21{ 0x5F8C } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x9e }, .{ .compat = &[_]u21{ 0x518D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0x9f }, .{ .compat = &[_]u21{ 0x65B0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xa0 }, .{ .compat = &[_]u21{ 0x521D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xa1 }, .{ .compat = &[_]u21{ 0x7D42 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xa2 }, .{ .compat = &[_]u21{ 0x751F } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xa3 }, .{ .compat = &[_]u21{ 0x8CA9 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xa4 }, .{ .compat = &[_]u21{ 0x58F0 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xa5 }, .{ .compat = &[_]u21{ 0x5439 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xa6 }, .{ .compat = &[_]u21{ 0x6F14 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xa7 }, .{ .compat = &[_]u21{ 0x6295 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xa8 }, .{ .compat = &[_]u21{ 0x6355 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xa9 }, .{ .compat = &[_]u21{ 0x4E00 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xaa }, .{ .compat = &[_]u21{ 0x4E09 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xab }, .{ .compat = &[_]u21{ 0x904A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xac }, .{ .compat = &[_]u21{ 0x5DE6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xad }, .{ .compat = &[_]u21{ 0x4E2D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xae }, .{ .compat = &[_]u21{ 0x53F3 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xaf }, .{ .compat = &[_]u21{ 0x6307 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xb0 }, .{ .compat = &[_]u21{ 0x8D70 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xb1 }, .{ .compat = &[_]u21{ 0x6253 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xb2 }, .{ .compat = &[_]u21{ 0x7981 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xb3 }, .{ .compat = &[_]u21{ 0x7A7A } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xb4 }, .{ .compat = &[_]u21{ 0x5408 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xb5 }, .{ .compat = &[_]u21{ 0x6E80 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xb6 }, .{ .compat = &[_]u21{ 0x6709 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xb7 }, .{ .compat = &[_]u21{ 0x6708 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xb8 }, .{ .compat = &[_]u21{ 0x7533 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xb9 }, .{ .compat = &[_]u21{ 0x5272 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xba }, .{ .compat = &[_]u21{ 0x55B6 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x88, 0xbb }, .{ .compat = &[_]u21{ 0x914D } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x89, 0x80 }, .{ .compat = &[_]u21{ 0x3014, 0x672C, 0x3015 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x89, 0x81 }, .{ .compat = &[_]u21{ 0x3014, 0x4E09, 0x3015 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x89, 0x82 }, .{ .compat = &[_]u21{ 0x3014, 0x4E8C, 0x3015 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x89, 0x83 }, .{ .compat = &[_]u21{ 0x3014, 0x5B89, 0x3015 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x89, 0x84 }, .{ .compat = &[_]u21{ 0x3014, 0x70B9, 0x3015 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x89, 0x85 }, .{ .compat = &[_]u21{ 0x3014, 0x6253, 0x3015 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x89, 0x86 }, .{ .compat = &[_]u21{ 0x3014, 0x76D7, 0x3015 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x89, 0x87 }, .{ .compat = &[_]u21{ 0x3014, 0x52DD, 0x3015 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x89, 0x88 }, .{ .compat = &[_]u21{ 0x3014, 0x6557, 0x3015 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x89, 0x90 }, .{ .compat = &[_]u21{ 0x5F97 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0x89, 0x91 }, .{ .compat = &[_]u21{ 0x53EF } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0xaf, 0xb0 }, .{ .compat = &[_]u21{ 0x0030 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0xaf, 0xb1 }, .{ .compat = &[_]u21{ 0x0031 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0xaf, 0xb2 }, .{ .compat = &[_]u21{ 0x0032 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0xaf, 0xb3 }, .{ .compat = &[_]u21{ 0x0033 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0xaf, 0xb4 }, .{ .compat = &[_]u21{ 0x0034 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0xaf, 0xb5 }, .{ .compat = &[_]u21{ 0x0035 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0xaf, 0xb6 }, .{ .compat = &[_]u21{ 0x0036 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0xaf, 0xb7 }, .{ .compat = &[_]u21{ 0x0037 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0xaf, 0xb8 }, .{ .compat = &[_]u21{ 0x0038 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0x9f, 0xaf, 0xb9 }, .{ .compat = &[_]u21{ 0x0039 } });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x80 }, .{ .single = 0x4E3D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x81 }, .{ .single = 0x4E38 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x82 }, .{ .single = 0x4E41 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x83 }, .{ .single = 0x20122 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x84 }, .{ .single = 0x4F60 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x85 }, .{ .single = 0x4FAE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x86 }, .{ .single = 0x4FBB });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x87 }, .{ .single = 0x5002 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x88 }, .{ .single = 0x507A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x89 }, .{ .single = 0x5099 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x8a }, .{ .single = 0x50E7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x8b }, .{ .single = 0x50CF });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x8c }, .{ .single = 0x349E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x8d }, .{ .single = 0x2063A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x8e }, .{ .single = 0x514D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x8f }, .{ .single = 0x5154 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x90 }, .{ .single = 0x5164 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x91 }, .{ .single = 0x5177 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x92 }, .{ .single = 0x2051C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x93 }, .{ .single = 0x34B9 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x94 }, .{ .single = 0x5167 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x95 }, .{ .single = 0x518D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x96 }, .{ .single = 0x2054B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x97 }, .{ .single = 0x5197 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x98 }, .{ .single = 0x51A4 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x99 }, .{ .single = 0x4ECC });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x9a }, .{ .single = 0x51AC });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x9b }, .{ .single = 0x51B5 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x9c }, .{ .single = 0x291DF });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x9d }, .{ .single = 0x51F5 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x9e }, .{ .single = 0x5203 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0x9f }, .{ .single = 0x34DF });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xa0 }, .{ .single = 0x523B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xa1 }, .{ .single = 0x5246 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xa2 }, .{ .single = 0x5272 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xa3 }, .{ .single = 0x5277 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xa4 }, .{ .single = 0x3515 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xa5 }, .{ .single = 0x52C7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xa6 }, .{ .single = 0x52C9 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xa7 }, .{ .single = 0x52E4 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xa8 }, .{ .single = 0x52FA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xa9 }, .{ .single = 0x5305 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xaa }, .{ .single = 0x5306 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xab }, .{ .single = 0x5317 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xac }, .{ .single = 0x5349 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xad }, .{ .single = 0x5351 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xae }, .{ .single = 0x535A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xaf }, .{ .single = 0x5373 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xb0 }, .{ .single = 0x537D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xb1 }, .{ .single = 0x537F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xb2 }, .{ .single = 0x537F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xb3 }, .{ .single = 0x537F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xb4 }, .{ .single = 0x20A2C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xb5 }, .{ .single = 0x7070 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xb6 }, .{ .single = 0x53CA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xb7 }, .{ .single = 0x53DF });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xb8 }, .{ .single = 0x20B63 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xb9 }, .{ .single = 0x53EB });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xba }, .{ .single = 0x53F1 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xbb }, .{ .single = 0x5406 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xbc }, .{ .single = 0x549E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xbd }, .{ .single = 0x5438 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xbe }, .{ .single = 0x5448 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa0, 0xbf }, .{ .single = 0x5468 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x80 }, .{ .single = 0x54A2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x81 }, .{ .single = 0x54F6 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x82 }, .{ .single = 0x5510 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x83 }, .{ .single = 0x5553 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x84 }, .{ .single = 0x5563 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x85 }, .{ .single = 0x5584 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x86 }, .{ .single = 0x5584 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x87 }, .{ .single = 0x5599 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x88 }, .{ .single = 0x55AB });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x89 }, .{ .single = 0x55B3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x8a }, .{ .single = 0x55C2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x8b }, .{ .single = 0x5716 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x8c }, .{ .single = 0x5606 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x8d }, .{ .single = 0x5717 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x8e }, .{ .single = 0x5651 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x8f }, .{ .single = 0x5674 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x90 }, .{ .single = 0x5207 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x91 }, .{ .single = 0x58EE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x92 }, .{ .single = 0x57CE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x93 }, .{ .single = 0x57F4 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x94 }, .{ .single = 0x580D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x95 }, .{ .single = 0x578B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x96 }, .{ .single = 0x5832 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x97 }, .{ .single = 0x5831 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x98 }, .{ .single = 0x58AC });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x99 }, .{ .single = 0x214E4 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x9a }, .{ .single = 0x58F2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x9b }, .{ .single = 0x58F7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x9c }, .{ .single = 0x5906 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x9d }, .{ .single = 0x591A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x9e }, .{ .single = 0x5922 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0x9f }, .{ .single = 0x5962 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xa0 }, .{ .single = 0x216A8 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xa1 }, .{ .single = 0x216EA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xa2 }, .{ .single = 0x59EC });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xa3 }, .{ .single = 0x5A1B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xa4 }, .{ .single = 0x5A27 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xa5 }, .{ .single = 0x59D8 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xa6 }, .{ .single = 0x5A66 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xa7 }, .{ .single = 0x36EE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xa8 }, .{ .single = 0x36FC });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xa9 }, .{ .single = 0x5B08 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xaa }, .{ .single = 0x5B3E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xab }, .{ .single = 0x5B3E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xac }, .{ .single = 0x219C8 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xad }, .{ .single = 0x5BC3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xae }, .{ .single = 0x5BD8 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xaf }, .{ .single = 0x5BE7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xb0 }, .{ .single = 0x5BF3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xb1 }, .{ .single = 0x21B18 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xb2 }, .{ .single = 0x5BFF });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xb3 }, .{ .single = 0x5C06 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xb4 }, .{ .single = 0x5F53 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xb5 }, .{ .single = 0x5C22 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xb6 }, .{ .single = 0x3781 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xb7 }, .{ .single = 0x5C60 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xb8 }, .{ .single = 0x5C6E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xb9 }, .{ .single = 0x5CC0 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xba }, .{ .single = 0x5C8D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xbb }, .{ .single = 0x21DE4 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xbc }, .{ .single = 0x5D43 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xbd }, .{ .single = 0x21DE6 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xbe }, .{ .single = 0x5D6E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa1, 0xbf }, .{ .single = 0x5D6B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x80 }, .{ .single = 0x5D7C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x81 }, .{ .single = 0x5DE1 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x82 }, .{ .single = 0x5DE2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x83 }, .{ .single = 0x382F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x84 }, .{ .single = 0x5DFD });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x85 }, .{ .single = 0x5E28 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x86 }, .{ .single = 0x5E3D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x87 }, .{ .single = 0x5E69 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x88 }, .{ .single = 0x3862 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x89 }, .{ .single = 0x22183 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x8a }, .{ .single = 0x387C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x8b }, .{ .single = 0x5EB0 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x8c }, .{ .single = 0x5EB3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x8d }, .{ .single = 0x5EB6 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x8e }, .{ .single = 0x5ECA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x8f }, .{ .single = 0x2A392 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x90 }, .{ .single = 0x5EFE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x91 }, .{ .single = 0x22331 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x92 }, .{ .single = 0x22331 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x93 }, .{ .single = 0x8201 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x94 }, .{ .single = 0x5F22 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x95 }, .{ .single = 0x5F22 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x96 }, .{ .single = 0x38C7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x97 }, .{ .single = 0x232B8 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x98 }, .{ .single = 0x261DA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x99 }, .{ .single = 0x5F62 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x9a }, .{ .single = 0x5F6B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x9b }, .{ .single = 0x38E3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x9c }, .{ .single = 0x5F9A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x9d }, .{ .single = 0x5FCD });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x9e }, .{ .single = 0x5FD7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0x9f }, .{ .single = 0x5FF9 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xa0 }, .{ .single = 0x6081 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xa1 }, .{ .single = 0x393A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xa2 }, .{ .single = 0x391C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xa3 }, .{ .single = 0x6094 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xa4 }, .{ .single = 0x226D4 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xa5 }, .{ .single = 0x60C7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xa6 }, .{ .single = 0x6148 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xa7 }, .{ .single = 0x614C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xa8 }, .{ .single = 0x614E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xa9 }, .{ .single = 0x614C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xaa }, .{ .single = 0x617A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xab }, .{ .single = 0x618E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xac }, .{ .single = 0x61B2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xad }, .{ .single = 0x61A4 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xae }, .{ .single = 0x61AF });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xaf }, .{ .single = 0x61DE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xb0 }, .{ .single = 0x61F2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xb1 }, .{ .single = 0x61F6 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xb2 }, .{ .single = 0x6210 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xb3 }, .{ .single = 0x621B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xb4 }, .{ .single = 0x625D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xb5 }, .{ .single = 0x62B1 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xb6 }, .{ .single = 0x62D4 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xb7 }, .{ .single = 0x6350 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xb8 }, .{ .single = 0x22B0C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xb9 }, .{ .single = 0x633D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xba }, .{ .single = 0x62FC });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xbb }, .{ .single = 0x6368 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xbc }, .{ .single = 0x6383 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xbd }, .{ .single = 0x63E4 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xbe }, .{ .single = 0x22BF1 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa2, 0xbf }, .{ .single = 0x6422 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x80 }, .{ .single = 0x63C5 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x81 }, .{ .single = 0x63A9 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x82 }, .{ .single = 0x3A2E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x83 }, .{ .single = 0x6469 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x84 }, .{ .single = 0x647E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x85 }, .{ .single = 0x649D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x86 }, .{ .single = 0x6477 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x87 }, .{ .single = 0x3A6C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x88 }, .{ .single = 0x654F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x89 }, .{ .single = 0x656C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x8a }, .{ .single = 0x2300A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x8b }, .{ .single = 0x65E3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x8c }, .{ .single = 0x66F8 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x8d }, .{ .single = 0x6649 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x8e }, .{ .single = 0x3B19 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x8f }, .{ .single = 0x6691 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x90 }, .{ .single = 0x3B08 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x91 }, .{ .single = 0x3AE4 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x92 }, .{ .single = 0x5192 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x93 }, .{ .single = 0x5195 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x94 }, .{ .single = 0x6700 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x95 }, .{ .single = 0x669C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x96 }, .{ .single = 0x80AD });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x97 }, .{ .single = 0x43D9 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x98 }, .{ .single = 0x6717 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x99 }, .{ .single = 0x671B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x9a }, .{ .single = 0x6721 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x9b }, .{ .single = 0x675E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x9c }, .{ .single = 0x6753 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x9d }, .{ .single = 0x233C3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x9e }, .{ .single = 0x3B49 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0x9f }, .{ .single = 0x67FA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xa0 }, .{ .single = 0x6785 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xa1 }, .{ .single = 0x6852 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xa2 }, .{ .single = 0x6885 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xa3 }, .{ .single = 0x2346D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xa4 }, .{ .single = 0x688E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xa5 }, .{ .single = 0x681F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xa6 }, .{ .single = 0x6914 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xa7 }, .{ .single = 0x3B9D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xa8 }, .{ .single = 0x6942 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xa9 }, .{ .single = 0x69A3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xaa }, .{ .single = 0x69EA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xab }, .{ .single = 0x6AA8 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xac }, .{ .single = 0x236A3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xad }, .{ .single = 0x6ADB });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xae }, .{ .single = 0x3C18 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xaf }, .{ .single = 0x6B21 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xb0 }, .{ .single = 0x238A7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xb1 }, .{ .single = 0x6B54 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xb2 }, .{ .single = 0x3C4E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xb3 }, .{ .single = 0x6B72 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xb4 }, .{ .single = 0x6B9F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xb5 }, .{ .single = 0x6BBA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xb6 }, .{ .single = 0x6BBB });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xb7 }, .{ .single = 0x23A8D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xb8 }, .{ .single = 0x21D0B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xb9 }, .{ .single = 0x23AFA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xba }, .{ .single = 0x6C4E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xbb }, .{ .single = 0x23CBC });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xbc }, .{ .single = 0x6CBF });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xbd }, .{ .single = 0x6CCD });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xbe }, .{ .single = 0x6C67 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa3, 0xbf }, .{ .single = 0x6D16 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x80 }, .{ .single = 0x6D3E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x81 }, .{ .single = 0x6D77 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x82 }, .{ .single = 0x6D41 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x83 }, .{ .single = 0x6D69 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x84 }, .{ .single = 0x6D78 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x85 }, .{ .single = 0x6D85 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x86 }, .{ .single = 0x23D1E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x87 }, .{ .single = 0x6D34 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x88 }, .{ .single = 0x6E2F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x89 }, .{ .single = 0x6E6E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x8a }, .{ .single = 0x3D33 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x8b }, .{ .single = 0x6ECB });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x8c }, .{ .single = 0x6EC7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x8d }, .{ .single = 0x23ED1 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x8e }, .{ .single = 0x6DF9 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x8f }, .{ .single = 0x6F6E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x90 }, .{ .single = 0x23F5E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x91 }, .{ .single = 0x23F8E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x92 }, .{ .single = 0x6FC6 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x93 }, .{ .single = 0x7039 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x94 }, .{ .single = 0x701E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x95 }, .{ .single = 0x701B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x96 }, .{ .single = 0x3D96 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x97 }, .{ .single = 0x704A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x98 }, .{ .single = 0x707D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x99 }, .{ .single = 0x7077 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x9a }, .{ .single = 0x70AD });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x9b }, .{ .single = 0x20525 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x9c }, .{ .single = 0x7145 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x9d }, .{ .single = 0x24263 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x9e }, .{ .single = 0x719C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0x9f }, .{ .single = 0x243AB });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xa0 }, .{ .single = 0x7228 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xa1 }, .{ .single = 0x7235 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xa2 }, .{ .single = 0x7250 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xa3 }, .{ .single = 0x24608 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xa4 }, .{ .single = 0x7280 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xa5 }, .{ .single = 0x7295 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xa6 }, .{ .single = 0x24735 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xa7 }, .{ .single = 0x24814 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xa8 }, .{ .single = 0x737A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xa9 }, .{ .single = 0x738B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xaa }, .{ .single = 0x3EAC });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xab }, .{ .single = 0x73A5 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xac }, .{ .single = 0x3EB8 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xad }, .{ .single = 0x3EB8 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xae }, .{ .single = 0x7447 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xaf }, .{ .single = 0x745C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xb0 }, .{ .single = 0x7471 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xb1 }, .{ .single = 0x7485 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xb2 }, .{ .single = 0x74CA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xb3 }, .{ .single = 0x3F1B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xb4 }, .{ .single = 0x7524 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xb5 }, .{ .single = 0x24C36 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xb6 }, .{ .single = 0x753E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xb7 }, .{ .single = 0x24C92 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xb8 }, .{ .single = 0x7570 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xb9 }, .{ .single = 0x2219F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xba }, .{ .single = 0x7610 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xbb }, .{ .single = 0x24FA1 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xbc }, .{ .single = 0x24FB8 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xbd }, .{ .single = 0x25044 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xbe }, .{ .single = 0x3FFC });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa4, 0xbf }, .{ .single = 0x4008 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x80 }, .{ .single = 0x76F4 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x81 }, .{ .single = 0x250F3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x82 }, .{ .single = 0x250F2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x83 }, .{ .single = 0x25119 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x84 }, .{ .single = 0x25133 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x85 }, .{ .single = 0x771E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x86 }, .{ .single = 0x771F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x87 }, .{ .single = 0x771F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x88 }, .{ .single = 0x774A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x89 }, .{ .single = 0x4039 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x8a }, .{ .single = 0x778B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x8b }, .{ .single = 0x4046 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x8c }, .{ .single = 0x4096 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x8d }, .{ .single = 0x2541D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x8e }, .{ .single = 0x784E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x8f }, .{ .single = 0x788C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x90 }, .{ .single = 0x78CC });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x91 }, .{ .single = 0x40E3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x92 }, .{ .single = 0x25626 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x93 }, .{ .single = 0x7956 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x94 }, .{ .single = 0x2569A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x95 }, .{ .single = 0x256C5 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x96 }, .{ .single = 0x798F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x97 }, .{ .single = 0x79EB });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x98 }, .{ .single = 0x412F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x99 }, .{ .single = 0x7A40 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x9a }, .{ .single = 0x7A4A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x9b }, .{ .single = 0x7A4F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x9c }, .{ .single = 0x2597C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x9d }, .{ .single = 0x25AA7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x9e }, .{ .single = 0x25AA7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0x9f }, .{ .single = 0x7AEE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xa0 }, .{ .single = 0x4202 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xa1 }, .{ .single = 0x25BAB });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xa2 }, .{ .single = 0x7BC6 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xa3 }, .{ .single = 0x7BC9 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xa4 }, .{ .single = 0x4227 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xa5 }, .{ .single = 0x25C80 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xa6 }, .{ .single = 0x7CD2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xa7 }, .{ .single = 0x42A0 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xa8 }, .{ .single = 0x7CE8 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xa9 }, .{ .single = 0x7CE3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xaa }, .{ .single = 0x7D00 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xab }, .{ .single = 0x25F86 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xac }, .{ .single = 0x7D63 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xad }, .{ .single = 0x4301 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xae }, .{ .single = 0x7DC7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xaf }, .{ .single = 0x7E02 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xb0 }, .{ .single = 0x7E45 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xb1 }, .{ .single = 0x4334 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xb2 }, .{ .single = 0x26228 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xb3 }, .{ .single = 0x26247 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xb4 }, .{ .single = 0x4359 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xb5 }, .{ .single = 0x262D9 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xb6 }, .{ .single = 0x7F7A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xb7 }, .{ .single = 0x2633E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xb8 }, .{ .single = 0x7F95 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xb9 }, .{ .single = 0x7FFA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xba }, .{ .single = 0x8005 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xbb }, .{ .single = 0x264DA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xbc }, .{ .single = 0x26523 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xbd }, .{ .single = 0x8060 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xbe }, .{ .single = 0x265A8 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa5, 0xbf }, .{ .single = 0x8070 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x80 }, .{ .single = 0x2335F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x81 }, .{ .single = 0x43D5 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x82 }, .{ .single = 0x80B2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x83 }, .{ .single = 0x8103 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x84 }, .{ .single = 0x440B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x85 }, .{ .single = 0x813E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x86 }, .{ .single = 0x5AB5 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x87 }, .{ .single = 0x267A7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x88 }, .{ .single = 0x267B5 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x89 }, .{ .single = 0x23393 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x8a }, .{ .single = 0x2339C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x8b }, .{ .single = 0x8201 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x8c }, .{ .single = 0x8204 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x8d }, .{ .single = 0x8F9E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x8e }, .{ .single = 0x446B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x8f }, .{ .single = 0x8291 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x90 }, .{ .single = 0x828B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x91 }, .{ .single = 0x829D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x92 }, .{ .single = 0x52B3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x93 }, .{ .single = 0x82B1 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x94 }, .{ .single = 0x82B3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x95 }, .{ .single = 0x82BD });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x96 }, .{ .single = 0x82E6 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x97 }, .{ .single = 0x26B3C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x98 }, .{ .single = 0x82E5 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x99 }, .{ .single = 0x831D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x9a }, .{ .single = 0x8363 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x9b }, .{ .single = 0x83AD });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x9c }, .{ .single = 0x8323 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x9d }, .{ .single = 0x83BD });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x9e }, .{ .single = 0x83E7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0x9f }, .{ .single = 0x8457 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xa0 }, .{ .single = 0x8353 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xa1 }, .{ .single = 0x83CA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xa2 }, .{ .single = 0x83CC });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xa3 }, .{ .single = 0x83DC });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xa4 }, .{ .single = 0x26C36 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xa5 }, .{ .single = 0x26D6B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xa6 }, .{ .single = 0x26CD5 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xa7 }, .{ .single = 0x452B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xa8 }, .{ .single = 0x84F1 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xa9 }, .{ .single = 0x84F3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xaa }, .{ .single = 0x8516 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xab }, .{ .single = 0x273CA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xac }, .{ .single = 0x8564 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xad }, .{ .single = 0x26F2C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xae }, .{ .single = 0x455D });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xaf }, .{ .single = 0x4561 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xb0 }, .{ .single = 0x26FB1 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xb1 }, .{ .single = 0x270D2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xb2 }, .{ .single = 0x456B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xb3 }, .{ .single = 0x8650 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xb4 }, .{ .single = 0x865C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xb5 }, .{ .single = 0x8667 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xb6 }, .{ .single = 0x8669 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xb7 }, .{ .single = 0x86A9 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xb8 }, .{ .single = 0x8688 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xb9 }, .{ .single = 0x870E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xba }, .{ .single = 0x86E2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xbb }, .{ .single = 0x8779 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xbc }, .{ .single = 0x8728 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xbd }, .{ .single = 0x876B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xbe }, .{ .single = 0x8786 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa6, 0xbf }, .{ .single = 0x45D7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x80 }, .{ .single = 0x87E1 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x81 }, .{ .single = 0x8801 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x82 }, .{ .single = 0x45F9 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x83 }, .{ .single = 0x8860 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x84 }, .{ .single = 0x8863 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x85 }, .{ .single = 0x27667 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x86 }, .{ .single = 0x88D7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x87 }, .{ .single = 0x88DE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x88 }, .{ .single = 0x4635 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x89 }, .{ .single = 0x88FA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x8a }, .{ .single = 0x34BB });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x8b }, .{ .single = 0x278AE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x8c }, .{ .single = 0x27966 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x8d }, .{ .single = 0x46BE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x8e }, .{ .single = 0x46C7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x8f }, .{ .single = 0x8AA0 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x90 }, .{ .single = 0x8AED });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x91 }, .{ .single = 0x8B8A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x92 }, .{ .single = 0x8C55 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x93 }, .{ .single = 0x27CA8 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x94 }, .{ .single = 0x8CAB });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x95 }, .{ .single = 0x8CC1 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x96 }, .{ .single = 0x8D1B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x97 }, .{ .single = 0x8D77 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x98 }, .{ .single = 0x27F2F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x99 }, .{ .single = 0x20804 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x9a }, .{ .single = 0x8DCB });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x9b }, .{ .single = 0x8DBC });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x9c }, .{ .single = 0x8DF0 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x9d }, .{ .single = 0x208DE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x9e }, .{ .single = 0x8ED4 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0x9f }, .{ .single = 0x8F38 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xa0 }, .{ .single = 0x285D2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xa1 }, .{ .single = 0x285ED });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xa2 }, .{ .single = 0x9094 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xa3 }, .{ .single = 0x90F1 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xa4 }, .{ .single = 0x9111 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xa5 }, .{ .single = 0x2872E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xa6 }, .{ .single = 0x911B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xa7 }, .{ .single = 0x9238 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xa8 }, .{ .single = 0x92D7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xa9 }, .{ .single = 0x92D8 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xaa }, .{ .single = 0x927C });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xab }, .{ .single = 0x93F9 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xac }, .{ .single = 0x9415 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xad }, .{ .single = 0x28BFA });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xae }, .{ .single = 0x958B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xaf }, .{ .single = 0x4995 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xb0 }, .{ .single = 0x95B7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xb1 }, .{ .single = 0x28D77 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xb2 }, .{ .single = 0x49E6 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xb3 }, .{ .single = 0x96C3 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xb4 }, .{ .single = 0x5DB2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xb5 }, .{ .single = 0x9723 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xb6 }, .{ .single = 0x29145 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xb7 }, .{ .single = 0x2921A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xb8 }, .{ .single = 0x4A6E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xb9 }, .{ .single = 0x4A76 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xba }, .{ .single = 0x97E0 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xbb }, .{ .single = 0x2940A });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xbc }, .{ .single = 0x4AB2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xbd }, .{ .single = 0x29496 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xbe }, .{ .single = 0x980B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa7, 0xbf }, .{ .single = 0x980B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x80 }, .{ .single = 0x9829 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x81 }, .{ .single = 0x295B6 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x82 }, .{ .single = 0x98E2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x83 }, .{ .single = 0x4B33 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x84 }, .{ .single = 0x9929 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x85 }, .{ .single = 0x99A7 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x86 }, .{ .single = 0x99C2 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x87 }, .{ .single = 0x99FE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x88 }, .{ .single = 0x4BCE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x89 }, .{ .single = 0x29B30 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x8a }, .{ .single = 0x9B12 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x8b }, .{ .single = 0x9C40 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x8c }, .{ .single = 0x9CFD });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x8d }, .{ .single = 0x4CCE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x8e }, .{ .single = 0x4CED });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x8f }, .{ .single = 0x9D67 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x90 }, .{ .single = 0x2A0CE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x91 }, .{ .single = 0x4CF8 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x92 }, .{ .single = 0x2A105 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x93 }, .{ .single = 0x2A20E });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x94 }, .{ .single = 0x2A291 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x95 }, .{ .single = 0x9EBB });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x96 }, .{ .single = 0x4D56 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x97 }, .{ .single = 0x9EF9 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x98 }, .{ .single = 0x9EFE });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x99 }, .{ .single = 0x9F05 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x9a }, .{ .single = 0x9F0F });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x9b }, .{ .single = 0x9F16 });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x9c }, .{ .single = 0x9F3B });
    try self.decomp_trie.add(&[_]u8{ 0xf0, 0xaf, 0xa8, 0x9d }, .{ .single = 0x2A600 });
}

var utf8_buf: [4]u8 = undefined;

/// mapping retrieves the decomposition mapping for a code point as per the UCD.
pub fn mapping(self: Self, cp: u21) !Decomposed {
    const len = try unicode.utf8Encode(cp, &utf8_buf);
    const lookup = self.decomp_trie.find(utf8_buf[0..len]);
    if (lookup.value) |value| if (lookup.index + 1 == len) return value;
    return Decomposed{ .same = cp };
}

pub const Form = enum {
    D, // Canonical Decomposition
    KD, // Compatibility Decomposition
};

/// codePointTo takes a code point and returns a sequence of code points that represent its conversion 
/// to the specified Form. Caller must free returned bytes.
pub fn codePointTo(self: Self, allocator: *mem.Allocator, form: Form, cp: u21) anyerror![]u21 {
    if (form == .D or form == .KD) {
        // Decomposition.
        if (self.isHangulPrecomposed(cp)) {
            // Hangul precomposed syllable full decomposition.
            const dcs = self.decomposeHangul(cp);
            const len: usize = if (dcs[2] == 0) 2 else 3;
            var result = try allocator.alloc(u21, len);
            mem.copy(u21, result, dcs[0..len]);
            return result;
        } else {
            // Non-Hangul code points.
            const src = [1]Decomposed{.{ .src = cp }};
            const dcs = try self.decomposeTo(allocator, form, &src);
            defer allocator.free(dcs);
            var result = try allocator.alloc(u21, dcs.len);
            for (dcs) |dc, index| {
                result[index] = dc.same;
            }
            return result;
        }
    } else {
        return error.FormUnimplemented;
    }
}

/// decomposeTo recursively performs decomposition until the specified form is obtained.
/// Caller must free returned bytes.
pub fn decomposeTo(self: Self, allocator: *mem.Allocator, form: Form, dcs: []const Decomposed) anyerror![]const Decomposed {
    // Avoid recursive allocation hell with arena.
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();

    // Freed by arena.
    const rdcs = switch (form) {
        .D => try self.decompD(&arena.allocator, dcs),
        .KD => try self.decompKD(&arena.allocator, dcs),
    };

    // Freed by caller.
    var result = try allocator.alloc(Decomposed, rdcs.len);
    for (rdcs) |dc, i| {
        result[i] = dc;
    }

    return result;
}

fn decompD(self: Self, allocator: *mem.Allocator, dcs: []const Decomposed) anyerror![]const Decomposed {
    // Base case;
    if (allDone(dcs)) return dcs;

    var rdcs = std.ArrayList(Decomposed).init(allocator);
    defer rdcs.deinit();

    for (dcs) |dc| {
        switch (dc) {
            .src => |cp| {
                const next_map = try self.mapping(cp);
                if (next_map == .same) {
                    try rdcs.append(next_map);
                    return rdcs.toOwnedSlice();
                } else if (next_map == .compat) {
                    try rdcs.append(.{ .same = cp });
                    return rdcs.toOwnedSlice();
                } else {
                    const m = [1]Decomposed{try self.mapping(cp)};
                    try rdcs.appendSlice(try self.decomposeTo(allocator, .D, &m));
                }
            },
            .same => try rdcs.append(dc),
            .single => |cp| {
                const next_map = try self.mapping(cp);
                if (next_map == .same or next_map == .compat) {
                    try rdcs.append(.{ .same = cp });
                } else {
                    const m = [1]Decomposed{try self.mapping(cp)};
                    try rdcs.appendSlice(try self.decomposeTo(allocator, .D, &m));
                }
            },
            .canon => |seq| {
                for (seq) |cp| {
                    const next_map = try self.mapping(cp);
                    if (next_map == .same or next_map == .compat) {
                        try rdcs.append(.{ .same = cp });
                    } else {
                        const m = [1]Decomposed{next_map};
                        try rdcs.appendSlice(try self.decomposeTo(allocator, .D, &m));
                    }
                }
            },
            .compat => {},
        }
    }

    return rdcs.toOwnedSlice();
}

fn decompKD(self: Self, allocator: *mem.Allocator, dcs: []const Decomposed) anyerror![]const Decomposed {
    // Base case;
    if (allDone(dcs)) return dcs;

    var rdcs = std.ArrayList(Decomposed).init(allocator);
    defer rdcs.deinit();

    for (dcs) |dc| {
        switch (dc) {
            .src => |cp| {
                const m = [1]Decomposed{try self.mapping(cp)};
                try rdcs.appendSlice(try self.decomposeTo(allocator, .KD, &m));
            },
            .same => try rdcs.append(dc),
            .single => |cp| {
                const m = [1]Decomposed{try self.mapping(cp)};
                try rdcs.appendSlice(try self.decomposeTo(allocator, .KD, &m));
            },
            .canon => |seq| {
                for (seq) |cp| {
                    const m = [1]Decomposed{try self.mapping(cp)};
                    try rdcs.appendSlice(try self.decomposeTo(allocator, .KD, &m));
                }
            },
            .compat => |seq| {
                for (seq) |cp| {
                    const m = [1]Decomposed{try self.mapping(cp)};
                    try rdcs.appendSlice(try self.decomposeTo(allocator, .KD, &m));
                }
            },
        }
    }

    return rdcs.toOwnedSlice();
}

fn finalizeAndEncode(self: Self, allocator: *mem.Allocator, code_points: []u21) ![]u8 {
    var result = std.ArrayList(u8).init(allocator);
    defer result.deinit();

    // Apply canonical sort algorithm.
    self.canonicalSort(code_points);

    // Encode as UTF-8 code units.
    var buf: [4]u8 = undefined;
    for (code_points) |dcp| {
        const len = try unicode.utf8Encode(dcp, &buf);
        try result.appendSlice(buf[0..len]);
    }

    return result.toOwnedSlice();
}

/// normalizeTo will normalize the code points in str, producing a slice of u8 with the new bytes
/// corresponding to the specified Normalization Form. Caller must free returned bytes.
pub fn normalizeTo(self: Self, allocator: *mem.Allocator, form: Form, str: []const u8) anyerror![]u8 {
    if (form != .D and form != .KD) return error.FormUnimplemented;

    // Gather source code points.
    var code_points = std.ArrayList(u21).init(allocator);
    defer code_points.deinit();

    var iter = (try unicode.Utf8View.init(str)).iterator();

    while (iter.nextCodepoint()) |cp| {
        try code_points.append(cp);
    }

    // NFD Quick Check.
    if (form == .D) {
        var already_nfd = true;

        for (code_points.items) |cp| {
            if (!self.nfd_check.isNFD(cp)) already_nfd = false;
        }

        // Already NFD, nothing more to do.
        if (already_nfd) return self.finalizeAndEncode(allocator, code_points.items);
    }

    var d_code_points = std.ArrayList(u21).init(allocator);
    defer d_code_points.deinit();

    // Gather decomposed code points.
    for (code_points.items) |cp| {
        const cp_slice = try self.codePointTo(allocator, form, cp);
        defer allocator.free(cp_slice);
        try d_code_points.appendSlice(cp_slice);
    }

    return self.finalizeAndEncode(allocator, d_code_points.items);
}

/// normalizeCodePointsTo will normalize the code points in str, producing a new slice of code points
/// corresponding to the specified Normalization Form. Caller must free returned bytes.
pub fn normalizeCodePointsTo(self: *Self, allocator: *mem.Allocator, form: Form, str: []const u8) anyerror![]u21 {
    if (form != .D and form != .KD) return error.FormUnimplemented;

    // Gather source code points.
    var code_points = std.ArrayList(u21).init(allocator);
    defer code_points.deinit();

    var iter = (try unicode.Utf8View.init(str)).iterator();

    while (iter.nextCodepoint()) |cp| {
        try code_points.append(cp);
    }

    // NFD Quick Check.
    if (form == .D) {
        var already_nfd = true;

        for (code_points.items) |cp| {
            if (!self.nfd_check.isNFD(cp)) already_nfd = false;
        }

        // Already NFD, nothing more to do.
        if (already_nfd) {
            // Apply canonical sort algorithm.
            self.canonicalSort(code_points.items);
            return code_points.toOwnedSlice();
        }
    }

    var d_code_points = std.ArrayList(u21).init(allocator);
    defer d_code_points.deinit();

    // Gather decomposed code points.
    for (code_points.items) |cp| {
        const cp_slice = try self.codePointTo(allocator, form, cp);
        defer allocator.free(cp_slice);
        try d_code_points.appendSlice(cp_slice);
    }

    // Apply canonical sort algorithm.
    self.canonicalSort(d_code_points.items);
    return d_code_points.toOwnedSlice();
}

fn cccLess(self: Self, lhs: u21, rhs: u21) bool {
    return self.ccc_map.combiningClass(lhs) < self.ccc_map.combiningClass(rhs);
}

fn canonicalSort(self: Self, cp_list: []u21) void {
    var i: usize = 0;
    while (true) {
        if (i >= cp_list.len) break;
        var start: usize = i;
        while (i < cp_list.len and self.ccc_map.combiningClass(cp_list[i]) != 0) : (i += 1) {}
        sort(u21, cp_list[start..i], self, cccLess);
        i += 1;
    }
}

fn decomposeHangul(self: Self, cp: u21) [3]u21 {
    const SBase: u21 = 0xAC00;
    const LBase: u21 = 0x1100;
    const VBase: u21 = 0x1161;
    const TBase: u21 = 0x11A7;
    const LCount: u21 = 19;
    const VCount: u21 = 21;
    const TCount: u21 = 28;
    const NCount: u21 = 588; // VCount * TCount
    const SCount: u21 = 11172; // LCount * NCount

    const SIndex: u21 = cp - SBase;
    const LIndex: u21 = SIndex / NCount;
    const VIndex: u21 = (SIndex % NCount) / TCount;
    const TIndex: u21 = SIndex % TCount;
    const LPart: u21 = LBase + LIndex;
    const VPart: u21 = VBase + VIndex;
    var TPart: u21 = 0;
    if (TIndex != 0) TPart = TBase + TIndex;

    return [3]u21{ LPart, VPart, TPart };
}

fn isHangulPrecomposed(self: Self, cp: u21) bool {
    if (self.hangul_map.syllableType(cp)) |kind| {
        return switch (kind) {
            .LV, .LVT => true,
            else => false,
        };
    } else {
        return false;
    }
}

fn allDone(dcs: []const Decomposed) bool {
    for (dcs) |dc| {
        if (dc != .same) return false;
    }
    return true;
}

/// CmpMode determines the type of comparison to be performed.
/// * ignore_case compares ignoring letter case.
/// * normalize compares the result of normalizing to canonical form (NFD).
/// * norm_ignore combines both ignore_case and normalize modes.
pub const CmpMode = enum {
    ignore_case,
    normalize,
    norm_ignore,
};

/// eqlBy compares for equality between `a` and `b` according to the specified comparison mode.
pub fn eqlBy(self: Self, a: []const u8, b: []const u8, mode: CmpMode) !bool {
    // Check for ASCII only comparison.
    var ascii_only = try isAsciiStr(a);

    if (ascii_only) {
        ascii_only = try isAsciiStr(b);
    }

    // If ASCII only, different lengths mean inequality.
    const len_a = a.len;
    const len_b = b.len;
    var len_eql = len_a == len_b;

    if (ascii_only and !len_eql) return false;

    if (mode == .ignore_case and len_eql) {
        if (ascii_only) {
            // ASCII case insensitive.
            for (a) |c, i| {
                const oc = b[i];
                const lc = if (c >= 'A' and c <= 'Z') c ^ 32 else c;
                const olc = if (oc >= 'A' and oc <= 'Z') oc ^ 32 else oc;
                if (lc != olc) return false;
            }
            return true;
        }

        // Non-ASCII case insensitive.
        return self.eqlIgnoreCase(a, b);
    }

    if (mode == .normalize) return self.eqlNorm(a, b);
    if (mode == .norm_ignore) return self.eqlNormIgnore(a, b);

    return false;
}

fn eqlIgnoreCase(self: Self, a: []const u8, b: []const u8) !bool {
    const cf_a = try self.letter.fold_map.caseFoldStr(self.allocator, a);
    defer self.allocator.free(cf_a);
    const cf_b = try self.letter.fold_map.caseFoldStr(self.allocator, b);
    defer self.allocator.free(cf_b);

    return mem.eql(u8, cf_a, cf_b);
}

fn eqlNorm(self: Self, a: []const u8, b: []const u8) !bool {
    var arena = std.heap.ArenaAllocator.init(self.allocator);
    defer arena.deinit();

    const norm_a = try self.normalizeTo(&arena.allocator, .D, a);
    const norm_b = try self.normalizeTo(&arena.allocator, .D, b);

    return mem.eql(u8, norm_a, norm_b);
}

fn eqlNormIgnore(self: Self, a: []const u8, b: []const u8) !bool {
    var arena = std.heap.ArenaAllocator.init(self.allocator);
    defer arena.deinit();

    // The long winding road of normalized caseless matching...
    // NFD(CaseFold(NFD(str)))
    var norm_a = try self.normalizeTo(&arena.allocator, .D, a);
    var cf_a = try self.letter.fold_map.caseFoldStr(&arena.allocator, norm_a);
    norm_a = try self.normalizeTo(&arena.allocator, .D, cf_a);
    var norm_b = try self.normalizeTo(&arena.allocator, .D, b);
    var cf_b = try self.letter.fold_map.caseFoldStr(&arena.allocator, norm_b);
    norm_b = try self.normalizeTo(&arena.allocator, .D, cf_b);

    return mem.eql(u8, norm_a, norm_b);
}

/// isAsciiStr checks if a string (`[]const uu`) is composed solely of ASCII characters.
fn isAsciiStr(str: []const u8) !bool {
    // Shamelessly stolen from std.unicode.
    const N = @sizeOf(usize);
    const MASK = 0x80 * (std.math.maxInt(usize) / 0xff);

    var i: usize = 0;
    while (i < str.len) {
        // Fast path for ASCII sequences
        while (i + N <= str.len) : (i += N) {
            const v = mem.readIntNative(usize, str[i..][0..N]);
            if (v & MASK != 0) {
                return false;
            }
        }

        if (i < str.len) {
            const n = try unicode.utf8ByteSequenceLength(str[i]);
            if (i + n > str.len) return error.TruncatedInput;

            switch (n) {
                1 => {}, // ASCII
                else => return false,
            }

            i += n;
        }
    }

    return true;
}

test "Normalizer codePointTo D" {
    var allocator = std.testing.allocator;
    var normalizer = try init(allocator);
    defer normalizer.deinit();

    var result = try normalizer.codePointTo(allocator, .D, '\u{00E9}');
    defer allocator.free(result);
    std.testing.expectEqualSlices(u21, result, &[2]u21{ 0x0065, 0x0301 });
    allocator.free(result);

    result = try normalizer.codePointTo(allocator, .D, '\u{03D3}');
    std.testing.expectEqualSlices(u21, result, &[2]u21{ 0x03D2, 0x0301 });
}

test "Normalizer codePointTo KD" {
    var allocator = std.testing.allocator;
    var normalizer = try init(allocator);
    defer normalizer.deinit();

    var result = try normalizer.codePointTo(allocator, .KD, '\u{00E9}');
    defer allocator.free(result);
    std.testing.expectEqualSlices(u21, result, &[2]u21{ 0x0065, 0x0301 });
    allocator.free(result);

    result = try normalizer.codePointTo(allocator, .KD, '\u{03D3}');
    std.testing.expectEqualSlices(u21, result, &[2]u21{ 0x03A5, 0x0301 });
}

test "Normalizer normalizeTo" {
    var allocator = std.testing.allocator;
    var normalizer = try init(allocator);
    defer normalizer.deinit();

    var file = try std.fs.cwd().openFile("src/data/ucd/NormalizationTest.txt", .{});
    defer file.close();
    var buf_reader = std.io.bufferedReader(file.reader());
    var input_stream = buf_reader.reader();
    var buf: [640]u8 = undefined;
    while (try input_stream.readUntilDelimiterOrEof(&buf, '\n')) |line| {
        // Skip comments or empty lines.
        if (line.len == 0 or line[0] == '#' or line[0] == '@') continue;
        // Iterate over fields.
        var fields = mem.split(line, ";");
        var field_index: usize = 0;
        var input: []u8 = undefined;
        defer allocator.free(input);
        while (fields.next()) |field| : (field_index += 1) {
            if (field_index == 0) {
                var i_buf = std.ArrayList(u8).init(allocator);
                defer i_buf.deinit();
                var i_fields = mem.split(field, " ");
                var cp_buf: [4]u8 = undefined;
                while (i_fields.next()) |s| {
                    const icp = try std.fmt.parseInt(u21, s, 16);
                    const len = try unicode.utf8Encode(icp, &cp_buf);
                    try i_buf.appendSlice(cp_buf[0..len]);
                }
                input = i_buf.toOwnedSlice();
            } else if (field_index == 2) {
                // NFD, time to test.
                var w_buf = std.ArrayList(u8).init(allocator);
                defer w_buf.deinit();
                var w_fields = mem.split(field, " ");
                var cp_buf: [4]u8 = undefined;
                while (w_fields.next()) |s| {
                    const wcp = try std.fmt.parseInt(u21, s, 16);
                    const len = try unicode.utf8Encode(wcp, &cp_buf);
                    try w_buf.appendSlice(cp_buf[0..len]);
                }
                const want = w_buf.toOwnedSlice();
                defer allocator.free(want);
                const got = try normalizer.normalizeTo(allocator, .D, input);
                defer allocator.free(got);
                std.testing.expectEqualSlices(u8, want, got);
                continue;
            } else if (field_index == 4) {
                // NFKD, time to test.
                var w_buf = std.ArrayList(u8).init(allocator);
                defer w_buf.deinit();
                var w_fields = mem.split(field, " ");
                var cp_buf: [4]u8 = undefined;
                while (w_fields.next()) |s| {
                    const wcp = try std.fmt.parseInt(u21, s, 16);
                    const len = try unicode.utf8Encode(wcp, &cp_buf);
                    try w_buf.appendSlice(cp_buf[0..len]);
                }
                const want = w_buf.toOwnedSlice();
                defer allocator.free(want);
                const got = try normalizer.normalizeTo(allocator, .KD, input);
                defer allocator.free(got);
                std.testing.expectEqualSlices(u8, want, got);
                continue;
            } else {
                continue;
            }
        }
    }
}

test "Normalizer eqlBy" {
    var normalizer = try init(std.testing.allocator);
    defer normalizer.deinit();

    std.testing.expect(try normalizer.eqlBy("foé", "foe\u{0301}", .normalize));
    std.testing.expect(try normalizer.eqlBy("foϓ", "fo\u{03D2}\u{0301}", .normalize));
    std.testing.expect(try normalizer.eqlBy("Foϓ", "fo\u{03D2}\u{0301}", .norm_ignore));
    std.testing.expect(try normalizer.eqlBy("FOÉ", "foe\u{0301}", .norm_ignore)); // foÉ == foé
}
