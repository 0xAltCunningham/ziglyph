// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Lowest code point
//    3. Highest code point
//! Unicode Default_Ignorable_Code_Point code points.

const std = @import("std");
const mem = std.mem;

const DefaultIgnorableCodePoint = @This();

allocator: *mem.Allocator,
cp_set: std.AutoHashMap(u21, void),
lo: u21 = 173,
hi: u21 = 921599,

const Singleton = struct {
    instance: *DefaultIgnorableCodePoint,
    ref_count: usize,
};

var singleton: ?Singleton = null;

pub fn init(allocator: *mem.Allocator) !*DefaultIgnorableCodePoint {
    if (singleton) |*s| {
        s.ref_count += 1;
        return s.instance;
    }

    var instance = try allocator.create(DefaultIgnorableCodePoint);

    instance.* = DefaultIgnorableCodePoint{
        .allocator = allocator,
        .cp_set = std.AutoHashMap(u21, void).init(allocator),
    };

    var index: u21 = 0;
    try instance.cp_set.put(173, {});
    try instance.cp_set.put(847, {});
    try instance.cp_set.put(1564, {});
    index = 4447;
    while (index <= 4448) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 6068;
    while (index <= 6069) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 6155;
    while (index <= 6157) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    try instance.cp_set.put(6158, {});
    index = 8203;
    while (index <= 8207) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 8234;
    while (index <= 8238) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 8288;
    while (index <= 8292) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    try instance.cp_set.put(8293, {});
    index = 8294;
    while (index <= 8303) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    try instance.cp_set.put(12644, {});
    index = 65024;
    while (index <= 65039) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    try instance.cp_set.put(65279, {});
    try instance.cp_set.put(65440, {});
    index = 65520;
    while (index <= 65528) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 113824;
    while (index <= 113827) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 119155;
    while (index <= 119162) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    try instance.cp_set.put(917504, {});
    try instance.cp_set.put(917505, {});
    index = 917506;
    while (index <= 917535) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 917536;
    while (index <= 917631) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 917632;
    while (index <= 917759) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 917760;
    while (index <= 917999) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 918000;
    while (index <= 921599) : (index += 1) {
        try instance.cp_set.put(index, {});
    }

    // Placeholder: 0. Struct name, 1. Code point kind
    singleton = Singleton{
        .instance = instance,
        .ref_count = 1,
    };

    return instance;
}

pub fn deinit(self: *DefaultIgnorableCodePoint) void {
    self.cp_set.deinit();
    if (singleton) |*s| {
        s.ref_count -= 1;
        if (s.ref_count == 0) {
            self.allocator.destroy(s.instance);
            singleton = null;
        }
    }
}

// isDefaultIgnorableCodePoint checks if cp is of the kind Default_Ignorable_Code_Point.
pub fn isDefaultIgnorableCodePoint(self: DefaultIgnorableCodePoint, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    return self.cp_set.get(cp) != null;
}
