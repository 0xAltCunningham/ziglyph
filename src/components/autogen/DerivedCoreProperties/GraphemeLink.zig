// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Lowest code point
//    4. Highest code point
//! Unicode Grapheme_Link code points.

const std = @import("std");
const mem = std.mem;

const GraphemeLink = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 2381,
hi: u21 = 73111,

pub fn init(allocator: *mem.Allocator) !GraphemeLink {
    var instance = GraphemeLink{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 70731),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[0] = true;
    instance.array[128] = true;
    instance.array[256] = true;
    instance.array[384] = true;
    instance.array[512] = true;
    instance.array[640] = true;
    instance.array[768] = true;
    instance.array[896] = true;
    index = 1006;
    while (index <= 1007) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[1024] = true;
    instance.array[1149] = true;
    instance.array[1261] = true;
    instance.array[1389] = true;
    instance.array[1591] = true;
    index = 1772;
    while (index <= 1773) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[3527] = true;
    instance.array[3559] = true;
    instance.array[3717] = true;
    instance.array[4371] = true;
    instance.array[4599] = true;
    instance.array[4701] = true;
    instance.array[4702] = true;
    index = 4773;
    while (index <= 4774) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[9266] = true;
    instance.array[40633] = true;
    instance.array[40671] = true;
    instance.array[40823] = true;
    instance.array[40966] = true;
    instance.array[41075] = true;
    instance.array[41385] = true;
    instance.array[41632] = true;
    instance.array[65778] = true;
    instance.array[67321] = true;
    instance.array[67378] = true;
    instance.array[67436] = true;
    index = 67558;
    while (index <= 67559) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[67699] = true;
    instance.array[67816] = true;
    instance.array[67997] = true;
    instance.array[68096] = true;
    instance.array[68341] = true;
    instance.array[68469] = true;
    instance.array[68722] = true;
    instance.array[68850] = true;
    instance.array[68969] = true;
    instance.array[69086] = true;
    instance.array[69356] = true;
    instance.array[69616] = true;
    instance.array[69617] = true;
    instance.array[69779] = true;
    instance.array[69863] = true;
    instance.array[69882] = true;
    instance.array[69964] = true;
    instance.array[70386] = true;
    index = 70647;
    while (index <= 70648) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[70730] = true;

    // Placeholder: 0. Struct name, 1. Code point kind
    return instance;
}

pub fn deinit(self: *GraphemeLink) void {
    self.allocator.free(self.array);
}

// isGraphemeLink checks if cp is of the kind Grapheme_Link.
pub fn isGraphemeLink(self: GraphemeLink, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
