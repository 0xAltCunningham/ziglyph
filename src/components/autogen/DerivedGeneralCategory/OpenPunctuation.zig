// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Lowest code point
//    3. Highest code point
//! Unicode Open_Punctuation code points.

const std = @import("std");
const mem = std.mem;

const OpenPunctuation = @This();

allocator: *mem.Allocator,
cp_set: std.AutoHashMap(u21, void),
lo: u21 = 40,
hi: u21 = 65378,

const Singleton = struct {
    instance: *OpenPunctuation,
    ref_count: usize,
};

var singleton: ?Singleton = null;

pub fn init(allocator: *mem.Allocator) !*OpenPunctuation {
    if (singleton) |*s| {
        s.ref_count += 1;
        return s.instance;
    }

    var instance = try allocator.create(OpenPunctuation);

    instance.* = OpenPunctuation{
        .allocator = allocator,
        .cp_set = std.AutoHashMap(u21, void).init(allocator),
    };

    var index: u21 = 0;
    try instance.cp_set.put(40, {});
    try instance.cp_set.put(91, {});
    try instance.cp_set.put(123, {});
    try instance.cp_set.put(3898, {});
    try instance.cp_set.put(3900, {});
    try instance.cp_set.put(5787, {});
    try instance.cp_set.put(8218, {});
    try instance.cp_set.put(8222, {});
    try instance.cp_set.put(8261, {});
    try instance.cp_set.put(8317, {});
    try instance.cp_set.put(8333, {});
    try instance.cp_set.put(8968, {});
    try instance.cp_set.put(8970, {});
    try instance.cp_set.put(9001, {});
    try instance.cp_set.put(10088, {});
    try instance.cp_set.put(10090, {});
    try instance.cp_set.put(10092, {});
    try instance.cp_set.put(10094, {});
    try instance.cp_set.put(10096, {});
    try instance.cp_set.put(10098, {});
    try instance.cp_set.put(10100, {});
    try instance.cp_set.put(10181, {});
    try instance.cp_set.put(10214, {});
    try instance.cp_set.put(10216, {});
    try instance.cp_set.put(10218, {});
    try instance.cp_set.put(10220, {});
    try instance.cp_set.put(10222, {});
    try instance.cp_set.put(10627, {});
    try instance.cp_set.put(10629, {});
    try instance.cp_set.put(10631, {});
    try instance.cp_set.put(10633, {});
    try instance.cp_set.put(10635, {});
    try instance.cp_set.put(10637, {});
    try instance.cp_set.put(10639, {});
    try instance.cp_set.put(10641, {});
    try instance.cp_set.put(10643, {});
    try instance.cp_set.put(10645, {});
    try instance.cp_set.put(10647, {});
    try instance.cp_set.put(10712, {});
    try instance.cp_set.put(10714, {});
    try instance.cp_set.put(10748, {});
    try instance.cp_set.put(11810, {});
    try instance.cp_set.put(11812, {});
    try instance.cp_set.put(11814, {});
    try instance.cp_set.put(11816, {});
    try instance.cp_set.put(11842, {});
    try instance.cp_set.put(12296, {});
    try instance.cp_set.put(12298, {});
    try instance.cp_set.put(12300, {});
    try instance.cp_set.put(12302, {});
    try instance.cp_set.put(12304, {});
    try instance.cp_set.put(12308, {});
    try instance.cp_set.put(12310, {});
    try instance.cp_set.put(12312, {});
    try instance.cp_set.put(12314, {});
    try instance.cp_set.put(12317, {});
    try instance.cp_set.put(64831, {});
    try instance.cp_set.put(65047, {});
    try instance.cp_set.put(65077, {});
    try instance.cp_set.put(65079, {});
    try instance.cp_set.put(65081, {});
    try instance.cp_set.put(65083, {});
    try instance.cp_set.put(65085, {});
    try instance.cp_set.put(65087, {});
    try instance.cp_set.put(65089, {});
    try instance.cp_set.put(65091, {});
    try instance.cp_set.put(65095, {});
    try instance.cp_set.put(65113, {});
    try instance.cp_set.put(65115, {});
    try instance.cp_set.put(65117, {});
    try instance.cp_set.put(65288, {});
    try instance.cp_set.put(65339, {});
    try instance.cp_set.put(65371, {});
    try instance.cp_set.put(65375, {});
    try instance.cp_set.put(65378, {});

    // Placeholder: 0. Struct name, 1. Code point kind
    singleton = Singleton{
        .instance = instance,
        .ref_count = 1,
    };

    return instance;
}

pub fn deinit(self: *OpenPunctuation) void {
    if (singleton) |*s| {
        s.ref_count -= 1;
        if (s.ref_count == 0) {
            self.cp_set.deinit();
            self.allocator.destroy(s.instance);
            singleton = null;
        }
    }
}

// isOpenPunctuation checks if cp is of the kind Open_Punctuation.
pub fn isOpenPunctuation(self: OpenPunctuation, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    return self.cp_set.get(cp) != null;
}
