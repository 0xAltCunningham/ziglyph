// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Lowest code point
//    4. Highest code point
//! Unicode Open_Punctuation code points.

const std = @import("std");
const mem = std.mem;

const OpenPunctuation = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 40,
hi: u21 = 65378,

pub fn init(allocator: *mem.Allocator) !OpenPunctuation {
    var instance = OpenPunctuation{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 65339),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[0] = true;
    instance.array[51] = true;
    instance.array[83] = true;
    instance.array[3858] = true;
    instance.array[3860] = true;
    instance.array[5747] = true;
    instance.array[8178] = true;
    instance.array[8182] = true;
    instance.array[8221] = true;
    instance.array[8277] = true;
    instance.array[8293] = true;
    instance.array[8928] = true;
    instance.array[8930] = true;
    instance.array[8961] = true;
    instance.array[10048] = true;
    instance.array[10050] = true;
    instance.array[10052] = true;
    instance.array[10054] = true;
    instance.array[10056] = true;
    instance.array[10058] = true;
    instance.array[10060] = true;
    instance.array[10141] = true;
    instance.array[10174] = true;
    instance.array[10176] = true;
    instance.array[10178] = true;
    instance.array[10180] = true;
    instance.array[10182] = true;
    instance.array[10587] = true;
    instance.array[10589] = true;
    instance.array[10591] = true;
    instance.array[10593] = true;
    instance.array[10595] = true;
    instance.array[10597] = true;
    instance.array[10599] = true;
    instance.array[10601] = true;
    instance.array[10603] = true;
    instance.array[10605] = true;
    instance.array[10607] = true;
    instance.array[10672] = true;
    instance.array[10674] = true;
    instance.array[10708] = true;
    instance.array[11770] = true;
    instance.array[11772] = true;
    instance.array[11774] = true;
    instance.array[11776] = true;
    instance.array[11802] = true;
    instance.array[12256] = true;
    instance.array[12258] = true;
    instance.array[12260] = true;
    instance.array[12262] = true;
    instance.array[12264] = true;
    instance.array[12268] = true;
    instance.array[12270] = true;
    instance.array[12272] = true;
    instance.array[12274] = true;
    instance.array[12277] = true;
    instance.array[64791] = true;
    instance.array[65007] = true;
    instance.array[65037] = true;
    instance.array[65039] = true;
    instance.array[65041] = true;
    instance.array[65043] = true;
    instance.array[65045] = true;
    instance.array[65047] = true;
    instance.array[65049] = true;
    instance.array[65051] = true;
    instance.array[65055] = true;
    instance.array[65073] = true;
    instance.array[65075] = true;
    instance.array[65077] = true;
    instance.array[65248] = true;
    instance.array[65299] = true;
    instance.array[65331] = true;
    instance.array[65335] = true;
    instance.array[65338] = true;

    // Placeholder: 0. Struct name, 1. Code point kind
    return instance;
}

pub fn deinit(self: *OpenPunctuation) void {
    self.allocator.free(self.array);
}

// isOpenPunctuation checks if cp is of the kind Open_Punctuation.
pub fn isOpenPunctuation(self: OpenPunctuation, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
