// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Lowest code point
//    3. Highest code point
//! Unicode Modifier_Symbol code points.

const std = @import("std");
const mem = std.mem;

const ModifierSymbol = @This();

allocator: *mem.Allocator,
cp_set: std.AutoHashMap(u21, void),
lo: u21 = 94,
hi: u21 = 127999,

const Singleton = struct {
    instance: *ModifierSymbol,
    ref_count: usize,
};

var singleton: ?Singleton = null;

pub fn init(allocator: *mem.Allocator) !*ModifierSymbol {
    if (singleton) |*s| {
        s.ref_count += 1;
        return s.instance;
    }

    var instance = try allocator.create(ModifierSymbol);

    instance.* = ModifierSymbol{
        .allocator = allocator,
        .cp_set = std.AutoHashMap(u21, void).init(allocator),
    };

    var index: u21 = 0;
    try instance.cp_set.put(94, {});
    try instance.cp_set.put(96, {});
    try instance.cp_set.put(168, {});
    try instance.cp_set.put(175, {});
    try instance.cp_set.put(180, {});
    try instance.cp_set.put(184, {});
    index = 706;
    while (index <= 709) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 722;
    while (index <= 735) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 741;
    while (index <= 747) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    try instance.cp_set.put(749, {});
    index = 751;
    while (index <= 767) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    try instance.cp_set.put(885, {});
    index = 900;
    while (index <= 901) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    try instance.cp_set.put(8125, {});
    index = 8127;
    while (index <= 8129) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 8141;
    while (index <= 8143) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 8157;
    while (index <= 8159) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 8173;
    while (index <= 8175) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 8189;
    while (index <= 8190) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 12443;
    while (index <= 12444) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 42752;
    while (index <= 42774) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 42784;
    while (index <= 42785) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 42889;
    while (index <= 42890) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    try instance.cp_set.put(43867, {});
    index = 43882;
    while (index <= 43883) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 64434;
    while (index <= 64449) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    try instance.cp_set.put(65342, {});
    try instance.cp_set.put(65344, {});
    try instance.cp_set.put(65507, {});
    index = 127995;
    while (index <= 127999) : (index += 1) {
        try instance.cp_set.put(index, {});
    }

    // Placeholder: 0. Struct name, 1. Code point kind
    singleton = Singleton{
        .instance = instance,
        .ref_count = 1,
    };

    return instance;
}

pub fn deinit(self: *ModifierSymbol) void {
    if (singleton) |*s| {
        s.ref_count -= 1;
        if (s.ref_count == 0) {
            self.cp_set.deinit();
            self.allocator.destroy(s.instance);
            singleton = null;
        }
    }
}

// isModifierSymbol checks if cp is of the kind Modifier_Symbol.
pub fn isModifierSymbol(self: ModifierSymbol, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    return self.cp_set.get(cp) != null;
}
