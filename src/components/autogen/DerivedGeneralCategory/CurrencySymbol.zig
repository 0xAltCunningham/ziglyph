// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Lowest code point
//    4. Highest code point
//! Unicode Currency_Symbol code points.

const std = @import("std");
const mem = std.mem;

const CurrencySymbol = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 36,
hi: u21 = 126128,

pub fn init(allocator: *mem.Allocator) !CurrencySymbol {
    var instance = CurrencySymbol{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 126093),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[0] = true;
    index = 126;
    while (index <= 129) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[1387] = true;
    instance.array[1511] = true;
    index = 2010;
    while (index <= 2011) : (index += 1) {
        instance.array[index] = true;
    }
    index = 2510;
    while (index <= 2511) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[2519] = true;
    instance.array[2765] = true;
    instance.array[3029] = true;
    instance.array[3611] = true;
    instance.array[6071] = true;
    index = 8316;
    while (index <= 8347) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[43028] = true;
    instance.array[64984] = true;
    instance.array[65093] = true;
    instance.array[65248] = true;
    index = 65468;
    while (index <= 65469) : (index += 1) {
        instance.array[index] = true;
    }
    index = 65473;
    while (index <= 65474) : (index += 1) {
        instance.array[index] = true;
    }
    index = 73657;
    while (index <= 73660) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[123611] = true;
    instance.array[126092] = true;

    // Placeholder: 0. Struct name, 1. Code point kind
    return instance;
}

pub fn deinit(self: *CurrencySymbol) void {
    self.allocator.free(self.array);
}

// isCurrencySymbol checks if cp is of the kind Currency_Symbol.
pub fn isCurrencySymbol(self: CurrencySymbol, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
