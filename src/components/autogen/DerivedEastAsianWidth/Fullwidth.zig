// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Lowest code point
//    4. Highest code point
//! Unicode Fullwidth code points.

const std = @import("std");
const mem = std.mem;

const Fullwidth = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 12288,
hi: u21 = 65510,

pub fn init(allocator: *mem.Allocator) !Fullwidth {
    var instance = Fullwidth{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 53223),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[0] = true;
    index = 52993;
    while (index <= 52995) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[52996] = true;
    index = 52997;
    while (index <= 52999) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[53000] = true;
    instance.array[53001] = true;
    instance.array[53002] = true;
    instance.array[53003] = true;
    instance.array[53004] = true;
    instance.array[53005] = true;
    index = 53006;
    while (index <= 53007) : (index += 1) {
        instance.array[index] = true;
    }
    index = 53008;
    while (index <= 53017) : (index += 1) {
        instance.array[index] = true;
    }
    index = 53018;
    while (index <= 53019) : (index += 1) {
        instance.array[index] = true;
    }
    index = 53020;
    while (index <= 53022) : (index += 1) {
        instance.array[index] = true;
    }
    index = 53023;
    while (index <= 53024) : (index += 1) {
        instance.array[index] = true;
    }
    index = 53025;
    while (index <= 53050) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[53051] = true;
    instance.array[53052] = true;
    instance.array[53053] = true;
    instance.array[53054] = true;
    instance.array[53055] = true;
    instance.array[53056] = true;
    index = 53057;
    while (index <= 53082) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[53083] = true;
    instance.array[53084] = true;
    instance.array[53085] = true;
    instance.array[53086] = true;
    instance.array[53087] = true;
    instance.array[53088] = true;
    index = 53216;
    while (index <= 53217) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[53218] = true;
    instance.array[53219] = true;
    instance.array[53220] = true;
    index = 53221;
    while (index <= 53222) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name, 1. Code point kind
    return instance;
}

pub fn deinit(self: *Fullwidth) void {
    self.allocator.free(self.array);
}

// isFullwidth checks if cp is of the kind Fullwidth.
pub fn isFullwidth(self: Fullwidth, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
