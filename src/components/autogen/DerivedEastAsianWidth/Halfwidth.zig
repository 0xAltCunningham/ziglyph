// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Lowest code point
//    4. Highest code point
//! Unicode Halfwidth code points.

const std = @import("std");
const mem = std.mem;

const Halfwidth = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 8361,
hi: u21 = 65518,

pub fn init(allocator: *mem.Allocator) !Halfwidth {
    var instance = Halfwidth{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 57158),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[0] = true;
    instance.array[57016] = true;
    instance.array[57017] = true;
    instance.array[57018] = true;
    index = 57019;
    while (index <= 57020) : (index += 1) {
        instance.array[index] = true;
    }
    index = 57021;
    while (index <= 57030) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[57031] = true;
    index = 57032;
    while (index <= 57076) : (index += 1) {
        instance.array[index] = true;
    }
    index = 57077;
    while (index <= 57078) : (index += 1) {
        instance.array[index] = true;
    }
    index = 57079;
    while (index <= 57109) : (index += 1) {
        instance.array[index] = true;
    }
    index = 57113;
    while (index <= 57118) : (index += 1) {
        instance.array[index] = true;
    }
    index = 57121;
    while (index <= 57126) : (index += 1) {
        instance.array[index] = true;
    }
    index = 57129;
    while (index <= 57134) : (index += 1) {
        instance.array[index] = true;
    }
    index = 57137;
    while (index <= 57139) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[57151] = true;
    index = 57152;
    while (index <= 57155) : (index += 1) {
        instance.array[index] = true;
    }
    index = 57156;
    while (index <= 57157) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name, 1. Code point kind
    return instance;
}

pub fn deinit(self: *Halfwidth) void {
    self.allocator.free(self.array);
}

// isHalfwidth checks if cp is of the kind Halfwidth.
pub fn isHalfwidth(self: Halfwidth, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
