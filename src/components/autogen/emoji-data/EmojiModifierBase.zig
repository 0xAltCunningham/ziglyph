// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Lowest code point
//    4. Highest code point
//! Unicode Emoji_Modifier_Base code points.

const std = @import("std");
const mem = std.mem;

const EmojiModifierBase = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 9757,
hi: u21 = 129501,

pub fn init(allocator: *mem.Allocator) !EmojiModifierBase {
    var instance = EmojiModifierBase{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 119745),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[0] = true;
    instance.array[220] = true;
    index = 237;
    while (index <= 239) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[240] = true;
    instance.array[118120] = true;
    index = 118181;
    while (index <= 118183) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[118186] = true;
    instance.array[118189] = true;
    index = 118190;
    while (index <= 118191) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118309;
    while (index <= 118310) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118313;
    while (index <= 118323) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118345;
    while (index <= 118350) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118351;
    while (index <= 118352) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118353;
    while (index <= 118363) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[118367] = true;
    index = 118372;
    while (index <= 118374) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118376;
    while (index <= 118378) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[118386] = true;
    instance.array[118388] = true;
    instance.array[118413] = true;
    index = 118615;
    while (index <= 118616) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[118621] = true;
    instance.array[118643] = true;
    index = 118648;
    while (index <= 118649) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118824;
    while (index <= 118826) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118830;
    while (index <= 118834) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[118918] = true;
    index = 118935;
    while (index <= 118936) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[118937] = true;
    instance.array[118947] = true;
    instance.array[118959] = true;
    instance.array[119535] = true;
    instance.array[119538] = true;
    instance.array[119547] = true;
    index = 119548;
    while (index <= 119553) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[119554] = true;
    instance.array[119561] = true;
    instance.array[119571] = true;
    index = 119572;
    while (index <= 119573) : (index += 1) {
        instance.array[index] = true;
    }
    index = 119574;
    while (index <= 119580) : (index += 1) {
        instance.array[index] = true;
    }
    index = 119583;
    while (index <= 119585) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[119642] = true;
    index = 119704;
    while (index <= 119705) : (index += 1) {
        instance.array[index] = true;
    }
    index = 119707;
    while (index <= 119708) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[119710] = true;
    index = 119728;
    while (index <= 119730) : (index += 1) {
        instance.array[index] = true;
    }
    index = 119732;
    while (index <= 119744) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name, 1. Code point kind
    return instance;
}

pub fn deinit(self: *EmojiModifierBase) void {
    self.allocator.free(self.array);
}

// isEmojiModifierBase checks if cp is of the kind Emoji_Modifier_Base.
pub fn isEmojiModifierBase(self: EmojiModifierBase, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
