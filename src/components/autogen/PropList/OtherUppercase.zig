// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Lowest code point
//    3. Highest code point
//! Unicode Other_Uppercase code points.

const std = @import("std");
const mem = std.mem;

const OtherUppercase = @This();

allocator: *mem.Allocator,
cp_set: std.AutoHashMap(u21, void),
lo: u21 = 8544,
hi: u21 = 127369,

const Singleton = struct {
    instance: *OtherUppercase,
    ref_count: usize,
};

var singleton: ?Singleton = null;

pub fn init(allocator: *mem.Allocator) !*OtherUppercase {
    if (singleton) |*s| {
        s.ref_count += 1;
        return s.instance;
    }

    var instance = try allocator.create(OtherUppercase);

    instance.* = OtherUppercase{
        .allocator = allocator,
        .cp_set = std.AutoHashMap(u21, void).init(allocator),
    };

    var index: u21 = 0;
    index = 8544;
    while (index <= 8559) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 9398;
    while (index <= 9423) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 127280;
    while (index <= 127305) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 127312;
    while (index <= 127337) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 127344;
    while (index <= 127369) : (index += 1) {
        try instance.cp_set.put(index, {});
    }

    // Placeholder: 0. Struct name, 1. Code point kind
    singleton = Singleton{
        .instance = instance,
        .ref_count = 1,
    };

    return instance;
}

pub fn deinit(self: *OtherUppercase) void {
    if (singleton) |*s| {
        s.ref_count -= 1;
        if (s.ref_count == 0) {
            self.cp_set.deinit();
            self.allocator.destroy(s.instance);
            singleton = null;
        }
    }
}

// isOtherUppercase checks if cp is of the kind Other_Uppercase.
pub fn isOtherUppercase(self: OtherUppercase, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    return self.cp_set.get(cp) != null;
}
