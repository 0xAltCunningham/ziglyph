// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Lowest code point
//    3. Highest code point
//! Unicode Soft_Dotted code points.

const std = @import("std");
const mem = std.mem;

const SoftDotted = @This();

allocator: *mem.Allocator,
cp_set: std.AutoHashMap(u21, void),
lo: u21 = 105,
hi: u21 = 120467,

const Singleton = struct {
    instance: *SoftDotted,
    ref_count: usize,
};

var singleton: ?Singleton = null;

pub fn init(allocator: *mem.Allocator) !*SoftDotted {
    if (singleton) |*s| {
        s.ref_count += 1;
        return s.instance;
    }

    var instance = try allocator.create(SoftDotted);

    instance.* = SoftDotted{
        .allocator = allocator,
        .cp_set = std.AutoHashMap(u21, void).init(allocator),
    };

    var index: u21 = 0;
    index = 105;
    while (index <= 106) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    try instance.cp_set.put(303, {});
    try instance.cp_set.put(585, {});
    try instance.cp_set.put(616, {});
    try instance.cp_set.put(669, {});
    try instance.cp_set.put(690, {});
    try instance.cp_set.put(1011, {});
    try instance.cp_set.put(1110, {});
    try instance.cp_set.put(1112, {});
    try instance.cp_set.put(7522, {});
    try instance.cp_set.put(7574, {});
    try instance.cp_set.put(7588, {});
    try instance.cp_set.put(7592, {});
    try instance.cp_set.put(7725, {});
    try instance.cp_set.put(7883, {});
    try instance.cp_set.put(8305, {});
    index = 8520;
    while (index <= 8521) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    try instance.cp_set.put(11388, {});
    index = 119842;
    while (index <= 119843) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 119894;
    while (index <= 119895) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 119946;
    while (index <= 119947) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 119998;
    while (index <= 119999) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 120050;
    while (index <= 120051) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 120102;
    while (index <= 120103) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 120154;
    while (index <= 120155) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 120206;
    while (index <= 120207) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 120258;
    while (index <= 120259) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 120310;
    while (index <= 120311) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 120362;
    while (index <= 120363) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 120414;
    while (index <= 120415) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 120466;
    while (index <= 120467) : (index += 1) {
        try instance.cp_set.put(index, {});
    }

    // Placeholder: 0. Struct name, 1. Code point kind
    singleton = Singleton{
        .instance = instance,
        .ref_count = 1,
    };

    return instance;
}

pub fn deinit(self: *SoftDotted) void {
    if (singleton) |*s| {
        s.ref_count -= 1;
        if (s.ref_count == 0) {
            self.cp_set.deinit();
            self.allocator.destroy(s.instance);
            singleton = null;
        }
    }
}

// isSoftDotted checks if cp is of the kind Soft_Dotted.
pub fn isSoftDotted(self: SoftDotted, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    return self.cp_set.get(cp) != null;
}
