// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Lowest code point
//    3. Highest code point
//! Unicode Variation_Selector code points.

const std = @import("std");
const mem = std.mem;

const VariationSelector = @This();

allocator: *mem.Allocator,
cp_set: std.AutoHashMap(u21, void),
lo: u21 = 6155,
hi: u21 = 917999,

pub fn init(allocator: *mem.Allocator) !VariationSelector {
    var instance = VariationSelector{
        .allocator = allocator,
        .cp_set = std.AutoHashMap(u21, void).init(allocator),
    };

    var index: u21 = 0;
    index = 6155;
    while (index <= 6157) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 65024;
    while (index <= 65039) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    index = 917760;
    while (index <= 917999) : (index += 1) {
        try instance.cp_set.put(index, {});
    }

    // Placeholder: 0. Struct name, 1. Code point kind
    return instance;
}

pub fn deinit(self: *VariationSelector) void {
    self.cp_set.deinit();
}

// isVariationSelector checks if cp is of the kind Variation_Selector.
pub fn isVariationSelector(self: VariationSelector, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    return self.cp_set.get(cp) != null;
}
