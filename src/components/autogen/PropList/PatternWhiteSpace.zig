// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Lowest code point
//    3. Highest code point
//! Unicode Pattern_White_Space code points.

const std = @import("std");
const mem = std.mem;

const PatternWhiteSpace = @This();

allocator: *mem.Allocator,
cp_set: std.AutoHashMap(u21, void),
lo: u21 = 9,
hi: u21 = 8233,

pub fn init(allocator: *mem.Allocator) !PatternWhiteSpace {
    var instance = PatternWhiteSpace{
        .allocator = allocator,
        .cp_set = std.AutoHashMap(u21, void).init(allocator),
    };

    var index: u21 = 0;
    index = 9;
    while (index <= 13) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    try instance.cp_set.put(32, {});
    try instance.cp_set.put(133, {});
    index = 8206;
    while (index <= 8207) : (index += 1) {
        try instance.cp_set.put(index, {});
    }
    try instance.cp_set.put(8232, {});
    try instance.cp_set.put(8233, {});

    // Placeholder: 0. Struct name, 1. Code point kind
    return instance;
}

pub fn deinit(self: *PatternWhiteSpace) void {
    self.cp_set.deinit();
}

// isPatternWhiteSpace checks if cp is of the kind Pattern_White_Space.
pub fn isPatternWhiteSpace(self: PatternWhiteSpace, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    return self.cp_set.get(cp) != null;
}
