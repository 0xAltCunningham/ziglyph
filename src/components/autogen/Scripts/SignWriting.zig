// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode SignWriting code points.

const std = @import("std");
const mem = std.mem;

const SignWriting = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 120832,
hi: u21 = 121519,

pub fn init(allocator: *mem.Allocator) !SignWriting {
    var instance = SignWriting{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 688),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 0;
    while (index <= 511) : (index += 1) {
        instance.array[index] = true;
    }
    index = 512;
    while (index <= 566) : (index += 1) {
        instance.array[index] = true;
    }
    index = 567;
    while (index <= 570) : (index += 1) {
        instance.array[index] = true;
    }
    index = 571;
    while (index <= 620) : (index += 1) {
        instance.array[index] = true;
    }
    index = 621;
    while (index <= 628) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[629] = true;
    index = 630;
    while (index <= 643) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[644] = true;
    index = 645;
    while (index <= 646) : (index += 1) {
        instance.array[index] = true;
    }
    index = 647;
    while (index <= 651) : (index += 1) {
        instance.array[index] = true;
    }
    index = 667;
    while (index <= 671) : (index += 1) {
        instance.array[index] = true;
    }
    index = 673;
    while (index <= 687) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *SignWriting) void {
    self.allocator.free(self.array);
}

// isSignWriting checks if cp is of the kind SignWriting.
pub fn isSignWriting(self: SignWriting, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
