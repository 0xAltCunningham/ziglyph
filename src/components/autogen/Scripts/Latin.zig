// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Latin code points.

const std = @import("std");
const mem = std.mem;

const Latin = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 65,
hi: u21 = 65370,

pub fn init(allocator: *mem.Allocator) !Latin {
    var instance = Latin{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 65306),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 0;
    while (index <= 25) : (index += 1) {
        instance.array[index] = true;
    }
    index = 32;
    while (index <= 57) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[105] = true;
    instance.array[121] = true;
    index = 127;
    while (index <= 149) : (index += 1) {
        instance.array[index] = true;
    }
    index = 151;
    while (index <= 181) : (index += 1) {
        instance.array[index] = true;
    }
    index = 183;
    while (index <= 377) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[378] = true;
    index = 379;
    while (index <= 382) : (index += 1) {
        instance.array[index] = true;
    }
    index = 383;
    while (index <= 386) : (index += 1) {
        instance.array[index] = true;
    }
    index = 387;
    while (index <= 594) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[595] = true;
    index = 596;
    while (index <= 622) : (index += 1) {
        instance.array[index] = true;
    }
    index = 623;
    while (index <= 631) : (index += 1) {
        instance.array[index] = true;
    }
    index = 671;
    while (index <= 675) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7359;
    while (index <= 7396) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7403;
    while (index <= 7451) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7457;
    while (index <= 7460) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7466;
    while (index <= 7478) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7480;
    while (index <= 7513) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7514;
    while (index <= 7549) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7615;
    while (index <= 7870) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[8240] = true;
    instance.array[8254] = true;
    index = 8271;
    while (index <= 8283) : (index += 1) {
        instance.array[index] = true;
    }
    index = 8425;
    while (index <= 8426) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[8433] = true;
    instance.array[8461] = true;
    index = 8479;
    while (index <= 8513) : (index += 1) {
        instance.array[index] = true;
    }
    index = 8514;
    while (index <= 8515) : (index += 1) {
        instance.array[index] = true;
    }
    index = 8516;
    while (index <= 8519) : (index += 1) {
        instance.array[index] = true;
    }
    index = 11295;
    while (index <= 11322) : (index += 1) {
        instance.array[index] = true;
    }
    index = 11323;
    while (index <= 11324) : (index += 1) {
        instance.array[index] = true;
    }
    index = 11325;
    while (index <= 11326) : (index += 1) {
        instance.array[index] = true;
    }
    index = 42721;
    while (index <= 42798) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[42799] = true;
    index = 42800;
    while (index <= 42822) : (index += 1) {
        instance.array[index] = true;
    }
    index = 42826;
    while (index <= 42829) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[42830] = true;
    index = 42831;
    while (index <= 42878) : (index += 1) {
        instance.array[index] = true;
    }
    index = 42881;
    while (index <= 42889) : (index += 1) {
        instance.array[index] = true;
    }
    index = 42932;
    while (index <= 42933) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[42934] = true;
    index = 42935;
    while (index <= 42936) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[42937] = true;
    index = 42938;
    while (index <= 42942) : (index += 1) {
        instance.array[index] = true;
    }
    index = 43759;
    while (index <= 43801) : (index += 1) {
        instance.array[index] = true;
    }
    index = 43803;
    while (index <= 43806) : (index += 1) {
        instance.array[index] = true;
    }
    index = 43807;
    while (index <= 43811) : (index += 1) {
        instance.array[index] = true;
    }
    index = 43813;
    while (index <= 43815) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[43816] = true;
    index = 64191;
    while (index <= 64197) : (index += 1) {
        instance.array[index] = true;
    }
    index = 65248;
    while (index <= 65273) : (index += 1) {
        instance.array[index] = true;
    }
    index = 65280;
    while (index <= 65305) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Latin) void {
    self.allocator.free(self.array);
}

// isLatin checks if cp is of the kind Latin.
pub fn isLatin(self: Latin, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
