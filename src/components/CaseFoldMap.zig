// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
//! Unicode case folding map.

const std = @import("std");
const unicode = std.unicode;
const LowerMap = @import("LowerMap.zig");
const CaseFoldMap = @This();

allocator: *std.mem.Allocator,
lower_map: LowerMap,
map: std.AutoHashMap(u21, []const u21),

pub fn init(allocator: *std.mem.Allocator) !CaseFoldMap {
    var instance = CaseFoldMap{
        .allocator = allocator,
        .lower_map = try LowerMap.init(allocator),
        .map = std.AutoHashMap(u21, []const u21).init(allocator),
    };

    try instance.map.put(0x1FBC, &[2]u21{
        0x3B1,
        0x3B9,
    });
    try instance.map.put(0x1FA8, &[2]u21{
        0x1F60,
        0x3B9,
    });
    try instance.map.put(0x1E97, &[2]u21{
        0x74,
        0x308,
    });
    try instance.map.put(0x1F82, &[2]u21{
        0x1F02,
        0x3B9,
    });
    try instance.map.put(0x1F8E, &[2]u21{
        0x1F06,
        0x3B9,
    });
    try instance.map.put(0x1FB7, &[3]u21{
        0x3B1,
        0x342,
        0x3B9,
    });
    try instance.map.put(0x1F9C, &[2]u21{
        0x1F24,
        0x3B9,
    });
    try instance.map.put(0x3B0, &[3]u21{
        0x3C5,
        0x308,
        0x301,
    });
    try instance.map.put(0x1F56, &[3]u21{
        0x3C5,
        0x313,
        0x342,
    });
    try instance.map.put(0x587, &[2]u21{
        0x565,
        0x582,
    });
    try instance.map.put(0x1F98, &[2]u21{
        0x1F20,
        0x3B9,
    });
    try instance.map.put(0x1F52, &[3]u21{
        0x3C5,
        0x313,
        0x300,
    });
    try instance.map.put(0x1FA5, &[2]u21{
        0x1F65,
        0x3B9,
    });
    try instance.map.put(0x1FA7, &[2]u21{
        0x1F67,
        0x3B9,
    });
    try instance.map.put(0x1F8A, &[2]u21{
        0x1F02,
        0x3B9,
    });
    try instance.map.put(0x1F87, &[2]u21{
        0x1F07,
        0x3B9,
    });
    try instance.map.put(0x1F9B, &[2]u21{
        0x1F23,
        0x3B9,
    });
    try instance.map.put(0x1FAF, &[2]u21{
        0x1F67,
        0x3B9,
    });
    try instance.map.put(0x1F8F, &[2]u21{
        0x1F07,
        0x3B9,
    });
    try instance.map.put(0x1F99, &[2]u21{
        0x1F21,
        0x3B9,
    });
    try instance.map.put(0x1FA0, &[2]u21{
        0x1F60,
        0x3B9,
    });
    try instance.map.put(0x1F96, &[2]u21{
        0x1F26,
        0x3B9,
    });
    try instance.map.put(0x1F0, &[2]u21{
        0x6A,
        0x30C,
    });
    try instance.map.put(0x1F97, &[2]u21{
        0x1F27,
        0x3B9,
    });
    try instance.map.put(0x1FF4, &[2]u21{
        0x3CE,
        0x3B9,
    });
    try instance.map.put(0xFB14, &[2]u21{
        0x574,
        0x565,
    });
    try instance.map.put(0x1E9E, &[2]u21{
        0x73,
        0x73,
    });
    try instance.map.put(0x1F8B, &[2]u21{
        0x1F03,
        0x3B9,
    });
    try instance.map.put(0x1F84, &[2]u21{
        0x1F04,
        0x3B9,
    });
    try instance.map.put(0x1F81, &[2]u21{
        0x1F01,
        0x3B9,
    });
    try instance.map.put(0x1F83, &[2]u21{
        0x1F03,
        0x3B9,
    });
    try instance.map.put(0x1FE3, &[3]u21{
        0x3C5,
        0x308,
        0x301,
    });
    try instance.map.put(0x1E98, &[2]u21{
        0x77,
        0x30A,
    });
    try instance.map.put(0xFB16, &[2]u21{
        0x57E,
        0x576,
    });
    try instance.map.put(0x130, &[2]u21{
        0x69,
        0x307,
    });
    try instance.map.put(0xFB13, &[2]u21{
        0x574,
        0x576,
    });
    try instance.map.put(0xFB04, &[3]u21{
        0x66,
        0x66,
        0x6C,
    });
    try instance.map.put(0x1FAE, &[2]u21{
        0x1F66,
        0x3B9,
    });
    try instance.map.put(0x1FA2, &[2]u21{
        0x1F62,
        0x3B9,
    });
    try instance.map.put(0xFB03, &[3]u21{
        0x66,
        0x66,
        0x69,
    });
    try instance.map.put(0x1FE4, &[2]u21{
        0x3C1,
        0x313,
    });
    try instance.map.put(0x1F95, &[2]u21{
        0x1F25,
        0x3B9,
    });
    try instance.map.put(0x1E96, &[2]u21{
        0x68,
        0x331,
    });
    try instance.map.put(0xFB17, &[2]u21{
        0x574,
        0x56D,
    });
    try instance.map.put(0x1F88, &[2]u21{
        0x1F00,
        0x3B9,
    });
    try instance.map.put(0x1FE7, &[3]u21{
        0x3C5,
        0x308,
        0x342,
    });
    try instance.map.put(0xFB05, &[2]u21{
        0x73,
        0x74,
    });
    try instance.map.put(0x1FA4, &[2]u21{
        0x1F64,
        0x3B9,
    });
    try instance.map.put(0x1F86, &[2]u21{
        0x1F06,
        0x3B9,
    });
    try instance.map.put(0x1F9E, &[2]u21{
        0x1F26,
        0x3B9,
    });
    try instance.map.put(0x1FC4, &[2]u21{
        0x3AE,
        0x3B9,
    });
    try instance.map.put(0xFB01, &[2]u21{
        0x66,
        0x69,
    });
    try instance.map.put(0xFB15, &[2]u21{
        0x574,
        0x56B,
    });
    try instance.map.put(0x1FB2, &[2]u21{
        0x1F70,
        0x3B9,
    });
    try instance.map.put(0xFB02, &[2]u21{
        0x66,
        0x6C,
    });
    try instance.map.put(0x1F9D, &[2]u21{
        0x1F25,
        0x3B9,
    });
    try instance.map.put(0x1F91, &[2]u21{
        0x1F21,
        0x3B9,
    });
    try instance.map.put(0x1FF2, &[2]u21{
        0x1F7C,
        0x3B9,
    });
    try instance.map.put(0x149, &[2]u21{
        0x2BC,
        0x6E,
    });
    try instance.map.put(0x1E99, &[2]u21{
        0x79,
        0x30A,
    });
    try instance.map.put(0x1F92, &[2]u21{
        0x1F22,
        0x3B9,
    });
    try instance.map.put(0x1FB4, &[2]u21{
        0x3AC,
        0x3B9,
    });
    try instance.map.put(0x1FB6, &[2]u21{
        0x3B1,
        0x342,
    });
    try instance.map.put(0x1F50, &[2]u21{
        0x3C5,
        0x313,
    });
    try instance.map.put(0x1F89, &[2]u21{
        0x1F01,
        0x3B9,
    });
    try instance.map.put(0x1FFC, &[2]u21{
        0x3C9,
        0x3B9,
    });
    try instance.map.put(0x1FD7, &[3]u21{
        0x3B9,
        0x308,
        0x342,
    });
    try instance.map.put(0x1FA9, &[2]u21{
        0x1F61,
        0x3B9,
    });
    try instance.map.put(0x1FE2, &[3]u21{
        0x3C5,
        0x308,
        0x300,
    });
    try instance.map.put(0x1FAA, &[2]u21{
        0x1F62,
        0x3B9,
    });
    try instance.map.put(0x1FAD, &[2]u21{
        0x1F65,
        0x3B9,
    });
    try instance.map.put(0x1F8C, &[2]u21{
        0x1F04,
        0x3B9,
    });
    try instance.map.put(0x1F80, &[2]u21{
        0x1F00,
        0x3B9,
    });
    try instance.map.put(0x1F90, &[2]u21{
        0x1F20,
        0x3B9,
    });
    try instance.map.put(0x1F93, &[2]u21{
        0x1F23,
        0x3B9,
    });
    try instance.map.put(0xDF, &[2]u21{
        0x73,
        0x73,
    });
    try instance.map.put(0x1F94, &[2]u21{
        0x1F24,
        0x3B9,
    });
    try instance.map.put(0x1FAB, &[2]u21{
        0x1F63,
        0x3B9,
    });
    try instance.map.put(0x1FD2, &[3]u21{
        0x3B9,
        0x308,
        0x300,
    });
    try instance.map.put(0x1FF3, &[2]u21{
        0x3C9,
        0x3B9,
    });
    try instance.map.put(0x1F9F, &[2]u21{
        0x1F27,
        0x3B9,
    });
    try instance.map.put(0x1FA6, &[2]u21{
        0x1F66,
        0x3B9,
    });
    try instance.map.put(0x1FC2, &[2]u21{
        0x1F74,
        0x3B9,
    });
    try instance.map.put(0x1FB3, &[2]u21{
        0x3B1,
        0x3B9,
    });
    try instance.map.put(0x1FF6, &[2]u21{
        0x3C9,
        0x342,
    });
    try instance.map.put(0x1FC3, &[2]u21{
        0x3B7,
        0x3B9,
    });
    try instance.map.put(0x1FCC, &[2]u21{
        0x3B7,
        0x3B9,
    });
    try instance.map.put(0x1FD6, &[2]u21{
        0x3B9,
        0x342,
    });
    try instance.map.put(0x1F8D, &[2]u21{
        0x1F05,
        0x3B9,
    });
    try instance.map.put(0x1FE6, &[2]u21{
        0x3C5,
        0x342,
    });
    try instance.map.put(0xFB00, &[2]u21{
        0x66,
        0x66,
    });
    try instance.map.put(0x1F85, &[2]u21{
        0x1F05,
        0x3B9,
    });
    try instance.map.put(0x1FF7, &[3]u21{
        0x3C9,
        0x342,
        0x3B9,
    });
    try instance.map.put(0x1FA1, &[2]u21{
        0x1F61,
        0x3B9,
    });
    try instance.map.put(0x1F9A, &[2]u21{
        0x1F22,
        0x3B9,
    });
    try instance.map.put(0xFB06, &[2]u21{
        0x73,
        0x74,
    });
    try instance.map.put(0x1E9A, &[2]u21{
        0x61,
        0x2BE,
    });
    try instance.map.put(0x1FAC, &[2]u21{
        0x1F64,
        0x3B9,
    });
    try instance.map.put(0x1FC7, &[3]u21{
        0x3B7,
        0x342,
        0x3B9,
    });
    try instance.map.put(0x1FC6, &[2]u21{
        0x3B7,
        0x342,
    });
    try instance.map.put(0x390, &[3]u21{
        0x3B9,
        0x308,
        0x301,
    });
    try instance.map.put(0x1FD3, &[3]u21{
        0x3B9,
        0x308,
        0x301,
    });
    try instance.map.put(0x1F54, &[3]u21{
        0x3C5,
        0x313,
        0x301,
    });
    try instance.map.put(0x1FA3, &[2]u21{
        0x1F63,
        0x3B9,
    });

    return instance;
}

const Self = @This();
pub fn deinit(self: *Self) void {
    self.lower_map.deinit();
    self.map.deinit();
}

pub const CaseFold = union(enum) {
    simple: u21,
    full: []const u21,
};

/// toCaseFold will convert a code point into its case folded equivalent. Note that this can result
/// in a mapping to more than one code point, known as the full case fold. In the case of a simple
/// case fold, the returned CaseFold has the lowercase version if available or the same code point 
/// otherwise.
pub fn toCaseFold(self: Self, cp: u21) CaseFold {
    if (self.map.get(cp)) |seq| {
        return .{ .full = seq };
    } else {
        return .{ .simple = self.lower_map.toLower(cp) };
    }
}
