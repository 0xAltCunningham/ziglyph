// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Oriya code points.

const std = @import("std");
const mem = std.mem;

const Oriya = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 2818,
hi: u21 = 2946,

pub fn init(allocator: *mem.Allocator) !Oriya {
    var instance = Oriya{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 129),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[2097151] = true;
    index = 0;
    while (index <= 1) : (index += 1) {
        instance.array[index] = true;
    }
    index = 3;
    while (index <= 10) : (index += 1) {
        instance.array[index] = true;
    }
    index = 13;
    while (index <= 14) : (index += 1) {
        instance.array[index] = true;
    }
    index = 17;
    while (index <= 38) : (index += 1) {
        instance.array[index] = true;
    }
    index = 40;
    while (index <= 46) : (index += 1) {
        instance.array[index] = true;
    }
    index = 48;
    while (index <= 49) : (index += 1) {
        instance.array[index] = true;
    }
    index = 51;
    while (index <= 55) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[58] = true;
    instance.array[59] = true;
    instance.array[60] = true;
    instance.array[61] = true;
    instance.array[62] = true;
    index = 63;
    while (index <= 66) : (index += 1) {
        instance.array[index] = true;
    }
    index = 69;
    while (index <= 70) : (index += 1) {
        instance.array[index] = true;
    }
    index = 73;
    while (index <= 74) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[75] = true;
    index = 83;
    while (index <= 84) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[85] = true;
    index = 90;
    while (index <= 91) : (index += 1) {
        instance.array[index] = true;
    }
    index = 93;
    while (index <= 95) : (index += 1) {
        instance.array[index] = true;
    }
    index = 96;
    while (index <= 97) : (index += 1) {
        instance.array[index] = true;
    }
    index = 100;
    while (index <= 109) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[110] = true;
    instance.array[111] = true;
    index = 112;
    while (index <= 117) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Oriya) void {
    self.allocator.free(self.array);
}

// isOriya checks if cp is of the kind Oriya.
pub fn isOriya(self: Oriya, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
