// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Kannada code points.

const std = @import("std");
const mem = std.mem;

const Kannada = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 3200,
hi: u21 = 3314,

pub fn init(allocator: *mem.Allocator) !Kannada {
    var instance = Kannada{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 115),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[0] = true;
    instance.array[1] = true;
    index = 2;
    while (index <= 3) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[4] = true;
    index = 5;
    while (index <= 12) : (index += 1) {
        instance.array[index] = true;
    }
    index = 14;
    while (index <= 16) : (index += 1) {
        instance.array[index] = true;
    }
    index = 18;
    while (index <= 40) : (index += 1) {
        instance.array[index] = true;
    }
    index = 42;
    while (index <= 51) : (index += 1) {
        instance.array[index] = true;
    }
    index = 53;
    while (index <= 57) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[60] = true;
    instance.array[61] = true;
    instance.array[62] = true;
    instance.array[63] = true;
    index = 64;
    while (index <= 68) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[70] = true;
    index = 71;
    while (index <= 72) : (index += 1) {
        instance.array[index] = true;
    }
    index = 74;
    while (index <= 75) : (index += 1) {
        instance.array[index] = true;
    }
    index = 76;
    while (index <= 77) : (index += 1) {
        instance.array[index] = true;
    }
    index = 85;
    while (index <= 86) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[94] = true;
    index = 96;
    while (index <= 97) : (index += 1) {
        instance.array[index] = true;
    }
    index = 98;
    while (index <= 99) : (index += 1) {
        instance.array[index] = true;
    }
    index = 102;
    while (index <= 111) : (index += 1) {
        instance.array[index] = true;
    }
    index = 113;
    while (index <= 114) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Kannada) void {
    self.allocator.free(self.array);
}

// isKannada checks if cp is of the kind Kannada.
pub fn isKannada(self: Kannada, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
