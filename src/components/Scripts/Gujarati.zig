// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Gujarati code points.

const std = @import("std");
const mem = std.mem;

const Gujarati = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 2691,
hi: u21 = 2817,

pub fn init(allocator: *mem.Allocator) !Gujarati {
    var instance = Gujarati{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 127),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 2097150;
    while (index <= 2097151) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[0] = true;
    index = 2;
    while (index <= 10) : (index += 1) {
        instance.array[index] = true;
    }
    index = 12;
    while (index <= 14) : (index += 1) {
        instance.array[index] = true;
    }
    index = 16;
    while (index <= 37) : (index += 1) {
        instance.array[index] = true;
    }
    index = 39;
    while (index <= 45) : (index += 1) {
        instance.array[index] = true;
    }
    index = 47;
    while (index <= 48) : (index += 1) {
        instance.array[index] = true;
    }
    index = 50;
    while (index <= 54) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[57] = true;
    instance.array[58] = true;
    index = 59;
    while (index <= 61) : (index += 1) {
        instance.array[index] = true;
    }
    index = 62;
    while (index <= 66) : (index += 1) {
        instance.array[index] = true;
    }
    index = 68;
    while (index <= 69) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[70] = true;
    index = 72;
    while (index <= 73) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[74] = true;
    instance.array[77] = true;
    index = 93;
    while (index <= 94) : (index += 1) {
        instance.array[index] = true;
    }
    index = 95;
    while (index <= 96) : (index += 1) {
        instance.array[index] = true;
    }
    index = 99;
    while (index <= 108) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[109] = true;
    instance.array[110] = true;
    instance.array[118] = true;
    index = 119;
    while (index <= 124) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Gujarati) void {
    self.allocator.free(self.array);
}

// isGujarati checks if cp is of the kind Gujarati.
pub fn isGujarati(self: Gujarati, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
