// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Sinhala code points.

const std = @import("std");
const mem = std.mem;

const Sinhala = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 3458,
hi: u21 = 70132,

pub fn init(allocator: *mem.Allocator) !Sinhala {
    var instance = Sinhala{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 66675),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[2097151] = true;
    index = 0;
    while (index <= 1) : (index += 1) {
        instance.array[index] = true;
    }
    index = 3;
    while (index <= 20) : (index += 1) {
        instance.array[index] = true;
    }
    index = 24;
    while (index <= 47) : (index += 1) {
        instance.array[index] = true;
    }
    index = 49;
    while (index <= 57) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[59] = true;
    index = 62;
    while (index <= 68) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[72] = true;
    index = 77;
    while (index <= 79) : (index += 1) {
        instance.array[index] = true;
    }
    index = 80;
    while (index <= 82) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[84] = true;
    index = 86;
    while (index <= 93) : (index += 1) {
        instance.array[index] = true;
    }
    index = 100;
    while (index <= 109) : (index += 1) {
        instance.array[index] = true;
    }
    index = 112;
    while (index <= 113) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[114] = true;
    index = 66655;
    while (index <= 66674) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Sinhala) void {
    self.allocator.free(self.array);
}

// isSinhala checks if cp is of the kind Sinhala.
pub fn isSinhala(self: Sinhala, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
