// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Hebrew code points.

const std = @import("std");
const mem = std.mem;

const Hebrew = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 1470,
hi: u21 = 64335,

pub fn init(allocator: *mem.Allocator) !Hebrew {
    var instance = Hebrew{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 62866),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 2097107;
    while (index <= 2097151) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[0] = true;
    instance.array[1] = true;
    instance.array[2] = true;
    index = 3;
    while (index <= 4) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[5] = true;
    index = 6;
    while (index <= 7) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[8] = true;
    instance.array[9] = true;
    index = 18;
    while (index <= 44) : (index += 1) {
        instance.array[index] = true;
    }
    index = 49;
    while (index <= 52) : (index += 1) {
        instance.array[index] = true;
    }
    index = 53;
    while (index <= 54) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[62815] = true;
    instance.array[62816] = true;
    index = 62817;
    while (index <= 62826) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[62827] = true;
    index = 62828;
    while (index <= 62840) : (index += 1) {
        instance.array[index] = true;
    }
    index = 62842;
    while (index <= 62846) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[62848] = true;
    index = 62850;
    while (index <= 62851) : (index += 1) {
        instance.array[index] = true;
    }
    index = 62853;
    while (index <= 62854) : (index += 1) {
        instance.array[index] = true;
    }
    index = 62856;
    while (index <= 62865) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Hebrew) void {
    self.allocator.free(self.array);
}

// isHebrew checks if cp is of the kind Hebrew.
pub fn isHebrew(self: Hebrew, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
