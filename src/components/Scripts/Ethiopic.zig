// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Ethiopic code points.

const std = @import("std");
const mem = std.mem;

const Ethiopic = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 4682,
hi: u21 = 43822,

pub fn init(allocator: *mem.Allocator) !Ethiopic {
    var instance = Ethiopic{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 39141),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 2097078;
    while (index <= 2097150) : (index += 1) {
        instance.array[index] = true;
    }
    index = 0;
    while (index <= 3) : (index += 1) {
        instance.array[index] = true;
    }
    index = 6;
    while (index <= 12) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[14] = true;
    index = 16;
    while (index <= 19) : (index += 1) {
        instance.array[index] = true;
    }
    index = 22;
    while (index <= 62) : (index += 1) {
        instance.array[index] = true;
    }
    index = 64;
    while (index <= 67) : (index += 1) {
        instance.array[index] = true;
    }
    index = 70;
    while (index <= 102) : (index += 1) {
        instance.array[index] = true;
    }
    index = 104;
    while (index <= 107) : (index += 1) {
        instance.array[index] = true;
    }
    index = 110;
    while (index <= 116) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[118] = true;
    index = 120;
    while (index <= 123) : (index += 1) {
        instance.array[index] = true;
    }
    index = 126;
    while (index <= 140) : (index += 1) {
        instance.array[index] = true;
    }
    index = 142;
    while (index <= 198) : (index += 1) {
        instance.array[index] = true;
    }
    index = 200;
    while (index <= 203) : (index += 1) {
        instance.array[index] = true;
    }
    index = 206;
    while (index <= 272) : (index += 1) {
        instance.array[index] = true;
    }
    index = 275;
    while (index <= 277) : (index += 1) {
        instance.array[index] = true;
    }
    index = 278;
    while (index <= 286) : (index += 1) {
        instance.array[index] = true;
    }
    index = 287;
    while (index <= 306) : (index += 1) {
        instance.array[index] = true;
    }
    index = 310;
    while (index <= 325) : (index += 1) {
        instance.array[index] = true;
    }
    index = 326;
    while (index <= 335) : (index += 1) {
        instance.array[index] = true;
    }
    index = 6966;
    while (index <= 6988) : (index += 1) {
        instance.array[index] = true;
    }
    index = 6998;
    while (index <= 7004) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7006;
    while (index <= 7012) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7014;
    while (index <= 7020) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7022;
    while (index <= 7028) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7030;
    while (index <= 7036) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7038;
    while (index <= 7044) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7046;
    while (index <= 7052) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7054;
    while (index <= 7060) : (index += 1) {
        instance.array[index] = true;
    }
    index = 39095;
    while (index <= 39100) : (index += 1) {
        instance.array[index] = true;
    }
    index = 39103;
    while (index <= 39108) : (index += 1) {
        instance.array[index] = true;
    }
    index = 39111;
    while (index <= 39116) : (index += 1) {
        instance.array[index] = true;
    }
    index = 39126;
    while (index <= 39132) : (index += 1) {
        instance.array[index] = true;
    }
    index = 39134;
    while (index <= 39140) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Ethiopic) void {
    self.allocator.free(self.array);
}

// isEthiopic checks if cp is of the kind Ethiopic.
pub fn isEthiopic(self: Ethiopic, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
