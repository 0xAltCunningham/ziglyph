// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Tamil code points.

const std = @import("std");
const mem = std.mem;

const Tamil = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 2947,
hi: u21 = 73727,

pub fn init(allocator: *mem.Allocator) !Tamil {
    var instance = Tamil{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 70781),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[2097151] = true;
    instance.array[0] = true;
    index = 2;
    while (index <= 7) : (index += 1) {
        instance.array[index] = true;
    }
    index = 11;
    while (index <= 13) : (index += 1) {
        instance.array[index] = true;
    }
    index = 15;
    while (index <= 18) : (index += 1) {
        instance.array[index] = true;
    }
    index = 22;
    while (index <= 23) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[25] = true;
    index = 27;
    while (index <= 28) : (index += 1) {
        instance.array[index] = true;
    }
    index = 32;
    while (index <= 33) : (index += 1) {
        instance.array[index] = true;
    }
    index = 37;
    while (index <= 39) : (index += 1) {
        instance.array[index] = true;
    }
    index = 43;
    while (index <= 54) : (index += 1) {
        instance.array[index] = true;
    }
    index = 59;
    while (index <= 60) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[61] = true;
    index = 62;
    while (index <= 63) : (index += 1) {
        instance.array[index] = true;
    }
    index = 67;
    while (index <= 69) : (index += 1) {
        instance.array[index] = true;
    }
    index = 71;
    while (index <= 73) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[74] = true;
    instance.array[77] = true;
    instance.array[84] = true;
    index = 99;
    while (index <= 108) : (index += 1) {
        instance.array[index] = true;
    }
    index = 109;
    while (index <= 111) : (index += 1) {
        instance.array[index] = true;
    }
    index = 112;
    while (index <= 117) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[118] = true;
    instance.array[119] = true;
    index = 70717;
    while (index <= 70737) : (index += 1) {
        instance.array[index] = true;
    }
    index = 70738;
    while (index <= 70745) : (index += 1) {
        instance.array[index] = true;
    }
    index = 70746;
    while (index <= 70749) : (index += 1) {
        instance.array[index] = true;
    }
    index = 70750;
    while (index <= 70766) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[70780] = true;

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Tamil) void {
    self.allocator.free(self.array);
}

// isTamil checks if cp is of the kind Tamil.
pub fn isTamil(self: Tamil, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
