// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Telugu code points.

const std = @import("std");
const mem = std.mem;

const Telugu = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 3073,
hi: u21 = 3200,

pub fn init(allocator: *mem.Allocator) !Telugu {
    var instance = Telugu{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 128),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[2097151] = true;
    index = 0;
    while (index <= 2) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[3] = true;
    index = 4;
    while (index <= 11) : (index += 1) {
        instance.array[index] = true;
    }
    index = 13;
    while (index <= 15) : (index += 1) {
        instance.array[index] = true;
    }
    index = 17;
    while (index <= 39) : (index += 1) {
        instance.array[index] = true;
    }
    index = 41;
    while (index <= 56) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[60] = true;
    index = 61;
    while (index <= 63) : (index += 1) {
        instance.array[index] = true;
    }
    index = 64;
    while (index <= 67) : (index += 1) {
        instance.array[index] = true;
    }
    index = 69;
    while (index <= 71) : (index += 1) {
        instance.array[index] = true;
    }
    index = 73;
    while (index <= 76) : (index += 1) {
        instance.array[index] = true;
    }
    index = 84;
    while (index <= 85) : (index += 1) {
        instance.array[index] = true;
    }
    index = 87;
    while (index <= 89) : (index += 1) {
        instance.array[index] = true;
    }
    index = 95;
    while (index <= 96) : (index += 1) {
        instance.array[index] = true;
    }
    index = 97;
    while (index <= 98) : (index += 1) {
        instance.array[index] = true;
    }
    index = 101;
    while (index <= 110) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[118] = true;
    index = 119;
    while (index <= 125) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[126] = true;

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Telugu) void {
    self.allocator.free(self.array);
}

// isTelugu checks if cp is of the kind Telugu.
pub fn isTelugu(self: Telugu, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
