// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Bengali code points.

const std = @import("std");
const mem = std.mem;

const Bengali = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 2432,
hi: u21 = 2558,

pub fn init(allocator: *mem.Allocator) !Bengali {
    var instance = Bengali{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 127),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[0] = true;
    instance.array[1] = true;
    index = 2;
    while (index <= 3) : (index += 1) {
        instance.array[index] = true;
    }
    index = 5;
    while (index <= 12) : (index += 1) {
        instance.array[index] = true;
    }
    index = 15;
    while (index <= 16) : (index += 1) {
        instance.array[index] = true;
    }
    index = 19;
    while (index <= 40) : (index += 1) {
        instance.array[index] = true;
    }
    index = 42;
    while (index <= 48) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[50] = true;
    index = 54;
    while (index <= 57) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[60] = true;
    instance.array[61] = true;
    index = 62;
    while (index <= 64) : (index += 1) {
        instance.array[index] = true;
    }
    index = 65;
    while (index <= 68) : (index += 1) {
        instance.array[index] = true;
    }
    index = 71;
    while (index <= 72) : (index += 1) {
        instance.array[index] = true;
    }
    index = 75;
    while (index <= 76) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[77] = true;
    instance.array[78] = true;
    instance.array[87] = true;
    index = 92;
    while (index <= 93) : (index += 1) {
        instance.array[index] = true;
    }
    index = 95;
    while (index <= 97) : (index += 1) {
        instance.array[index] = true;
    }
    index = 98;
    while (index <= 99) : (index += 1) {
        instance.array[index] = true;
    }
    index = 102;
    while (index <= 111) : (index += 1) {
        instance.array[index] = true;
    }
    index = 112;
    while (index <= 113) : (index += 1) {
        instance.array[index] = true;
    }
    index = 114;
    while (index <= 115) : (index += 1) {
        instance.array[index] = true;
    }
    index = 116;
    while (index <= 121) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[122] = true;
    instance.array[123] = true;
    instance.array[124] = true;
    instance.array[125] = true;
    instance.array[126] = true;

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Bengali) void {
    self.allocator.free(self.array);
}

// isBengali checks if cp is of the kind Bengali.
pub fn isBengali(self: Bengali, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
