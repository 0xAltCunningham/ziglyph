// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Tibetan code points.

const std = @import("std");
const mem = std.mem;

const Tibetan = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 3841,
hi: u21 = 4138,

pub fn init(allocator: *mem.Allocator) !Tibetan {
    var instance = Tibetan{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 298),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[2097151] = true;
    index = 0;
    while (index <= 2) : (index += 1) {
        instance.array[index] = true;
    }
    index = 3;
    while (index <= 17) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[18] = true;
    instance.array[19] = true;
    index = 20;
    while (index <= 22) : (index += 1) {
        instance.array[index] = true;
    }
    index = 23;
    while (index <= 24) : (index += 1) {
        instance.array[index] = true;
    }
    index = 25;
    while (index <= 30) : (index += 1) {
        instance.array[index] = true;
    }
    index = 31;
    while (index <= 40) : (index += 1) {
        instance.array[index] = true;
    }
    index = 41;
    while (index <= 50) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[51] = true;
    instance.array[52] = true;
    instance.array[53] = true;
    instance.array[54] = true;
    instance.array[55] = true;
    instance.array[56] = true;
    instance.array[57] = true;
    instance.array[58] = true;
    instance.array[59] = true;
    instance.array[60] = true;
    index = 61;
    while (index <= 62) : (index += 1) {
        instance.array[index] = true;
    }
    index = 63;
    while (index <= 70) : (index += 1) {
        instance.array[index] = true;
    }
    index = 72;
    while (index <= 107) : (index += 1) {
        instance.array[index] = true;
    }
    index = 112;
    while (index <= 125) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[126] = true;
    index = 127;
    while (index <= 131) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[132] = true;
    index = 133;
    while (index <= 134) : (index += 1) {
        instance.array[index] = true;
    }
    index = 135;
    while (index <= 139) : (index += 1) {
        instance.array[index] = true;
    }
    index = 140;
    while (index <= 150) : (index += 1) {
        instance.array[index] = true;
    }
    index = 152;
    while (index <= 187) : (index += 1) {
        instance.array[index] = true;
    }
    index = 189;
    while (index <= 196) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[197] = true;
    index = 198;
    while (index <= 203) : (index += 1) {
        instance.array[index] = true;
    }
    index = 205;
    while (index <= 206) : (index += 1) {
        instance.array[index] = true;
    }
    index = 207;
    while (index <= 211) : (index += 1) {
        instance.array[index] = true;
    }
    index = 216;
    while (index <= 217) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Tibetan) void {
    self.allocator.free(self.array);
}

// isTibetan checks if cp is of the kind Tibetan.
pub fn isTibetan(self: Tibetan, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
