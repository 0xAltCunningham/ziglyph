// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Chakma code points.

const std = @import("std");
const mem = std.mem;

const Chakma = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 68000,
hi: u21 = 69959,

pub fn init(allocator: *mem.Allocator) !Chakma {
    var instance = Chakma{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 1960),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 1888;
    while (index <= 1890) : (index += 1) {
        instance.array[index] = true;
    }
    index = 1891;
    while (index <= 1926) : (index += 1) {
        instance.array[index] = true;
    }
    index = 1927;
    while (index <= 1931) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[1932] = true;
    index = 1933;
    while (index <= 1940) : (index += 1) {
        instance.array[index] = true;
    }
    index = 1942;
    while (index <= 1951) : (index += 1) {
        instance.array[index] = true;
    }
    index = 1952;
    while (index <= 1955) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[1956] = true;
    index = 1957;
    while (index <= 1958) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[1959] = true;

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Chakma) void {
    self.allocator.free(self.array);
}

// isChakma checks if cp is of the kind Chakma.
pub fn isChakma(self: Chakma, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
