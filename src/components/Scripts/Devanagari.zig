// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Devanagari code points.

const std = @import("std");
const mem = std.mem;

const Devanagari = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 2304,
hi: u21 = 43263,

pub fn init(allocator: *mem.Allocator) !Devanagari {
    var instance = Devanagari{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 40960),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 0;
    while (index <= 2) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[3] = true;
    index = 4;
    while (index <= 57) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[58] = true;
    instance.array[59] = true;
    instance.array[60] = true;
    instance.array[61] = true;
    index = 62;
    while (index <= 64) : (index += 1) {
        instance.array[index] = true;
    }
    index = 65;
    while (index <= 72) : (index += 1) {
        instance.array[index] = true;
    }
    index = 73;
    while (index <= 76) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[77] = true;
    index = 78;
    while (index <= 79) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[80] = true;
    index = 85;
    while (index <= 87) : (index += 1) {
        instance.array[index] = true;
    }
    index = 88;
    while (index <= 97) : (index += 1) {
        instance.array[index] = true;
    }
    index = 98;
    while (index <= 99) : (index += 1) {
        instance.array[index] = true;
    }
    index = 102;
    while (index <= 111) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[112] = true;
    instance.array[113] = true;
    index = 114;
    while (index <= 127) : (index += 1) {
        instance.array[index] = true;
    }
    index = 40928;
    while (index <= 40945) : (index += 1) {
        instance.array[index] = true;
    }
    index = 40946;
    while (index <= 40951) : (index += 1) {
        instance.array[index] = true;
    }
    index = 40952;
    while (index <= 40954) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[40955] = true;
    instance.array[40956] = true;
    index = 40957;
    while (index <= 40958) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[40959] = true;

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Devanagari) void {
    self.allocator.free(self.array);
}

// isDevanagari checks if cp is of the kind Devanagari.
pub fn isDevanagari(self: Devanagari, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
