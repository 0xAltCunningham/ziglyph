// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Devanagari code points.

const std = @import("std");
const mem = std.mem;

const Devanagari = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 2307,
hi: u21 = 43263,

pub fn init(allocator: *mem.Allocator) !Devanagari {
    var instance = Devanagari{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 40957),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 2097149;
    while (index <= 2097151) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[0] = true;
    index = 1;
    while (index <= 54) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[55] = true;
    instance.array[56] = true;
    instance.array[57] = true;
    instance.array[58] = true;
    index = 59;
    while (index <= 61) : (index += 1) {
        instance.array[index] = true;
    }
    index = 62;
    while (index <= 69) : (index += 1) {
        instance.array[index] = true;
    }
    index = 70;
    while (index <= 73) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[74] = true;
    index = 75;
    while (index <= 76) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[77] = true;
    index = 82;
    while (index <= 84) : (index += 1) {
        instance.array[index] = true;
    }
    index = 85;
    while (index <= 94) : (index += 1) {
        instance.array[index] = true;
    }
    index = 95;
    while (index <= 96) : (index += 1) {
        instance.array[index] = true;
    }
    index = 99;
    while (index <= 108) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[109] = true;
    instance.array[110] = true;
    index = 111;
    while (index <= 124) : (index += 1) {
        instance.array[index] = true;
    }
    index = 40925;
    while (index <= 40942) : (index += 1) {
        instance.array[index] = true;
    }
    index = 40943;
    while (index <= 40948) : (index += 1) {
        instance.array[index] = true;
    }
    index = 40949;
    while (index <= 40951) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[40952] = true;
    instance.array[40953] = true;
    index = 40954;
    while (index <= 40955) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[40956] = true;

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Devanagari) void {
    self.allocator.free(self.array);
}

// isDevanagari checks if cp is of the kind Devanagari.
pub fn isDevanagari(self: Devanagari, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
