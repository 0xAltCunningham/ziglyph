// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Inherited code points.

const std = @import("std");
const mem = std.mem;

const Inherited = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 1157,
hi: u21 = 917999,

pub fn init(allocator: *mem.Allocator) !Inherited {
    var instance = Inherited{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 916843),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 2096763;
    while (index <= 2096874) : (index += 1) {
        instance.array[index] = true;
    }
    index = 0;
    while (index <= 1) : (index += 1) {
        instance.array[index] = true;
    }
    index = 454;
    while (index <= 464) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[491] = true;
    index = 1228;
    while (index <= 1231) : (index += 1) {
        instance.array[index] = true;
    }
    index = 5675;
    while (index <= 5688) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[5689] = true;
    index = 5690;
    while (index <= 5691) : (index += 1) {
        instance.array[index] = true;
    }
    index = 6219;
    while (index <= 6221) : (index += 1) {
        instance.array[index] = true;
    }
    index = 6223;
    while (index <= 6235) : (index += 1) {
        instance.array[index] = true;
    }
    index = 6237;
    while (index <= 6243) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[6248] = true;
    instance.array[6255] = true;
    index = 6259;
    while (index <= 6260) : (index += 1) {
        instance.array[index] = true;
    }
    index = 6459;
    while (index <= 6516) : (index += 1) {
        instance.array[index] = true;
    }
    index = 6518;
    while (index <= 6522) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7047;
    while (index <= 7048) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7243;
    while (index <= 7255) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7256;
    while (index <= 7259) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[7260] = true;
    index = 7261;
    while (index <= 7263) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7264;
    while (index <= 7275) : (index += 1) {
        instance.array[index] = true;
    }
    index = 11173;
    while (index <= 11176) : (index += 1) {
        instance.array[index] = true;
    }
    index = 11284;
    while (index <= 11285) : (index += 1) {
        instance.array[index] = true;
    }
    index = 63867;
    while (index <= 63882) : (index += 1) {
        instance.array[index] = true;
    }
    index = 63899;
    while (index <= 63912) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[64888] = true;
    instance.array[65115] = true;
    instance.array[69302] = true;
    index = 117986;
    while (index <= 117988) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118006;
    while (index <= 118013) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118016;
    while (index <= 118022) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118053;
    while (index <= 118056) : (index += 1) {
        instance.array[index] = true;
    }
    index = 916603;
    while (index <= 916842) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Inherited) void {
    self.allocator.free(self.array);
}

// isInherited checks if cp is of the kind Inherited.
pub fn isInherited(self: Inherited, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
