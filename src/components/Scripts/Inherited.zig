// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Inherited code points.

const std = @import("std");
const mem = std.mem;

const Inherited = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 768,
hi: u21 = 917999,

pub fn init(allocator: *mem.Allocator) !Inherited {
    var instance = Inherited{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 917232),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 0;
    while (index <= 111) : (index += 1) {
        instance.array[index] = true;
    }
    index = 389;
    while (index <= 390) : (index += 1) {
        instance.array[index] = true;
    }
    index = 843;
    while (index <= 853) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[880] = true;
    index = 1617;
    while (index <= 1620) : (index += 1) {
        instance.array[index] = true;
    }
    index = 6064;
    while (index <= 6077) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[6078] = true;
    index = 6079;
    while (index <= 6080) : (index += 1) {
        instance.array[index] = true;
    }
    index = 6608;
    while (index <= 6610) : (index += 1) {
        instance.array[index] = true;
    }
    index = 6612;
    while (index <= 6624) : (index += 1) {
        instance.array[index] = true;
    }
    index = 6626;
    while (index <= 6632) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[6637] = true;
    instance.array[6644] = true;
    index = 6648;
    while (index <= 6649) : (index += 1) {
        instance.array[index] = true;
    }
    index = 6848;
    while (index <= 6905) : (index += 1) {
        instance.array[index] = true;
    }
    index = 6907;
    while (index <= 6911) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7436;
    while (index <= 7437) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7632;
    while (index <= 7644) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7645;
    while (index <= 7648) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[7649] = true;
    index = 7650;
    while (index <= 7652) : (index += 1) {
        instance.array[index] = true;
    }
    index = 7653;
    while (index <= 7664) : (index += 1) {
        instance.array[index] = true;
    }
    index = 11562;
    while (index <= 11565) : (index += 1) {
        instance.array[index] = true;
    }
    index = 11673;
    while (index <= 11674) : (index += 1) {
        instance.array[index] = true;
    }
    index = 64256;
    while (index <= 64271) : (index += 1) {
        instance.array[index] = true;
    }
    index = 64288;
    while (index <= 64301) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[65277] = true;
    instance.array[65504] = true;
    instance.array[69691] = true;
    index = 118375;
    while (index <= 118377) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118395;
    while (index <= 118402) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118405;
    while (index <= 118411) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118442;
    while (index <= 118445) : (index += 1) {
        instance.array[index] = true;
    }
    index = 916992;
    while (index <= 917231) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Inherited) void {
    self.allocator.free(self.array);
}

// isInherited checks if cp is of the kind Inherited.
pub fn isInherited(self: Inherited, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
