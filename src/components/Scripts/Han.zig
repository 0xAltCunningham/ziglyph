// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Han code points.

const std = @import("std");
const mem = std.mem;

const Han = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 11904,
hi: u21 = 201546,

pub fn init(allocator: *mem.Allocator) !Han {
    var instance = Han{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 189643),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 0;
    while (index <= 25) : (index += 1) {
        instance.array[index] = true;
    }
    index = 27;
    while (index <= 115) : (index += 1) {
        instance.array[index] = true;
    }
    index = 128;
    while (index <= 341) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[389] = true;
    instance.array[391] = true;
    index = 417;
    while (index <= 425) : (index += 1) {
        instance.array[index] = true;
    }
    index = 440;
    while (index <= 442) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[443] = true;
    index = 1408;
    while (index <= 7999) : (index += 1) {
        instance.array[index] = true;
    }
    index = 8064;
    while (index <= 29052) : (index += 1) {
        instance.array[index] = true;
    }
    index = 51840;
    while (index <= 52205) : (index += 1) {
        instance.array[index] = true;
    }
    index = 52208;
    while (index <= 52313) : (index += 1) {
        instance.array[index] = true;
    }
    index = 82288;
    while (index <= 82289) : (index += 1) {
        instance.array[index] = true;
    }
    index = 119168;
    while (index <= 161885) : (index += 1) {
        instance.array[index] = true;
    }
    index = 161920;
    while (index <= 166068) : (index += 1) {
        instance.array[index] = true;
    }
    index = 166080;
    while (index <= 166301) : (index += 1) {
        instance.array[index] = true;
    }
    index = 166304;
    while (index <= 172065) : (index += 1) {
        instance.array[index] = true;
    }
    index = 172080;
    while (index <= 179552) : (index += 1) {
        instance.array[index] = true;
    }
    index = 182656;
    while (index <= 183197) : (index += 1) {
        instance.array[index] = true;
    }
    index = 184704;
    while (index <= 189642) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Han) void {
    self.allocator.free(self.array);
}

// isHan checks if cp is of the kind Han.
pub fn isHan(self: Han, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
