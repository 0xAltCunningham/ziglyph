// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Mende_Kikakui code points.

const std = @import("std");
const mem = std.mem;

const MendeKikakui = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 124928,
hi: u21 = 125142,

pub fn init(allocator: *mem.Allocator) !MendeKikakui {
    var instance = MendeKikakui{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 215),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 0;
    while (index <= 196) : (index += 1) {
        instance.array[index] = true;
    }
    index = 199;
    while (index <= 207) : (index += 1) {
        instance.array[index] = true;
    }
    index = 208;
    while (index <= 214) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *MendeKikakui) void {
    self.allocator.free(self.array);
}

// isMendeKikakui checks if cp is of the kind Mende_Kikakui.
pub fn isMendeKikakui(self: MendeKikakui, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
