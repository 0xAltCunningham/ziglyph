// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Javanese code points.

const std = @import("std");
const mem = std.mem;

const Javanese = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 43395,
hi: u21 = 43754,

pub fn init(allocator: *mem.Allocator) !Javanese {
    var instance = Javanese{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 360),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 2097149;
    while (index <= 2097151) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[0] = true;
    index = 1;
    while (index <= 47) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[48] = true;
    index = 49;
    while (index <= 50) : (index += 1) {
        instance.array[index] = true;
    }
    index = 51;
    while (index <= 54) : (index += 1) {
        instance.array[index] = true;
    }
    index = 55;
    while (index <= 56) : (index += 1) {
        instance.array[index] = true;
    }
    index = 57;
    while (index <= 58) : (index += 1) {
        instance.array[index] = true;
    }
    index = 59;
    while (index <= 61) : (index += 1) {
        instance.array[index] = true;
    }
    index = 62;
    while (index <= 74) : (index += 1) {
        instance.array[index] = true;
    }
    index = 77;
    while (index <= 86) : (index += 1) {
        instance.array[index] = true;
    }
    index = 91;
    while (index <= 92) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Javanese) void {
    self.allocator.free(self.array);
}

// isJavanese checks if cp is of the kind Javanese.
pub fn isJavanese(self: Javanese, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
