// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Gurmukhi code points.

const std = @import("std");
const mem = std.mem;

const Gurmukhi = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 2561,
hi: u21 = 2678,

pub fn init(allocator: *mem.Allocator) !Gurmukhi {
    var instance = Gurmukhi{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 118),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    index = 0;
    while (index <= 1) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[2] = true;
    index = 4;
    while (index <= 9) : (index += 1) {
        instance.array[index] = true;
    }
    index = 14;
    while (index <= 15) : (index += 1) {
        instance.array[index] = true;
    }
    index = 18;
    while (index <= 39) : (index += 1) {
        instance.array[index] = true;
    }
    index = 41;
    while (index <= 47) : (index += 1) {
        instance.array[index] = true;
    }
    index = 49;
    while (index <= 50) : (index += 1) {
        instance.array[index] = true;
    }
    index = 52;
    while (index <= 53) : (index += 1) {
        instance.array[index] = true;
    }
    index = 55;
    while (index <= 56) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[59] = true;
    index = 61;
    while (index <= 63) : (index += 1) {
        instance.array[index] = true;
    }
    index = 64;
    while (index <= 65) : (index += 1) {
        instance.array[index] = true;
    }
    index = 70;
    while (index <= 71) : (index += 1) {
        instance.array[index] = true;
    }
    index = 74;
    while (index <= 76) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[80] = true;
    index = 88;
    while (index <= 91) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[93] = true;
    index = 101;
    while (index <= 110) : (index += 1) {
        instance.array[index] = true;
    }
    index = 111;
    while (index <= 112) : (index += 1) {
        instance.array[index] = true;
    }
    index = 113;
    while (index <= 115) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[116] = true;
    instance.array[117] = true;

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Gurmukhi) void {
    self.allocator.free(self.array);
}

// isGurmukhi checks if cp is of the kind Gurmukhi.
pub fn isGurmukhi(self: Gurmukhi, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
