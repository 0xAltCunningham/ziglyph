// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Modifier_Symbol code points.

const std = @import("std");
const mem = std.mem;

const ModifierSymbol = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 94,
hi: u21 = 127999,

pub fn init(allocator: *mem.Allocator) !ModifierSymbol {
    var instance = ModifierSymbol{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 127906),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[0] = true;
    instance.array[2] = true;
    instance.array[74] = true;
    instance.array[81] = true;
    instance.array[86] = true;
    instance.array[90] = true;
    index = 612;
    while (index <= 615) : (index += 1) {
        instance.array[index] = true;
    }
    index = 628;
    while (index <= 641) : (index += 1) {
        instance.array[index] = true;
    }
    index = 647;
    while (index <= 653) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[655] = true;
    index = 657;
    while (index <= 673) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[791] = true;
    index = 806;
    while (index <= 807) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[8031] = true;
    index = 8033;
    while (index <= 8035) : (index += 1) {
        instance.array[index] = true;
    }
    index = 8047;
    while (index <= 8049) : (index += 1) {
        instance.array[index] = true;
    }
    index = 8063;
    while (index <= 8065) : (index += 1) {
        instance.array[index] = true;
    }
    index = 8079;
    while (index <= 8081) : (index += 1) {
        instance.array[index] = true;
    }
    index = 8095;
    while (index <= 8096) : (index += 1) {
        instance.array[index] = true;
    }
    index = 12349;
    while (index <= 12350) : (index += 1) {
        instance.array[index] = true;
    }
    index = 42658;
    while (index <= 42680) : (index += 1) {
        instance.array[index] = true;
    }
    index = 42690;
    while (index <= 42691) : (index += 1) {
        instance.array[index] = true;
    }
    index = 42795;
    while (index <= 42796) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[43773] = true;
    index = 43788;
    while (index <= 43789) : (index += 1) {
        instance.array[index] = true;
    }
    index = 64340;
    while (index <= 64355) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[65248] = true;
    instance.array[65250] = true;
    instance.array[65413] = true;
    index = 127901;
    while (index <= 127905) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *ModifierSymbol) void {
    self.allocator.free(self.array);
}

// isModifierSymbol checks if cp is of the kind Modifier_Symbol.
pub fn isModifierSymbol(self: ModifierSymbol, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
