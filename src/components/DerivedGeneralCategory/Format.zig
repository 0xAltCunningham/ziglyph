// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
// Placeholders:
//    0. Code point type
//    1. Struct name
//    2. Array length
//    3. Highest code point
//    4. Lowest code point
//! Unicode Format code points.

const std = @import("std");
const mem = std.mem;

const Format = @This();

allocator: *mem.Allocator,
array: []bool,
lo: u21 = 173,
hi: u21 = 917631,

pub fn init(allocator: *mem.Allocator) !Format {
    var instance = Format{
        .allocator = allocator,
        .array = try allocator.alloc(bool, 917459),
    };

    mem.set(bool, instance.array, false);

    var index: u21 = 0;
    instance.array[0] = true;
    index = 1363;
    while (index <= 1368) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[1391] = true;
    instance.array[1584] = true;
    instance.array[1634] = true;
    instance.array[2101] = true;
    instance.array[5985] = true;
    index = 8030;
    while (index <= 8034) : (index += 1) {
        instance.array[index] = true;
    }
    index = 8061;
    while (index <= 8065) : (index += 1) {
        instance.array[index] = true;
    }
    index = 8115;
    while (index <= 8119) : (index += 1) {
        instance.array[index] = true;
    }
    index = 8121;
    while (index <= 8130) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[65106] = true;
    index = 65356;
    while (index <= 65358) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[69648] = true;
    instance.array[69664] = true;
    index = 78723;
    while (index <= 78731) : (index += 1) {
        instance.array[index] = true;
    }
    index = 113651;
    while (index <= 113654) : (index += 1) {
        instance.array[index] = true;
    }
    index = 118982;
    while (index <= 118989) : (index += 1) {
        instance.array[index] = true;
    }
    instance.array[917332] = true;
    index = 917363;
    while (index <= 917458) : (index += 1) {
        instance.array[index] = true;
    }

    // Placeholder: 0. Struct name
    return instance;
}

pub fn deinit(self: *Format) void {
    self.allocator.free(self.array);
}

// isFormat checks if cp is of the kind Format.
pub fn isFormat(self: Format, cp: u21) bool {
    if (cp < self.lo or cp > self.hi) return false;
    const index = cp - self.lo;
    return if (index >= self.array.len) false else self.array[index];
}
