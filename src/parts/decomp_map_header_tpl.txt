// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
//! Unicode decomposition map.

const std = @import("std");
const mem = std.mem;
const sort = std.sort.sort;
const unicode = std.unicode;
const CccMap = @import("../DerivedCombiningClass/CccMap.zig");

/// Decomposed is the result of a code point full decomposition. It can be one of:
/// * `.same` : Default canonical decomposition to the code point itself.
/// * `.single` : Singleton canonical decomposition to a different single code point.
/// * `.canon` : Canonical decomposition, which always results in two code points.
/// * `.compat` : Compatibility decomposition, which can results in at most 18 code points.
pub const Decomposed = union(enum) {{
    same: u21,
    single: u21,
    canon: [2]u21,
    compat: []const u21,
}};

allocator: *std.mem.Allocator,
ccc_map: CccMap,
map: std.AutoHashMap(u21, Decomposed),

const Self = @This();
pub fn init(allocator: *std.mem.Allocator) !Self {{
    var instance = Self{{
        .allocator = allocator,
        .ccc_map = try CccMap.init(allocator),
        .map = std.AutoHashMap(u21, Decomposed).init(allocator),
    }};

