// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UCD.zip by running ucd_gen.sh.
//! Unicode decomposition map.

const std = @import("std");
const mem = std.mem;
const sort = std.sort.sort;
const unicode = std.unicode;

const CccMap = @import("../DerivedCombiningClass/CccMap.zig");
const DecompTrie = @import("../../../zigstr/DecompTrie.zig");
const HangulMap = @import("../HangulSyllableType/HangulMap.zig");
const Letter = @import("../../aggregate/Letter.zig");
const NFDCheck = @import("../DerivedNormalizationProps/NFDCheck.zig");

allocator: *mem.Allocator,
ccc_map: CccMap,
decomp_trie: DecompTrie,
hangul_map: HangulMap,
letter: Letter,
nfd_check: NFDCheck,

const Decomposed = DecompTrie.Decomposed;
const Self = @This();

const Singleton = struct {
    instance: *Self,
    ref_count: usize,
};

var singleton: ?Singleton = null;

pub fn init(allocator: *mem.Allocator) !*Self {
    if (singleton) |*s| {
        s.ref_count += 1;
        return s.instance;
    }

    var self = try allocator.create(Self);
    errdefer allocator.destroy(self);

    self.* = Self{
        .allocator = allocator,
        .ccc_map = CccMap{},
        .decomp_trie = try DecompTrie.init(allocator),
        .hangul_map = HangulMap{},
        .letter = Letter.new(),
        .nfd_check = NFDCheck{},
    };

    try self.addEntries();

    singleton = Singleton{
        .instance = self,
        .ref_count = 1,
    };

    return self;
}

pub fn deinit(self: *Self) void {
    if (singleton) |*s| {
        s.ref_count -= 1;
        if (s.ref_count == 0) {
            self.decomp_trie.deinit();
            self.allocator.destroy(s.instance);
            singleton = null;
        }
    }
}

fn addEntries(self: *Self) !void {
