
    return instance;
}}

const Self = @This();
pub fn deinit(self: *Self) void {{
    var iter = self.map.iterator();
    while (iter.next()) |entry| {{
        self.allocator.free(entry.value);
    }}
    self.map.deinit();
}}

/// CaseFold can be a simple, one code point value or a sequence of code points in the full case fold scenario.
pub const CaseFold = union(enum) {{
    simple: u21,
    full: []const u21,
}};

/// toCaseFold will convert a code point into its case folded equivalent. Note that this can result
/// in a mapping to more than one code point, known as the full case fold.
pub fn toCaseFold(self: Self, cp: u21) CaseFold {{
    if (self.map.get(cp)) |seq| {{
        if (seq.len == 1) {{
            return .{{ .simple = seq[0] }};
        }} else {{
            return .{{ .full = seq }};
        }}
    }} else {{
        return .{{ .simple = cp }};
    }}
}}
