// Autogenerated from http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt by running ucd_gen.
// Placeholders:
//    1. Struct name
//    2. Array length
//    3. Ranges length
//! Unicode Number category code points data.

const std = @import("std");
const Range = @import("../Range.zig");

const Number = @This();

array: [130033]bool = [_]bool{false} ** 130033,
ranges: [126]Range = undefined, // Should this be optional?

pub fn new() Number {
    var instance: Number = Number{};

    instance.array[185] = true;
    instance.array[8304] = true;
    instance.array[11517] = true;
    instance.array[12295] = true;
    instance.array[66369] = true;
    instance.array[66378] = true;
    instance.array[130032] = true;
    instance.ranges[0] = Range.new(0x30, 0x39);
    instance.ranges[1] = Range.new(0xB2, 0xB3);
    instance.ranges[2] = Range.new(0xBC, 0xBE);
    instance.ranges[3] = Range.new(0x660, 0x669);
    instance.ranges[4] = Range.new(0x6F0, 0x6F9);
    instance.ranges[5] = Range.new(0x7C0, 0x7C9);
    instance.ranges[6] = Range.new(0x966, 0x96F);
    instance.ranges[7] = Range.new(0x9E6, 0x9EF);
    instance.ranges[8] = Range.new(0x9F4, 0x9F9);
    instance.ranges[9] = Range.new(0xA66, 0xA6F);
    instance.ranges[10] = Range.new(0xAE6, 0xAEF);
    instance.ranges[11] = Range.new(0xB66, 0xB6F);
    instance.ranges[12] = Range.new(0xB72, 0xB77);
    instance.ranges[13] = Range.new(0xBE6, 0xBF2);
    instance.ranges[14] = Range.new(0xC66, 0xC6F);
    instance.ranges[15] = Range.new(0xC78, 0xC7E);
    instance.ranges[16] = Range.new(0xCE6, 0xCEF);
    instance.ranges[17] = Range.new(0xD58, 0xD5E);
    instance.ranges[18] = Range.new(0xD66, 0xD78);
    instance.ranges[19] = Range.new(0xDE6, 0xDEF);
    instance.ranges[20] = Range.new(0xE50, 0xE59);
    instance.ranges[21] = Range.new(0xED0, 0xED9);
    instance.ranges[22] = Range.new(0xF20, 0xF33);
    instance.ranges[23] = Range.new(0x1040, 0x1049);
    instance.ranges[24] = Range.new(0x1090, 0x1099);
    instance.ranges[25] = Range.new(0x1369, 0x137C);
    instance.ranges[26] = Range.new(0x16EE, 0x16F0);
    instance.ranges[27] = Range.new(0x17E0, 0x17E9);
    instance.ranges[28] = Range.new(0x17F0, 0x17F9);
    instance.ranges[29] = Range.new(0x1810, 0x1819);
    instance.ranges[30] = Range.new(0x1946, 0x194F);
    instance.ranges[31] = Range.new(0x19D0, 0x19DA);
    instance.ranges[32] = Range.new(0x1A80, 0x1A89);
    instance.ranges[33] = Range.new(0x1A90, 0x1A99);
    instance.ranges[34] = Range.new(0x1B50, 0x1B59);
    instance.ranges[35] = Range.new(0x1BB0, 0x1BB9);
    instance.ranges[36] = Range.new(0x1C40, 0x1C49);
    instance.ranges[37] = Range.new(0x1C50, 0x1C59);
    instance.ranges[38] = Range.new(0x2074, 0x2079);
    instance.ranges[39] = Range.new(0x2080, 0x2089);
    instance.ranges[40] = Range.new(0x2150, 0x2182);
    instance.ranges[41] = Range.new(0x2185, 0x2189);
    instance.ranges[42] = Range.new(0x2460, 0x249B);
    instance.ranges[43] = Range.new(0x24EA, 0x24FF);
    instance.ranges[44] = Range.new(0x2776, 0x2793);
    instance.ranges[45] = Range.new(0x3021, 0x3029);
    instance.ranges[46] = Range.new(0x3038, 0x303A);
    instance.ranges[47] = Range.new(0x3192, 0x3195);
    instance.ranges[48] = Range.new(0x3220, 0x3229);
    instance.ranges[49] = Range.new(0x3248, 0x324F);
    instance.ranges[50] = Range.new(0x3251, 0x325F);
    instance.ranges[51] = Range.new(0x3280, 0x3289);
    instance.ranges[52] = Range.new(0x32B1, 0x32BF);
    instance.ranges[53] = Range.new(0xA620, 0xA629);
    instance.ranges[54] = Range.new(0xA6E6, 0xA6EF);
    instance.ranges[55] = Range.new(0xA830, 0xA835);
    instance.ranges[56] = Range.new(0xA8D0, 0xA8D9);
    instance.ranges[57] = Range.new(0xA900, 0xA909);
    instance.ranges[58] = Range.new(0xA9D0, 0xA9D9);
    instance.ranges[59] = Range.new(0xA9F0, 0xA9F9);
    instance.ranges[60] = Range.new(0xAA50, 0xAA59);
    instance.ranges[61] = Range.new(0xABF0, 0xABF9);
    instance.ranges[62] = Range.new(0xFF10, 0xFF19);
    instance.ranges[63] = Range.new(0x10107, 0x10133);
    instance.ranges[64] = Range.new(0x10140, 0x10178);
    instance.ranges[65] = Range.new(0x1018A, 0x1018B);
    instance.ranges[66] = Range.new(0x102E1, 0x102FB);
    instance.ranges[67] = Range.new(0x10320, 0x10323);
    instance.ranges[68] = Range.new(0x103D1, 0x103D5);
    instance.ranges[69] = Range.new(0x104A0, 0x104A9);
    instance.ranges[70] = Range.new(0x10858, 0x1085F);
    instance.ranges[71] = Range.new(0x10879, 0x1087F);
    instance.ranges[72] = Range.new(0x108A7, 0x108AF);
    instance.ranges[73] = Range.new(0x108FB, 0x108FF);
    instance.ranges[74] = Range.new(0x10916, 0x1091B);
    instance.ranges[75] = Range.new(0x109BC, 0x109BD);
    instance.ranges[76] = Range.new(0x109C0, 0x109CF);
    instance.ranges[77] = Range.new(0x109D2, 0x109FF);
    instance.ranges[78] = Range.new(0x10A40, 0x10A48);
    instance.ranges[79] = Range.new(0x10A7D, 0x10A7E);
    instance.ranges[80] = Range.new(0x10A9D, 0x10A9F);
    instance.ranges[81] = Range.new(0x10AEB, 0x10AEF);
    instance.ranges[82] = Range.new(0x10B58, 0x10B5F);
    instance.ranges[83] = Range.new(0x10B78, 0x10B7F);
    instance.ranges[84] = Range.new(0x10BA9, 0x10BAF);
    instance.ranges[85] = Range.new(0x10CFA, 0x10CFF);
    instance.ranges[86] = Range.new(0x10D30, 0x10D39);
    instance.ranges[87] = Range.new(0x10E60, 0x10E7E);
    instance.ranges[88] = Range.new(0x10F1D, 0x10F26);
    instance.ranges[89] = Range.new(0x10F51, 0x10F54);
    instance.ranges[90] = Range.new(0x10FC5, 0x10FCB);
    instance.ranges[91] = Range.new(0x11052, 0x1106F);
    instance.ranges[92] = Range.new(0x110F0, 0x110F9);
    instance.ranges[93] = Range.new(0x11136, 0x1113F);
    instance.ranges[94] = Range.new(0x111D0, 0x111D9);
    instance.ranges[95] = Range.new(0x111E1, 0x111F4);
    instance.ranges[96] = Range.new(0x112F0, 0x112F9);
    instance.ranges[97] = Range.new(0x11450, 0x11459);
    instance.ranges[98] = Range.new(0x114D0, 0x114D9);
    instance.ranges[99] = Range.new(0x11650, 0x11659);
    instance.ranges[100] = Range.new(0x116C0, 0x116C9);
    instance.ranges[101] = Range.new(0x11730, 0x1173B);
    instance.ranges[102] = Range.new(0x118E0, 0x118F2);
    instance.ranges[103] = Range.new(0x11950, 0x11959);
    instance.ranges[104] = Range.new(0x11C50, 0x11C6C);
    instance.ranges[105] = Range.new(0x11D50, 0x11D59);
    instance.ranges[106] = Range.new(0x11DA0, 0x11DA9);
    instance.ranges[107] = Range.new(0x11FC0, 0x11FD4);
    instance.ranges[108] = Range.new(0x12400, 0x1246E);
    instance.ranges[109] = Range.new(0x16A60, 0x16A69);
    instance.ranges[110] = Range.new(0x16B50, 0x16B59);
    instance.ranges[111] = Range.new(0x16B5B, 0x16B61);
    instance.ranges[112] = Range.new(0x16E80, 0x16E96);
    instance.ranges[113] = Range.new(0x1D2E0, 0x1D2F3);
    instance.ranges[114] = Range.new(0x1D360, 0x1D378);
    instance.ranges[115] = Range.new(0x1D7CE, 0x1D7FF);
    instance.ranges[116] = Range.new(0x1E140, 0x1E149);
    instance.ranges[117] = Range.new(0x1E2F0, 0x1E2F9);
    instance.ranges[118] = Range.new(0x1E8C7, 0x1E8CF);
    instance.ranges[119] = Range.new(0x1E950, 0x1E959);
    instance.ranges[120] = Range.new(0x1EC71, 0x1ECAB);
    instance.ranges[121] = Range.new(0x1ECAD, 0x1ECAF);
    instance.ranges[122] = Range.new(0x1ECB1, 0x1ECB4);
    instance.ranges[123] = Range.new(0x1ED01, 0x1ED2D);
    instance.ranges[124] = Range.new(0x1ED2F, 0x1ED3D);
    instance.ranges[125] = Range.new(0x1F100, 0x1F10C);

    // Placeholder: Struct name.
    return instance;
}

pub fn isNumber(self: Number, cp: u21) bool {
    if (cp < self.array.len and self.array[cp]) return true;

    //for (self.ranges) |range| {
    //    if (cp >= range.start and cp <= range.end) return true;
    //}

    return false;
}
